// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfconfig(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfconfig {
	_qeyKryWEwfconfig := qeyKryWEwfconfig{}

	_qeyKryWEwfconfig.qeyKryWEwfconfigDo.UseDB(db, opts...)
	_qeyKryWEwfconfig.qeyKryWEwfconfigDo.UseModel(&model.QeyKryWEwfconfig{})

	tableName := _qeyKryWEwfconfig.qeyKryWEwfconfigDo.TableName()
	_qeyKryWEwfconfig.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfconfig.Name = field.NewString(tableName, "name")
	_qeyKryWEwfconfig.Val = field.NewBytes(tableName, "val")
	_qeyKryWEwfconfig.Autoload = field.NewString(tableName, "autoload")

	_qeyKryWEwfconfig.fillFieldMap()

	return _qeyKryWEwfconfig
}

type qeyKryWEwfconfig struct {
	qeyKryWEwfconfigDo

	ALL      field.Asterisk
	Name     field.String
	Val      field.Bytes
	Autoload field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfconfig) Table(newTableName string) *qeyKryWEwfconfig {
	q.qeyKryWEwfconfigDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfconfig) As(alias string) *qeyKryWEwfconfig {
	q.qeyKryWEwfconfigDo.DO = *(q.qeyKryWEwfconfigDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfconfig) updateTableName(table string) *qeyKryWEwfconfig {
	q.ALL = field.NewAsterisk(table)
	q.Name = field.NewString(table, "name")
	q.Val = field.NewBytes(table, "val")
	q.Autoload = field.NewString(table, "autoload")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfconfig) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["name"] = q.Name
	q.fieldMap["val"] = q.Val
	q.fieldMap["autoload"] = q.Autoload
}

func (q qeyKryWEwfconfig) clone(db *gorm.DB) qeyKryWEwfconfig {
	q.qeyKryWEwfconfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfconfig) replaceDB(db *gorm.DB) qeyKryWEwfconfig {
	q.qeyKryWEwfconfigDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfconfigDo struct{ gen.DO }

type IQeyKryWEwfconfigDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfconfigDo
	WithContext(ctx context.Context) IQeyKryWEwfconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfconfigDo
	WriteDB() IQeyKryWEwfconfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfconfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfconfigDo
	Not(conds ...gen.Condition) IQeyKryWEwfconfigDo
	Or(conds ...gen.Condition) IQeyKryWEwfconfigDo
	Select(conds ...field.Expr) IQeyKryWEwfconfigDo
	Where(conds ...gen.Condition) IQeyKryWEwfconfigDo
	Order(conds ...field.Expr) IQeyKryWEwfconfigDo
	Distinct(cols ...field.Expr) IQeyKryWEwfconfigDo
	Omit(cols ...field.Expr) IQeyKryWEwfconfigDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfconfigDo
	Group(cols ...field.Expr) IQeyKryWEwfconfigDo
	Having(conds ...gen.Condition) IQeyKryWEwfconfigDo
	Limit(limit int) IQeyKryWEwfconfigDo
	Offset(offset int) IQeyKryWEwfconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfconfigDo
	Unscoped() IQeyKryWEwfconfigDo
	Create(values ...*model.QeyKryWEwfconfig) error
	CreateInBatches(values []*model.QeyKryWEwfconfig, batchSize int) error
	Save(values ...*model.QeyKryWEwfconfig) error
	First() (*model.QeyKryWEwfconfig, error)
	Take() (*model.QeyKryWEwfconfig, error)
	Last() (*model.QeyKryWEwfconfig, error)
	Find() ([]*model.QeyKryWEwfconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfconfig, err error)
	FindInBatches(result *[]*model.QeyKryWEwfconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfconfigDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfconfigDo
	Joins(fields ...field.RelationField) IQeyKryWEwfconfigDo
	Preload(fields ...field.RelationField) IQeyKryWEwfconfigDo
	FirstOrInit() (*model.QeyKryWEwfconfig, error)
	FirstOrCreate() (*model.QeyKryWEwfconfig, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfconfigDo) Debug() IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfconfigDo) WithContext(ctx context.Context) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfconfigDo) ReadDB() IQeyKryWEwfconfigDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfconfigDo) WriteDB() IQeyKryWEwfconfigDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfconfigDo) Session(config *gorm.Session) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfconfigDo) Clauses(conds ...clause.Expression) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfconfigDo) Returning(value interface{}, columns ...string) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfconfigDo) Not(conds ...gen.Condition) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfconfigDo) Or(conds ...gen.Condition) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfconfigDo) Select(conds ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfconfigDo) Where(conds ...gen.Condition) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfconfigDo) Order(conds ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfconfigDo) Distinct(cols ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfconfigDo) Omit(cols ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfconfigDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfconfigDo) Group(cols ...field.Expr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfconfigDo) Having(conds ...gen.Condition) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfconfigDo) Limit(limit int) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfconfigDo) Offset(offset int) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfconfigDo) Unscoped() IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfconfigDo) Create(values ...*model.QeyKryWEwfconfig) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfconfigDo) CreateInBatches(values []*model.QeyKryWEwfconfig, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfconfigDo) Save(values ...*model.QeyKryWEwfconfig) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfconfigDo) First() (*model.QeyKryWEwfconfig, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfconfig), nil
	}
}

func (q qeyKryWEwfconfigDo) Take() (*model.QeyKryWEwfconfig, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfconfig), nil
	}
}

func (q qeyKryWEwfconfigDo) Last() (*model.QeyKryWEwfconfig, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfconfig), nil
	}
}

func (q qeyKryWEwfconfigDo) Find() ([]*model.QeyKryWEwfconfig, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfconfig), err
}

func (q qeyKryWEwfconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfconfig, err error) {
	buf := make([]*model.QeyKryWEwfconfig, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfconfigDo) FindInBatches(result *[]*model.QeyKryWEwfconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfconfigDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfconfigDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfconfigDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfconfigDo) Joins(fields ...field.RelationField) IQeyKryWEwfconfigDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfconfigDo) Preload(fields ...field.RelationField) IQeyKryWEwfconfigDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfconfigDo) FirstOrInit() (*model.QeyKryWEwfconfig, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfconfig), nil
	}
}

func (q qeyKryWEwfconfigDo) FirstOrCreate() (*model.QeyKryWEwfconfig, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfconfig), nil
	}
}

func (q qeyKryWEwfconfigDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfconfig, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfconfigDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfconfigDo) Delete(models ...*model.QeyKryWEwfconfig) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfconfigDo) withDO(do gen.Dao) *qeyKryWEwfconfigDo {
	q.DO = *do.(*gen.DO)
	return q
}
