// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfcrawler(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfcrawler {
	_qeyKryWEwfcrawler := qeyKryWEwfcrawler{}

	_qeyKryWEwfcrawler.qeyKryWEwfcrawlerDo.UseDB(db, opts...)
	_qeyKryWEwfcrawler.qeyKryWEwfcrawlerDo.UseModel(&model.QeyKryWEwfcrawler{})

	tableName := _qeyKryWEwfcrawler.qeyKryWEwfcrawlerDo.TableName()
	_qeyKryWEwfcrawler.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfcrawler.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwfcrawler.PatternSig = field.NewBytes(tableName, "patternSig")
	_qeyKryWEwfcrawler.Status = field.NewString(tableName, "status")
	_qeyKryWEwfcrawler.LastUpdate = field.NewInt32(tableName, "lastUpdate")
	_qeyKryWEwfcrawler.PTR = field.NewString(tableName, "PTR")

	_qeyKryWEwfcrawler.fillFieldMap()

	return _qeyKryWEwfcrawler
}

type qeyKryWEwfcrawler struct {
	qeyKryWEwfcrawlerDo

	ALL        field.Asterisk
	IP         field.Bytes
	PatternSig field.Bytes
	Status     field.String
	LastUpdate field.Int32
	PTR        field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfcrawler) Table(newTableName string) *qeyKryWEwfcrawler {
	q.qeyKryWEwfcrawlerDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfcrawler) As(alias string) *qeyKryWEwfcrawler {
	q.qeyKryWEwfcrawlerDo.DO = *(q.qeyKryWEwfcrawlerDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfcrawler) updateTableName(table string) *qeyKryWEwfcrawler {
	q.ALL = field.NewAsterisk(table)
	q.IP = field.NewBytes(table, "IP")
	q.PatternSig = field.NewBytes(table, "patternSig")
	q.Status = field.NewString(table, "status")
	q.LastUpdate = field.NewInt32(table, "lastUpdate")
	q.PTR = field.NewString(table, "PTR")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfcrawler) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfcrawler) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["IP"] = q.IP
	q.fieldMap["patternSig"] = q.PatternSig
	q.fieldMap["status"] = q.Status
	q.fieldMap["lastUpdate"] = q.LastUpdate
	q.fieldMap["PTR"] = q.PTR
}

func (q qeyKryWEwfcrawler) clone(db *gorm.DB) qeyKryWEwfcrawler {
	q.qeyKryWEwfcrawlerDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfcrawler) replaceDB(db *gorm.DB) qeyKryWEwfcrawler {
	q.qeyKryWEwfcrawlerDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfcrawlerDo struct{ gen.DO }

type IQeyKryWEwfcrawlerDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfcrawlerDo
	WithContext(ctx context.Context) IQeyKryWEwfcrawlerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfcrawlerDo
	WriteDB() IQeyKryWEwfcrawlerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfcrawlerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfcrawlerDo
	Not(conds ...gen.Condition) IQeyKryWEwfcrawlerDo
	Or(conds ...gen.Condition) IQeyKryWEwfcrawlerDo
	Select(conds ...field.Expr) IQeyKryWEwfcrawlerDo
	Where(conds ...gen.Condition) IQeyKryWEwfcrawlerDo
	Order(conds ...field.Expr) IQeyKryWEwfcrawlerDo
	Distinct(cols ...field.Expr) IQeyKryWEwfcrawlerDo
	Omit(cols ...field.Expr) IQeyKryWEwfcrawlerDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfcrawlerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfcrawlerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfcrawlerDo
	Group(cols ...field.Expr) IQeyKryWEwfcrawlerDo
	Having(conds ...gen.Condition) IQeyKryWEwfcrawlerDo
	Limit(limit int) IQeyKryWEwfcrawlerDo
	Offset(offset int) IQeyKryWEwfcrawlerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfcrawlerDo
	Unscoped() IQeyKryWEwfcrawlerDo
	Create(values ...*model.QeyKryWEwfcrawler) error
	CreateInBatches(values []*model.QeyKryWEwfcrawler, batchSize int) error
	Save(values ...*model.QeyKryWEwfcrawler) error
	First() (*model.QeyKryWEwfcrawler, error)
	Take() (*model.QeyKryWEwfcrawler, error)
	Last() (*model.QeyKryWEwfcrawler, error)
	Find() ([]*model.QeyKryWEwfcrawler, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfcrawler, err error)
	FindInBatches(result *[]*model.QeyKryWEwfcrawler, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfcrawler) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfcrawlerDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfcrawlerDo
	Joins(fields ...field.RelationField) IQeyKryWEwfcrawlerDo
	Preload(fields ...field.RelationField) IQeyKryWEwfcrawlerDo
	FirstOrInit() (*model.QeyKryWEwfcrawler, error)
	FirstOrCreate() (*model.QeyKryWEwfcrawler, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfcrawler, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfcrawlerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfcrawlerDo) Debug() IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfcrawlerDo) WithContext(ctx context.Context) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfcrawlerDo) ReadDB() IQeyKryWEwfcrawlerDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfcrawlerDo) WriteDB() IQeyKryWEwfcrawlerDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfcrawlerDo) Session(config *gorm.Session) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfcrawlerDo) Clauses(conds ...clause.Expression) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfcrawlerDo) Returning(value interface{}, columns ...string) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfcrawlerDo) Not(conds ...gen.Condition) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfcrawlerDo) Or(conds ...gen.Condition) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfcrawlerDo) Select(conds ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfcrawlerDo) Where(conds ...gen.Condition) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfcrawlerDo) Order(conds ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfcrawlerDo) Distinct(cols ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfcrawlerDo) Omit(cols ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfcrawlerDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfcrawlerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfcrawlerDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfcrawlerDo) Group(cols ...field.Expr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfcrawlerDo) Having(conds ...gen.Condition) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfcrawlerDo) Limit(limit int) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfcrawlerDo) Offset(offset int) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfcrawlerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfcrawlerDo) Unscoped() IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfcrawlerDo) Create(values ...*model.QeyKryWEwfcrawler) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfcrawlerDo) CreateInBatches(values []*model.QeyKryWEwfcrawler, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfcrawlerDo) Save(values ...*model.QeyKryWEwfcrawler) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfcrawlerDo) First() (*model.QeyKryWEwfcrawler, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfcrawler), nil
	}
}

func (q qeyKryWEwfcrawlerDo) Take() (*model.QeyKryWEwfcrawler, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfcrawler), nil
	}
}

func (q qeyKryWEwfcrawlerDo) Last() (*model.QeyKryWEwfcrawler, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfcrawler), nil
	}
}

func (q qeyKryWEwfcrawlerDo) Find() ([]*model.QeyKryWEwfcrawler, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfcrawler), err
}

func (q qeyKryWEwfcrawlerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfcrawler, err error) {
	buf := make([]*model.QeyKryWEwfcrawler, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfcrawlerDo) FindInBatches(result *[]*model.QeyKryWEwfcrawler, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfcrawlerDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfcrawlerDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfcrawlerDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfcrawlerDo) Joins(fields ...field.RelationField) IQeyKryWEwfcrawlerDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfcrawlerDo) Preload(fields ...field.RelationField) IQeyKryWEwfcrawlerDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfcrawlerDo) FirstOrInit() (*model.QeyKryWEwfcrawler, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfcrawler), nil
	}
}

func (q qeyKryWEwfcrawlerDo) FirstOrCreate() (*model.QeyKryWEwfcrawler, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfcrawler), nil
	}
}

func (q qeyKryWEwfcrawlerDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfcrawler, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfcrawlerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfcrawlerDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfcrawlerDo) Delete(models ...*model.QeyKryWEwfcrawler) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfcrawlerDo) withDO(do gen.Dao) *qeyKryWEwfcrawlerDo {
	q.DO = *do.(*gen.DO)
	return q
}
