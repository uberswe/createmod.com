// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEoption(db *gorm.DB, opts ...gen.DOOption) qeyKryWEoption {
	_qeyKryWEoption := qeyKryWEoption{}

	_qeyKryWEoption.qeyKryWEoptionDo.UseDB(db, opts...)
	_qeyKryWEoption.qeyKryWEoptionDo.UseModel(&model.QeyKryWEoption{})

	tableName := _qeyKryWEoption.qeyKryWEoptionDo.TableName()
	_qeyKryWEoption.ALL = field.NewAsterisk(tableName)
	_qeyKryWEoption.OptionID = field.NewInt64(tableName, "option_id")
	_qeyKryWEoption.OptionName = field.NewString(tableName, "option_name")
	_qeyKryWEoption.OptionValue = field.NewString(tableName, "option_value")
	_qeyKryWEoption.Autoload = field.NewString(tableName, "autoload")

	_qeyKryWEoption.fillFieldMap()

	return _qeyKryWEoption
}

type qeyKryWEoption struct {
	qeyKryWEoptionDo

	ALL         field.Asterisk
	OptionID    field.Int64
	OptionName  field.String
	OptionValue field.String
	Autoload    field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEoption) Table(newTableName string) *qeyKryWEoption {
	q.qeyKryWEoptionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEoption) As(alias string) *qeyKryWEoption {
	q.qeyKryWEoptionDo.DO = *(q.qeyKryWEoptionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEoption) updateTableName(table string) *qeyKryWEoption {
	q.ALL = field.NewAsterisk(table)
	q.OptionID = field.NewInt64(table, "option_id")
	q.OptionName = field.NewString(table, "option_name")
	q.OptionValue = field.NewString(table, "option_value")
	q.Autoload = field.NewString(table, "autoload")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEoption) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEoption) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["option_id"] = q.OptionID
	q.fieldMap["option_name"] = q.OptionName
	q.fieldMap["option_value"] = q.OptionValue
	q.fieldMap["autoload"] = q.Autoload
}

func (q qeyKryWEoption) clone(db *gorm.DB) qeyKryWEoption {
	q.qeyKryWEoptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEoption) replaceDB(db *gorm.DB) qeyKryWEoption {
	q.qeyKryWEoptionDo.ReplaceDB(db)
	return q
}

type qeyKryWEoptionDo struct{ gen.DO }

type IQeyKryWEoptionDo interface {
	gen.SubQuery
	Debug() IQeyKryWEoptionDo
	WithContext(ctx context.Context) IQeyKryWEoptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEoptionDo
	WriteDB() IQeyKryWEoptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEoptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEoptionDo
	Not(conds ...gen.Condition) IQeyKryWEoptionDo
	Or(conds ...gen.Condition) IQeyKryWEoptionDo
	Select(conds ...field.Expr) IQeyKryWEoptionDo
	Where(conds ...gen.Condition) IQeyKryWEoptionDo
	Order(conds ...field.Expr) IQeyKryWEoptionDo
	Distinct(cols ...field.Expr) IQeyKryWEoptionDo
	Omit(cols ...field.Expr) IQeyKryWEoptionDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEoptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEoptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEoptionDo
	Group(cols ...field.Expr) IQeyKryWEoptionDo
	Having(conds ...gen.Condition) IQeyKryWEoptionDo
	Limit(limit int) IQeyKryWEoptionDo
	Offset(offset int) IQeyKryWEoptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEoptionDo
	Unscoped() IQeyKryWEoptionDo
	Create(values ...*model.QeyKryWEoption) error
	CreateInBatches(values []*model.QeyKryWEoption, batchSize int) error
	Save(values ...*model.QeyKryWEoption) error
	First() (*model.QeyKryWEoption, error)
	Take() (*model.QeyKryWEoption, error)
	Last() (*model.QeyKryWEoption, error)
	Find() ([]*model.QeyKryWEoption, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEoption, err error)
	FindInBatches(result *[]*model.QeyKryWEoption, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEoption) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEoptionDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEoptionDo
	Joins(fields ...field.RelationField) IQeyKryWEoptionDo
	Preload(fields ...field.RelationField) IQeyKryWEoptionDo
	FirstOrInit() (*model.QeyKryWEoption, error)
	FirstOrCreate() (*model.QeyKryWEoption, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEoption, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEoptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEoptionDo) Debug() IQeyKryWEoptionDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEoptionDo) WithContext(ctx context.Context) IQeyKryWEoptionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEoptionDo) ReadDB() IQeyKryWEoptionDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEoptionDo) WriteDB() IQeyKryWEoptionDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEoptionDo) Session(config *gorm.Session) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEoptionDo) Clauses(conds ...clause.Expression) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEoptionDo) Returning(value interface{}, columns ...string) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEoptionDo) Not(conds ...gen.Condition) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEoptionDo) Or(conds ...gen.Condition) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEoptionDo) Select(conds ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEoptionDo) Where(conds ...gen.Condition) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEoptionDo) Order(conds ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEoptionDo) Distinct(cols ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEoptionDo) Omit(cols ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEoptionDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEoptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEoptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEoptionDo) Group(cols ...field.Expr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEoptionDo) Having(conds ...gen.Condition) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEoptionDo) Limit(limit int) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEoptionDo) Offset(offset int) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEoptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEoptionDo) Unscoped() IQeyKryWEoptionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEoptionDo) Create(values ...*model.QeyKryWEoption) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEoptionDo) CreateInBatches(values []*model.QeyKryWEoption, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEoptionDo) Save(values ...*model.QeyKryWEoption) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEoptionDo) First() (*model.QeyKryWEoption, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEoption), nil
	}
}

func (q qeyKryWEoptionDo) Take() (*model.QeyKryWEoption, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEoption), nil
	}
}

func (q qeyKryWEoptionDo) Last() (*model.QeyKryWEoption, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEoption), nil
	}
}

func (q qeyKryWEoptionDo) Find() ([]*model.QeyKryWEoption, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEoption), err
}

func (q qeyKryWEoptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEoption, err error) {
	buf := make([]*model.QeyKryWEoption, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEoptionDo) FindInBatches(result *[]*model.QeyKryWEoption, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEoptionDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEoptionDo) Assign(attrs ...field.AssignExpr) IQeyKryWEoptionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEoptionDo) Joins(fields ...field.RelationField) IQeyKryWEoptionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEoptionDo) Preload(fields ...field.RelationField) IQeyKryWEoptionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEoptionDo) FirstOrInit() (*model.QeyKryWEoption, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEoption), nil
	}
}

func (q qeyKryWEoptionDo) FirstOrCreate() (*model.QeyKryWEoption, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEoption), nil
	}
}

func (q qeyKryWEoptionDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEoption, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEoptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEoptionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEoptionDo) Delete(models ...*model.QeyKryWEoption) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEoptionDo) withDO(do gen.Dao) *qeyKryWEoptionDo {
	q.DO = *do.(*gen.DO)
	return q
}
