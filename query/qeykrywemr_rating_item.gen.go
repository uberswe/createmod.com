// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEmrRatingItem(db *gorm.DB, opts ...gen.DOOption) qeyKryWEmrRatingItem {
	_qeyKryWEmrRatingItem := qeyKryWEmrRatingItem{}

	_qeyKryWEmrRatingItem.qeyKryWEmrRatingItemDo.UseDB(db, opts...)
	_qeyKryWEmrRatingItem.qeyKryWEmrRatingItemDo.UseModel(&model.QeyKryWEmrRatingItem{})

	tableName := _qeyKryWEmrRatingItem.qeyKryWEmrRatingItemDo.TableName()
	_qeyKryWEmrRatingItem.ALL = field.NewAsterisk(tableName)
	_qeyKryWEmrRatingItem.RatingItemID = field.NewInt64(tableName, "rating_item_id")
	_qeyKryWEmrRatingItem.RatingID = field.NewInt64(tableName, "rating_id")
	_qeyKryWEmrRatingItem.Description = field.NewString(tableName, "description")
	_qeyKryWEmrRatingItem.DefaultOptionValue = field.NewInt32(tableName, "default_option_value")
	_qeyKryWEmrRatingItem.MaxOptionValue = field.NewInt32(tableName, "max_option_value")
	_qeyKryWEmrRatingItem.Required = field.NewBool(tableName, "required")
	_qeyKryWEmrRatingItem.Active = field.NewBool(tableName, "active")
	_qeyKryWEmrRatingItem.Weight = field.NewFloat64(tableName, "weight")
	_qeyKryWEmrRatingItem.Type = field.NewString(tableName, "type")

	_qeyKryWEmrRatingItem.fillFieldMap()

	return _qeyKryWEmrRatingItem
}

type qeyKryWEmrRatingItem struct {
	qeyKryWEmrRatingItemDo

	ALL                field.Asterisk
	RatingItemID       field.Int64
	RatingID           field.Int64
	Description        field.String
	DefaultOptionValue field.Int32
	MaxOptionValue     field.Int32
	Required           field.Bool
	Active             field.Bool
	Weight             field.Float64
	Type               field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEmrRatingItem) Table(newTableName string) *qeyKryWEmrRatingItem {
	q.qeyKryWEmrRatingItemDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEmrRatingItem) As(alias string) *qeyKryWEmrRatingItem {
	q.qeyKryWEmrRatingItemDo.DO = *(q.qeyKryWEmrRatingItemDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEmrRatingItem) updateTableName(table string) *qeyKryWEmrRatingItem {
	q.ALL = field.NewAsterisk(table)
	q.RatingItemID = field.NewInt64(table, "rating_item_id")
	q.RatingID = field.NewInt64(table, "rating_id")
	q.Description = field.NewString(table, "description")
	q.DefaultOptionValue = field.NewInt32(table, "default_option_value")
	q.MaxOptionValue = field.NewInt32(table, "max_option_value")
	q.Required = field.NewBool(table, "required")
	q.Active = field.NewBool(table, "active")
	q.Weight = field.NewFloat64(table, "weight")
	q.Type = field.NewString(table, "type")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEmrRatingItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEmrRatingItem) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["rating_item_id"] = q.RatingItemID
	q.fieldMap["rating_id"] = q.RatingID
	q.fieldMap["description"] = q.Description
	q.fieldMap["default_option_value"] = q.DefaultOptionValue
	q.fieldMap["max_option_value"] = q.MaxOptionValue
	q.fieldMap["required"] = q.Required
	q.fieldMap["active"] = q.Active
	q.fieldMap["weight"] = q.Weight
	q.fieldMap["type"] = q.Type
}

func (q qeyKryWEmrRatingItem) clone(db *gorm.DB) qeyKryWEmrRatingItem {
	q.qeyKryWEmrRatingItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEmrRatingItem) replaceDB(db *gorm.DB) qeyKryWEmrRatingItem {
	q.qeyKryWEmrRatingItemDo.ReplaceDB(db)
	return q
}

type qeyKryWEmrRatingItemDo struct{ gen.DO }

type IQeyKryWEmrRatingItemDo interface {
	gen.SubQuery
	Debug() IQeyKryWEmrRatingItemDo
	WithContext(ctx context.Context) IQeyKryWEmrRatingItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEmrRatingItemDo
	WriteDB() IQeyKryWEmrRatingItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEmrRatingItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEmrRatingItemDo
	Not(conds ...gen.Condition) IQeyKryWEmrRatingItemDo
	Or(conds ...gen.Condition) IQeyKryWEmrRatingItemDo
	Select(conds ...field.Expr) IQeyKryWEmrRatingItemDo
	Where(conds ...gen.Condition) IQeyKryWEmrRatingItemDo
	Order(conds ...field.Expr) IQeyKryWEmrRatingItemDo
	Distinct(cols ...field.Expr) IQeyKryWEmrRatingItemDo
	Omit(cols ...field.Expr) IQeyKryWEmrRatingItemDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemDo
	Group(cols ...field.Expr) IQeyKryWEmrRatingItemDo
	Having(conds ...gen.Condition) IQeyKryWEmrRatingItemDo
	Limit(limit int) IQeyKryWEmrRatingItemDo
	Offset(offset int) IQeyKryWEmrRatingItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingItemDo
	Unscoped() IQeyKryWEmrRatingItemDo
	Create(values ...*model.QeyKryWEmrRatingItem) error
	CreateInBatches(values []*model.QeyKryWEmrRatingItem, batchSize int) error
	Save(values ...*model.QeyKryWEmrRatingItem) error
	First() (*model.QeyKryWEmrRatingItem, error)
	Take() (*model.QeyKryWEmrRatingItem, error)
	Last() (*model.QeyKryWEmrRatingItem, error)
	Find() ([]*model.QeyKryWEmrRatingItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingItem, err error)
	FindInBatches(result *[]*model.QeyKryWEmrRatingItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEmrRatingItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemDo
	Joins(fields ...field.RelationField) IQeyKryWEmrRatingItemDo
	Preload(fields ...field.RelationField) IQeyKryWEmrRatingItemDo
	FirstOrInit() (*model.QeyKryWEmrRatingItem, error)
	FirstOrCreate() (*model.QeyKryWEmrRatingItem, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEmrRatingItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEmrRatingItemDo) Debug() IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEmrRatingItemDo) WithContext(ctx context.Context) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEmrRatingItemDo) ReadDB() IQeyKryWEmrRatingItemDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEmrRatingItemDo) WriteDB() IQeyKryWEmrRatingItemDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEmrRatingItemDo) Session(config *gorm.Session) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEmrRatingItemDo) Clauses(conds ...clause.Expression) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEmrRatingItemDo) Returning(value interface{}, columns ...string) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEmrRatingItemDo) Not(conds ...gen.Condition) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEmrRatingItemDo) Or(conds ...gen.Condition) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEmrRatingItemDo) Select(conds ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEmrRatingItemDo) Where(conds ...gen.Condition) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEmrRatingItemDo) Order(conds ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEmrRatingItemDo) Distinct(cols ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEmrRatingItemDo) Omit(cols ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEmrRatingItemDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEmrRatingItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEmrRatingItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEmrRatingItemDo) Group(cols ...field.Expr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEmrRatingItemDo) Having(conds ...gen.Condition) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEmrRatingItemDo) Limit(limit int) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEmrRatingItemDo) Offset(offset int) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEmrRatingItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEmrRatingItemDo) Unscoped() IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEmrRatingItemDo) Create(values ...*model.QeyKryWEmrRatingItem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEmrRatingItemDo) CreateInBatches(values []*model.QeyKryWEmrRatingItem, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEmrRatingItemDo) Save(values ...*model.QeyKryWEmrRatingItem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEmrRatingItemDo) First() (*model.QeyKryWEmrRatingItem, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItem), nil
	}
}

func (q qeyKryWEmrRatingItemDo) Take() (*model.QeyKryWEmrRatingItem, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItem), nil
	}
}

func (q qeyKryWEmrRatingItemDo) Last() (*model.QeyKryWEmrRatingItem, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItem), nil
	}
}

func (q qeyKryWEmrRatingItemDo) Find() ([]*model.QeyKryWEmrRatingItem, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEmrRatingItem), err
}

func (q qeyKryWEmrRatingItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingItem, err error) {
	buf := make([]*model.QeyKryWEmrRatingItem, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEmrRatingItemDo) FindInBatches(result *[]*model.QeyKryWEmrRatingItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEmrRatingItemDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEmrRatingItemDo) Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEmrRatingItemDo) Joins(fields ...field.RelationField) IQeyKryWEmrRatingItemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingItemDo) Preload(fields ...field.RelationField) IQeyKryWEmrRatingItemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingItemDo) FirstOrInit() (*model.QeyKryWEmrRatingItem, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItem), nil
	}
}

func (q qeyKryWEmrRatingItemDo) FirstOrCreate() (*model.QeyKryWEmrRatingItem, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItem), nil
	}
}

func (q qeyKryWEmrRatingItemDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingItem, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEmrRatingItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEmrRatingItemDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEmrRatingItemDo) Delete(models ...*model.QeyKryWEmrRatingItem) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEmrRatingItemDo) withDO(do gen.Dao) *qeyKryWEmrRatingItemDo {
	q.DO = *do.(*gen.DO)
	return q
}
