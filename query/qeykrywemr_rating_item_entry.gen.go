// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEmrRatingItemEntry(db *gorm.DB, opts ...gen.DOOption) qeyKryWEmrRatingItemEntry {
	_qeyKryWEmrRatingItemEntry := qeyKryWEmrRatingItemEntry{}

	_qeyKryWEmrRatingItemEntry.qeyKryWEmrRatingItemEntryDo.UseDB(db, opts...)
	_qeyKryWEmrRatingItemEntry.qeyKryWEmrRatingItemEntryDo.UseModel(&model.QeyKryWEmrRatingItemEntry{})

	tableName := _qeyKryWEmrRatingItemEntry.qeyKryWEmrRatingItemEntryDo.TableName()
	_qeyKryWEmrRatingItemEntry.ALL = field.NewAsterisk(tableName)
	_qeyKryWEmrRatingItemEntry.RatingItemEntryID = field.NewInt64(tableName, "rating_item_entry_id")
	_qeyKryWEmrRatingItemEntry.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEmrRatingItemEntry.EntryDate = field.NewTime(tableName, "entry_date")
	_qeyKryWEmrRatingItemEntry.UserID = field.NewInt64(tableName, "user_id")

	_qeyKryWEmrRatingItemEntry.fillFieldMap()

	return _qeyKryWEmrRatingItemEntry
}

type qeyKryWEmrRatingItemEntry struct {
	qeyKryWEmrRatingItemEntryDo

	ALL               field.Asterisk
	RatingItemEntryID field.Int64
	PostID            field.Int64
	EntryDate         field.Time
	UserID            field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEmrRatingItemEntry) Table(newTableName string) *qeyKryWEmrRatingItemEntry {
	q.qeyKryWEmrRatingItemEntryDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEmrRatingItemEntry) As(alias string) *qeyKryWEmrRatingItemEntry {
	q.qeyKryWEmrRatingItemEntryDo.DO = *(q.qeyKryWEmrRatingItemEntryDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEmrRatingItemEntry) updateTableName(table string) *qeyKryWEmrRatingItemEntry {
	q.ALL = field.NewAsterisk(table)
	q.RatingItemEntryID = field.NewInt64(table, "rating_item_entry_id")
	q.PostID = field.NewInt64(table, "post_id")
	q.EntryDate = field.NewTime(table, "entry_date")
	q.UserID = field.NewInt64(table, "user_id")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEmrRatingItemEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEmrRatingItemEntry) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["rating_item_entry_id"] = q.RatingItemEntryID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["entry_date"] = q.EntryDate
	q.fieldMap["user_id"] = q.UserID
}

func (q qeyKryWEmrRatingItemEntry) clone(db *gorm.DB) qeyKryWEmrRatingItemEntry {
	q.qeyKryWEmrRatingItemEntryDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEmrRatingItemEntry) replaceDB(db *gorm.DB) qeyKryWEmrRatingItemEntry {
	q.qeyKryWEmrRatingItemEntryDo.ReplaceDB(db)
	return q
}

type qeyKryWEmrRatingItemEntryDo struct{ gen.DO }

type IQeyKryWEmrRatingItemEntryDo interface {
	gen.SubQuery
	Debug() IQeyKryWEmrRatingItemEntryDo
	WithContext(ctx context.Context) IQeyKryWEmrRatingItemEntryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEmrRatingItemEntryDo
	WriteDB() IQeyKryWEmrRatingItemEntryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEmrRatingItemEntryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEmrRatingItemEntryDo
	Not(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo
	Or(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo
	Select(conds ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	Where(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo
	Order(conds ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	Distinct(cols ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	Omit(cols ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	Group(cols ...field.Expr) IQeyKryWEmrRatingItemEntryDo
	Having(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo
	Limit(limit int) IQeyKryWEmrRatingItemEntryDo
	Offset(offset int) IQeyKryWEmrRatingItemEntryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingItemEntryDo
	Unscoped() IQeyKryWEmrRatingItemEntryDo
	Create(values ...*model.QeyKryWEmrRatingItemEntry) error
	CreateInBatches(values []*model.QeyKryWEmrRatingItemEntry, batchSize int) error
	Save(values ...*model.QeyKryWEmrRatingItemEntry) error
	First() (*model.QeyKryWEmrRatingItemEntry, error)
	Take() (*model.QeyKryWEmrRatingItemEntry, error)
	Last() (*model.QeyKryWEmrRatingItemEntry, error)
	Find() ([]*model.QeyKryWEmrRatingItemEntry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingItemEntry, err error)
	FindInBatches(result *[]*model.QeyKryWEmrRatingItemEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEmrRatingItemEntry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryDo
	Joins(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryDo
	Preload(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryDo
	FirstOrInit() (*model.QeyKryWEmrRatingItemEntry, error)
	FirstOrCreate() (*model.QeyKryWEmrRatingItemEntry, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingItemEntry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEmrRatingItemEntryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEmrRatingItemEntryDo) Debug() IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEmrRatingItemEntryDo) WithContext(ctx context.Context) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEmrRatingItemEntryDo) ReadDB() IQeyKryWEmrRatingItemEntryDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEmrRatingItemEntryDo) WriteDB() IQeyKryWEmrRatingItemEntryDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEmrRatingItemEntryDo) Session(config *gorm.Session) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEmrRatingItemEntryDo) Clauses(conds ...clause.Expression) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Returning(value interface{}, columns ...string) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEmrRatingItemEntryDo) Not(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Or(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Select(conds ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Where(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Order(conds ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Distinct(cols ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEmrRatingItemEntryDo) Omit(cols ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEmrRatingItemEntryDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEmrRatingItemEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEmrRatingItemEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEmrRatingItemEntryDo) Group(cols ...field.Expr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEmrRatingItemEntryDo) Having(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEmrRatingItemEntryDo) Limit(limit int) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEmrRatingItemEntryDo) Offset(offset int) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEmrRatingItemEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEmrRatingItemEntryDo) Unscoped() IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEmrRatingItemEntryDo) Create(values ...*model.QeyKryWEmrRatingItemEntry) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEmrRatingItemEntryDo) CreateInBatches(values []*model.QeyKryWEmrRatingItemEntry, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEmrRatingItemEntryDo) Save(values ...*model.QeyKryWEmrRatingItemEntry) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEmrRatingItemEntryDo) First() (*model.QeyKryWEmrRatingItemEntry, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntry), nil
	}
}

func (q qeyKryWEmrRatingItemEntryDo) Take() (*model.QeyKryWEmrRatingItemEntry, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntry), nil
	}
}

func (q qeyKryWEmrRatingItemEntryDo) Last() (*model.QeyKryWEmrRatingItemEntry, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntry), nil
	}
}

func (q qeyKryWEmrRatingItemEntryDo) Find() ([]*model.QeyKryWEmrRatingItemEntry, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEmrRatingItemEntry), err
}

func (q qeyKryWEmrRatingItemEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingItemEntry, err error) {
	buf := make([]*model.QeyKryWEmrRatingItemEntry, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEmrRatingItemEntryDo) FindInBatches(result *[]*model.QeyKryWEmrRatingItemEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEmrRatingItemEntryDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEmrRatingItemEntryDo) Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEmrRatingItemEntryDo) Joins(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingItemEntryDo) Preload(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingItemEntryDo) FirstOrInit() (*model.QeyKryWEmrRatingItemEntry, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntry), nil
	}
}

func (q qeyKryWEmrRatingItemEntryDo) FirstOrCreate() (*model.QeyKryWEmrRatingItemEntry, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntry), nil
	}
}

func (q qeyKryWEmrRatingItemEntryDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingItemEntry, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEmrRatingItemEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEmrRatingItemEntryDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEmrRatingItemEntryDo) Delete(models ...*model.QeyKryWEmrRatingItemEntry) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEmrRatingItemEntryDo) withDO(do gen.Dao) *qeyKryWEmrRatingItemEntryDo {
	q.DO = *do.(*gen.DO)
	return q
}
