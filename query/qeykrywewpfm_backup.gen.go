// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwpfmBackup(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwpfmBackup {
	_qeyKryWEwpfmBackup := qeyKryWEwpfmBackup{}

	_qeyKryWEwpfmBackup.qeyKryWEwpfmBackupDo.UseDB(db, opts...)
	_qeyKryWEwpfmBackup.qeyKryWEwpfmBackupDo.UseModel(&model.QeyKryWEwpfmBackup{})

	tableName := _qeyKryWEwpfmBackup.qeyKryWEwpfmBackupDo.TableName()
	_qeyKryWEwpfmBackup.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwpfmBackup.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwpfmBackup.BackupName = field.NewString(tableName, "backup_name")
	_qeyKryWEwpfmBackup.BackupDate = field.NewString(tableName, "backup_date")

	_qeyKryWEwpfmBackup.fillFieldMap()

	return _qeyKryWEwpfmBackup
}

type qeyKryWEwpfmBackup struct {
	qeyKryWEwpfmBackupDo

	ALL        field.Asterisk
	ID         field.Int32
	BackupName field.String
	BackupDate field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwpfmBackup) Table(newTableName string) *qeyKryWEwpfmBackup {
	q.qeyKryWEwpfmBackupDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwpfmBackup) As(alias string) *qeyKryWEwpfmBackup {
	q.qeyKryWEwpfmBackupDo.DO = *(q.qeyKryWEwpfmBackupDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwpfmBackup) updateTableName(table string) *qeyKryWEwpfmBackup {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.BackupName = field.NewString(table, "backup_name")
	q.BackupDate = field.NewString(table, "backup_date")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwpfmBackup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwpfmBackup) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["id"] = q.ID
	q.fieldMap["backup_name"] = q.BackupName
	q.fieldMap["backup_date"] = q.BackupDate
}

func (q qeyKryWEwpfmBackup) clone(db *gorm.DB) qeyKryWEwpfmBackup {
	q.qeyKryWEwpfmBackupDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwpfmBackup) replaceDB(db *gorm.DB) qeyKryWEwpfmBackup {
	q.qeyKryWEwpfmBackupDo.ReplaceDB(db)
	return q
}

type qeyKryWEwpfmBackupDo struct{ gen.DO }

type IQeyKryWEwpfmBackupDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwpfmBackupDo
	WithContext(ctx context.Context) IQeyKryWEwpfmBackupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwpfmBackupDo
	WriteDB() IQeyKryWEwpfmBackupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwpfmBackupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwpfmBackupDo
	Not(conds ...gen.Condition) IQeyKryWEwpfmBackupDo
	Or(conds ...gen.Condition) IQeyKryWEwpfmBackupDo
	Select(conds ...field.Expr) IQeyKryWEwpfmBackupDo
	Where(conds ...gen.Condition) IQeyKryWEwpfmBackupDo
	Order(conds ...field.Expr) IQeyKryWEwpfmBackupDo
	Distinct(cols ...field.Expr) IQeyKryWEwpfmBackupDo
	Omit(cols ...field.Expr) IQeyKryWEwpfmBackupDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpfmBackupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpfmBackupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpfmBackupDo
	Group(cols ...field.Expr) IQeyKryWEwpfmBackupDo
	Having(conds ...gen.Condition) IQeyKryWEwpfmBackupDo
	Limit(limit int) IQeyKryWEwpfmBackupDo
	Offset(offset int) IQeyKryWEwpfmBackupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpfmBackupDo
	Unscoped() IQeyKryWEwpfmBackupDo
	Create(values ...*model.QeyKryWEwpfmBackup) error
	CreateInBatches(values []*model.QeyKryWEwpfmBackup, batchSize int) error
	Save(values ...*model.QeyKryWEwpfmBackup) error
	First() (*model.QeyKryWEwpfmBackup, error)
	Take() (*model.QeyKryWEwpfmBackup, error)
	Last() (*model.QeyKryWEwpfmBackup, error)
	Find() ([]*model.QeyKryWEwpfmBackup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpfmBackup, err error)
	FindInBatches(result *[]*model.QeyKryWEwpfmBackup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwpfmBackup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwpfmBackupDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwpfmBackupDo
	Joins(fields ...field.RelationField) IQeyKryWEwpfmBackupDo
	Preload(fields ...field.RelationField) IQeyKryWEwpfmBackupDo
	FirstOrInit() (*model.QeyKryWEwpfmBackup, error)
	FirstOrCreate() (*model.QeyKryWEwpfmBackup, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwpfmBackup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwpfmBackupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwpfmBackupDo) Debug() IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwpfmBackupDo) WithContext(ctx context.Context) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwpfmBackupDo) ReadDB() IQeyKryWEwpfmBackupDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwpfmBackupDo) WriteDB() IQeyKryWEwpfmBackupDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwpfmBackupDo) Session(config *gorm.Session) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwpfmBackupDo) Clauses(conds ...clause.Expression) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwpfmBackupDo) Returning(value interface{}, columns ...string) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwpfmBackupDo) Not(conds ...gen.Condition) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwpfmBackupDo) Or(conds ...gen.Condition) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwpfmBackupDo) Select(conds ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwpfmBackupDo) Where(conds ...gen.Condition) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwpfmBackupDo) Order(conds ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwpfmBackupDo) Distinct(cols ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwpfmBackupDo) Omit(cols ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwpfmBackupDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwpfmBackupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwpfmBackupDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwpfmBackupDo) Group(cols ...field.Expr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwpfmBackupDo) Having(conds ...gen.Condition) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwpfmBackupDo) Limit(limit int) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwpfmBackupDo) Offset(offset int) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwpfmBackupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwpfmBackupDo) Unscoped() IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwpfmBackupDo) Create(values ...*model.QeyKryWEwpfmBackup) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwpfmBackupDo) CreateInBatches(values []*model.QeyKryWEwpfmBackup, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwpfmBackupDo) Save(values ...*model.QeyKryWEwpfmBackup) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwpfmBackupDo) First() (*model.QeyKryWEwpfmBackup, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpfmBackup), nil
	}
}

func (q qeyKryWEwpfmBackupDo) Take() (*model.QeyKryWEwpfmBackup, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpfmBackup), nil
	}
}

func (q qeyKryWEwpfmBackupDo) Last() (*model.QeyKryWEwpfmBackup, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpfmBackup), nil
	}
}

func (q qeyKryWEwpfmBackupDo) Find() ([]*model.QeyKryWEwpfmBackup, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwpfmBackup), err
}

func (q qeyKryWEwpfmBackupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpfmBackup, err error) {
	buf := make([]*model.QeyKryWEwpfmBackup, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwpfmBackupDo) FindInBatches(result *[]*model.QeyKryWEwpfmBackup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwpfmBackupDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwpfmBackupDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwpfmBackupDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwpfmBackupDo) Joins(fields ...field.RelationField) IQeyKryWEwpfmBackupDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwpfmBackupDo) Preload(fields ...field.RelationField) IQeyKryWEwpfmBackupDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwpfmBackupDo) FirstOrInit() (*model.QeyKryWEwpfmBackup, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpfmBackup), nil
	}
}

func (q qeyKryWEwpfmBackupDo) FirstOrCreate() (*model.QeyKryWEwpfmBackup, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpfmBackup), nil
	}
}

func (q qeyKryWEwpfmBackupDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwpfmBackup, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwpfmBackupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwpfmBackupDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwpfmBackupDo) Delete(models ...*model.QeyKryWEwpfmBackup) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwpfmBackupDo) withDO(do gen.Dao) *qeyKryWEwpfmBackupDo {
	q.DO = *do.(*gen.DO)
	return q
}
