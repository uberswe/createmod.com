// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfnotification(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfnotification {
	_qeyKryWEwfnotification := qeyKryWEwfnotification{}

	_qeyKryWEwfnotification.qeyKryWEwfnotificationDo.UseDB(db, opts...)
	_qeyKryWEwfnotification.qeyKryWEwfnotificationDo.UseModel(&model.QeyKryWEwfnotification{})

	tableName := _qeyKryWEwfnotification.qeyKryWEwfnotificationDo.TableName()
	_qeyKryWEwfnotification.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfnotification.ID = field.NewString(tableName, "id")
	_qeyKryWEwfnotification.New = field.NewInt32(tableName, "new")
	_qeyKryWEwfnotification.Category = field.NewString(tableName, "category")
	_qeyKryWEwfnotification.Priority = field.NewInt32(tableName, "priority")
	_qeyKryWEwfnotification.Ctime = field.NewInt32(tableName, "ctime")
	_qeyKryWEwfnotification.HTML = field.NewString(tableName, "html")
	_qeyKryWEwfnotification.Links = field.NewString(tableName, "links")

	_qeyKryWEwfnotification.fillFieldMap()

	return _qeyKryWEwfnotification
}

type qeyKryWEwfnotification struct {
	qeyKryWEwfnotificationDo

	ALL      field.Asterisk
	ID       field.String
	New      field.Int32
	Category field.String
	Priority field.Int32
	Ctime    field.Int32
	HTML     field.String
	Links    field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfnotification) Table(newTableName string) *qeyKryWEwfnotification {
	q.qeyKryWEwfnotificationDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfnotification) As(alias string) *qeyKryWEwfnotification {
	q.qeyKryWEwfnotificationDo.DO = *(q.qeyKryWEwfnotificationDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfnotification) updateTableName(table string) *qeyKryWEwfnotification {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewString(table, "id")
	q.New = field.NewInt32(table, "new")
	q.Category = field.NewString(table, "category")
	q.Priority = field.NewInt32(table, "priority")
	q.Ctime = field.NewInt32(table, "ctime")
	q.HTML = field.NewString(table, "html")
	q.Links = field.NewString(table, "links")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfnotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfnotification) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["new"] = q.New
	q.fieldMap["category"] = q.Category
	q.fieldMap["priority"] = q.Priority
	q.fieldMap["ctime"] = q.Ctime
	q.fieldMap["html"] = q.HTML
	q.fieldMap["links"] = q.Links
}

func (q qeyKryWEwfnotification) clone(db *gorm.DB) qeyKryWEwfnotification {
	q.qeyKryWEwfnotificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfnotification) replaceDB(db *gorm.DB) qeyKryWEwfnotification {
	q.qeyKryWEwfnotificationDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfnotificationDo struct{ gen.DO }

type IQeyKryWEwfnotificationDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfnotificationDo
	WithContext(ctx context.Context) IQeyKryWEwfnotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfnotificationDo
	WriteDB() IQeyKryWEwfnotificationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfnotificationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfnotificationDo
	Not(conds ...gen.Condition) IQeyKryWEwfnotificationDo
	Or(conds ...gen.Condition) IQeyKryWEwfnotificationDo
	Select(conds ...field.Expr) IQeyKryWEwfnotificationDo
	Where(conds ...gen.Condition) IQeyKryWEwfnotificationDo
	Order(conds ...field.Expr) IQeyKryWEwfnotificationDo
	Distinct(cols ...field.Expr) IQeyKryWEwfnotificationDo
	Omit(cols ...field.Expr) IQeyKryWEwfnotificationDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfnotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfnotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfnotificationDo
	Group(cols ...field.Expr) IQeyKryWEwfnotificationDo
	Having(conds ...gen.Condition) IQeyKryWEwfnotificationDo
	Limit(limit int) IQeyKryWEwfnotificationDo
	Offset(offset int) IQeyKryWEwfnotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfnotificationDo
	Unscoped() IQeyKryWEwfnotificationDo
	Create(values ...*model.QeyKryWEwfnotification) error
	CreateInBatches(values []*model.QeyKryWEwfnotification, batchSize int) error
	Save(values ...*model.QeyKryWEwfnotification) error
	First() (*model.QeyKryWEwfnotification, error)
	Take() (*model.QeyKryWEwfnotification, error)
	Last() (*model.QeyKryWEwfnotification, error)
	Find() ([]*model.QeyKryWEwfnotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfnotification, err error)
	FindInBatches(result *[]*model.QeyKryWEwfnotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfnotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfnotificationDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfnotificationDo
	Joins(fields ...field.RelationField) IQeyKryWEwfnotificationDo
	Preload(fields ...field.RelationField) IQeyKryWEwfnotificationDo
	FirstOrInit() (*model.QeyKryWEwfnotification, error)
	FirstOrCreate() (*model.QeyKryWEwfnotification, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfnotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfnotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfnotificationDo) Debug() IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfnotificationDo) WithContext(ctx context.Context) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfnotificationDo) ReadDB() IQeyKryWEwfnotificationDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfnotificationDo) WriteDB() IQeyKryWEwfnotificationDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfnotificationDo) Session(config *gorm.Session) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfnotificationDo) Clauses(conds ...clause.Expression) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfnotificationDo) Returning(value interface{}, columns ...string) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfnotificationDo) Not(conds ...gen.Condition) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfnotificationDo) Or(conds ...gen.Condition) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfnotificationDo) Select(conds ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfnotificationDo) Where(conds ...gen.Condition) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfnotificationDo) Order(conds ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfnotificationDo) Distinct(cols ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfnotificationDo) Omit(cols ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfnotificationDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfnotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfnotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfnotificationDo) Group(cols ...field.Expr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfnotificationDo) Having(conds ...gen.Condition) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfnotificationDo) Limit(limit int) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfnotificationDo) Offset(offset int) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfnotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfnotificationDo) Unscoped() IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfnotificationDo) Create(values ...*model.QeyKryWEwfnotification) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfnotificationDo) CreateInBatches(values []*model.QeyKryWEwfnotification, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfnotificationDo) Save(values ...*model.QeyKryWEwfnotification) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfnotificationDo) First() (*model.QeyKryWEwfnotification, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfnotification), nil
	}
}

func (q qeyKryWEwfnotificationDo) Take() (*model.QeyKryWEwfnotification, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfnotification), nil
	}
}

func (q qeyKryWEwfnotificationDo) Last() (*model.QeyKryWEwfnotification, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfnotification), nil
	}
}

func (q qeyKryWEwfnotificationDo) Find() ([]*model.QeyKryWEwfnotification, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfnotification), err
}

func (q qeyKryWEwfnotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfnotification, err error) {
	buf := make([]*model.QeyKryWEwfnotification, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfnotificationDo) FindInBatches(result *[]*model.QeyKryWEwfnotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfnotificationDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfnotificationDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfnotificationDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfnotificationDo) Joins(fields ...field.RelationField) IQeyKryWEwfnotificationDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfnotificationDo) Preload(fields ...field.RelationField) IQeyKryWEwfnotificationDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfnotificationDo) FirstOrInit() (*model.QeyKryWEwfnotification, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfnotification), nil
	}
}

func (q qeyKryWEwfnotificationDo) FirstOrCreate() (*model.QeyKryWEwfnotification, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfnotification), nil
	}
}

func (q qeyKryWEwfnotificationDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfnotification, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfnotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfnotificationDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfnotificationDo) Delete(models ...*model.QeyKryWEwfnotification) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfnotificationDo) withDO(do gen.Dao) *qeyKryWEwfnotificationDo {
	q.DO = *do.(*gen.DO)
	return q
}
