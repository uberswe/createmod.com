// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwcFollowUser(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwcFollowUser {
	_qeyKryWEwcFollowUser := qeyKryWEwcFollowUser{}

	_qeyKryWEwcFollowUser.qeyKryWEwcFollowUserDo.UseDB(db, opts...)
	_qeyKryWEwcFollowUser.qeyKryWEwcFollowUserDo.UseModel(&model.QeyKryWEwcFollowUser{})

	tableName := _qeyKryWEwcFollowUser.qeyKryWEwcFollowUserDo.TableName()
	_qeyKryWEwcFollowUser.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwcFollowUser.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwcFollowUser.PostID = field.NewInt32(tableName, "post_id")
	_qeyKryWEwcFollowUser.UserID = field.NewInt32(tableName, "user_id")
	_qeyKryWEwcFollowUser.UserEmail = field.NewString(tableName, "user_email")
	_qeyKryWEwcFollowUser.UserName = field.NewString(tableName, "user_name")
	_qeyKryWEwcFollowUser.FollowerID = field.NewInt32(tableName, "follower_id")
	_qeyKryWEwcFollowUser.FollowerEmail = field.NewString(tableName, "follower_email")
	_qeyKryWEwcFollowUser.FollowerName = field.NewString(tableName, "follower_name")
	_qeyKryWEwcFollowUser.ActivationKey = field.NewString(tableName, "activation_key")
	_qeyKryWEwcFollowUser.Confirm = field.NewBool(tableName, "confirm")
	_qeyKryWEwcFollowUser.FollowTimestamp = field.NewInt32(tableName, "follow_timestamp")
	_qeyKryWEwcFollowUser.FollowDate = field.NewTime(tableName, "follow_date")

	_qeyKryWEwcFollowUser.fillFieldMap()

	return _qeyKryWEwcFollowUser
}

type qeyKryWEwcFollowUser struct {
	qeyKryWEwcFollowUserDo

	ALL             field.Asterisk
	ID              field.Int32
	PostID          field.Int32
	UserID          field.Int32
	UserEmail       field.String
	UserName        field.String
	FollowerID      field.Int32
	FollowerEmail   field.String
	FollowerName    field.String
	ActivationKey   field.String
	Confirm         field.Bool
	FollowTimestamp field.Int32
	FollowDate      field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwcFollowUser) Table(newTableName string) *qeyKryWEwcFollowUser {
	q.qeyKryWEwcFollowUserDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwcFollowUser) As(alias string) *qeyKryWEwcFollowUser {
	q.qeyKryWEwcFollowUserDo.DO = *(q.qeyKryWEwcFollowUserDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwcFollowUser) updateTableName(table string) *qeyKryWEwcFollowUser {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.PostID = field.NewInt32(table, "post_id")
	q.UserID = field.NewInt32(table, "user_id")
	q.UserEmail = field.NewString(table, "user_email")
	q.UserName = field.NewString(table, "user_name")
	q.FollowerID = field.NewInt32(table, "follower_id")
	q.FollowerEmail = field.NewString(table, "follower_email")
	q.FollowerName = field.NewString(table, "follower_name")
	q.ActivationKey = field.NewString(table, "activation_key")
	q.Confirm = field.NewBool(table, "confirm")
	q.FollowTimestamp = field.NewInt32(table, "follow_timestamp")
	q.FollowDate = field.NewTime(table, "follow_date")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwcFollowUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwcFollowUser) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 12)
	q.fieldMap["id"] = q.ID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["user_email"] = q.UserEmail
	q.fieldMap["user_name"] = q.UserName
	q.fieldMap["follower_id"] = q.FollowerID
	q.fieldMap["follower_email"] = q.FollowerEmail
	q.fieldMap["follower_name"] = q.FollowerName
	q.fieldMap["activation_key"] = q.ActivationKey
	q.fieldMap["confirm"] = q.Confirm
	q.fieldMap["follow_timestamp"] = q.FollowTimestamp
	q.fieldMap["follow_date"] = q.FollowDate
}

func (q qeyKryWEwcFollowUser) clone(db *gorm.DB) qeyKryWEwcFollowUser {
	q.qeyKryWEwcFollowUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwcFollowUser) replaceDB(db *gorm.DB) qeyKryWEwcFollowUser {
	q.qeyKryWEwcFollowUserDo.ReplaceDB(db)
	return q
}

type qeyKryWEwcFollowUserDo struct{ gen.DO }

type IQeyKryWEwcFollowUserDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwcFollowUserDo
	WithContext(ctx context.Context) IQeyKryWEwcFollowUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwcFollowUserDo
	WriteDB() IQeyKryWEwcFollowUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwcFollowUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwcFollowUserDo
	Not(conds ...gen.Condition) IQeyKryWEwcFollowUserDo
	Or(conds ...gen.Condition) IQeyKryWEwcFollowUserDo
	Select(conds ...field.Expr) IQeyKryWEwcFollowUserDo
	Where(conds ...gen.Condition) IQeyKryWEwcFollowUserDo
	Order(conds ...field.Expr) IQeyKryWEwcFollowUserDo
	Distinct(cols ...field.Expr) IQeyKryWEwcFollowUserDo
	Omit(cols ...field.Expr) IQeyKryWEwcFollowUserDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFollowUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFollowUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFollowUserDo
	Group(cols ...field.Expr) IQeyKryWEwcFollowUserDo
	Having(conds ...gen.Condition) IQeyKryWEwcFollowUserDo
	Limit(limit int) IQeyKryWEwcFollowUserDo
	Offset(offset int) IQeyKryWEwcFollowUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcFollowUserDo
	Unscoped() IQeyKryWEwcFollowUserDo
	Create(values ...*model.QeyKryWEwcFollowUser) error
	CreateInBatches(values []*model.QeyKryWEwcFollowUser, batchSize int) error
	Save(values ...*model.QeyKryWEwcFollowUser) error
	First() (*model.QeyKryWEwcFollowUser, error)
	Take() (*model.QeyKryWEwcFollowUser, error)
	Last() (*model.QeyKryWEwcFollowUser, error)
	Find() ([]*model.QeyKryWEwcFollowUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcFollowUser, err error)
	FindInBatches(result *[]*model.QeyKryWEwcFollowUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwcFollowUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwcFollowUserDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwcFollowUserDo
	Joins(fields ...field.RelationField) IQeyKryWEwcFollowUserDo
	Preload(fields ...field.RelationField) IQeyKryWEwcFollowUserDo
	FirstOrInit() (*model.QeyKryWEwcFollowUser, error)
	FirstOrCreate() (*model.QeyKryWEwcFollowUser, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwcFollowUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwcFollowUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwcFollowUserDo) Debug() IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwcFollowUserDo) WithContext(ctx context.Context) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwcFollowUserDo) ReadDB() IQeyKryWEwcFollowUserDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwcFollowUserDo) WriteDB() IQeyKryWEwcFollowUserDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwcFollowUserDo) Session(config *gorm.Session) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwcFollowUserDo) Clauses(conds ...clause.Expression) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwcFollowUserDo) Returning(value interface{}, columns ...string) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwcFollowUserDo) Not(conds ...gen.Condition) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwcFollowUserDo) Or(conds ...gen.Condition) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwcFollowUserDo) Select(conds ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwcFollowUserDo) Where(conds ...gen.Condition) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwcFollowUserDo) Order(conds ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwcFollowUserDo) Distinct(cols ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwcFollowUserDo) Omit(cols ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwcFollowUserDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwcFollowUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwcFollowUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwcFollowUserDo) Group(cols ...field.Expr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwcFollowUserDo) Having(conds ...gen.Condition) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwcFollowUserDo) Limit(limit int) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwcFollowUserDo) Offset(offset int) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwcFollowUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwcFollowUserDo) Unscoped() IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwcFollowUserDo) Create(values ...*model.QeyKryWEwcFollowUser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwcFollowUserDo) CreateInBatches(values []*model.QeyKryWEwcFollowUser, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwcFollowUserDo) Save(values ...*model.QeyKryWEwcFollowUser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwcFollowUserDo) First() (*model.QeyKryWEwcFollowUser, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFollowUser), nil
	}
}

func (q qeyKryWEwcFollowUserDo) Take() (*model.QeyKryWEwcFollowUser, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFollowUser), nil
	}
}

func (q qeyKryWEwcFollowUserDo) Last() (*model.QeyKryWEwcFollowUser, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFollowUser), nil
	}
}

func (q qeyKryWEwcFollowUserDo) Find() ([]*model.QeyKryWEwcFollowUser, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwcFollowUser), err
}

func (q qeyKryWEwcFollowUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcFollowUser, err error) {
	buf := make([]*model.QeyKryWEwcFollowUser, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwcFollowUserDo) FindInBatches(result *[]*model.QeyKryWEwcFollowUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwcFollowUserDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwcFollowUserDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwcFollowUserDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwcFollowUserDo) Joins(fields ...field.RelationField) IQeyKryWEwcFollowUserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwcFollowUserDo) Preload(fields ...field.RelationField) IQeyKryWEwcFollowUserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwcFollowUserDo) FirstOrInit() (*model.QeyKryWEwcFollowUser, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFollowUser), nil
	}
}

func (q qeyKryWEwcFollowUserDo) FirstOrCreate() (*model.QeyKryWEwcFollowUser, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFollowUser), nil
	}
}

func (q qeyKryWEwcFollowUserDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwcFollowUser, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwcFollowUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwcFollowUserDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwcFollowUserDo) Delete(models ...*model.QeyKryWEwcFollowUser) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwcFollowUserDo) withDO(do gen.Dao) *qeyKryWEwcFollowUserDo {
	q.DO = *do.(*gen.DO)
	return q
}
