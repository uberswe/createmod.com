// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEyoastMigration(db *gorm.DB, opts ...gen.DOOption) qeyKryWEyoastMigration {
	_qeyKryWEyoastMigration := qeyKryWEyoastMigration{}

	_qeyKryWEyoastMigration.qeyKryWEyoastMigrationDo.UseDB(db, opts...)
	_qeyKryWEyoastMigration.qeyKryWEyoastMigrationDo.UseModel(&model.QeyKryWEyoastMigration{})

	tableName := _qeyKryWEyoastMigration.qeyKryWEyoastMigrationDo.TableName()
	_qeyKryWEyoastMigration.ALL = field.NewAsterisk(tableName)
	_qeyKryWEyoastMigration.ID = field.NewInt32(tableName, "id")
	_qeyKryWEyoastMigration.Version = field.NewString(tableName, "version")

	_qeyKryWEyoastMigration.fillFieldMap()

	return _qeyKryWEyoastMigration
}

type qeyKryWEyoastMigration struct {
	qeyKryWEyoastMigrationDo

	ALL     field.Asterisk
	ID      field.Int32
	Version field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEyoastMigration) Table(newTableName string) *qeyKryWEyoastMigration {
	q.qeyKryWEyoastMigrationDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEyoastMigration) As(alias string) *qeyKryWEyoastMigration {
	q.qeyKryWEyoastMigrationDo.DO = *(q.qeyKryWEyoastMigrationDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEyoastMigration) updateTableName(table string) *qeyKryWEyoastMigration {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Version = field.NewString(table, "version")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEyoastMigration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEyoastMigration) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["id"] = q.ID
	q.fieldMap["version"] = q.Version
}

func (q qeyKryWEyoastMigration) clone(db *gorm.DB) qeyKryWEyoastMigration {
	q.qeyKryWEyoastMigrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEyoastMigration) replaceDB(db *gorm.DB) qeyKryWEyoastMigration {
	q.qeyKryWEyoastMigrationDo.ReplaceDB(db)
	return q
}

type qeyKryWEyoastMigrationDo struct{ gen.DO }

type IQeyKryWEyoastMigrationDo interface {
	gen.SubQuery
	Debug() IQeyKryWEyoastMigrationDo
	WithContext(ctx context.Context) IQeyKryWEyoastMigrationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEyoastMigrationDo
	WriteDB() IQeyKryWEyoastMigrationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEyoastMigrationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEyoastMigrationDo
	Not(conds ...gen.Condition) IQeyKryWEyoastMigrationDo
	Or(conds ...gen.Condition) IQeyKryWEyoastMigrationDo
	Select(conds ...field.Expr) IQeyKryWEyoastMigrationDo
	Where(conds ...gen.Condition) IQeyKryWEyoastMigrationDo
	Order(conds ...field.Expr) IQeyKryWEyoastMigrationDo
	Distinct(cols ...field.Expr) IQeyKryWEyoastMigrationDo
	Omit(cols ...field.Expr) IQeyKryWEyoastMigrationDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastMigrationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastMigrationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastMigrationDo
	Group(cols ...field.Expr) IQeyKryWEyoastMigrationDo
	Having(conds ...gen.Condition) IQeyKryWEyoastMigrationDo
	Limit(limit int) IQeyKryWEyoastMigrationDo
	Offset(offset int) IQeyKryWEyoastMigrationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastMigrationDo
	Unscoped() IQeyKryWEyoastMigrationDo
	Create(values ...*model.QeyKryWEyoastMigration) error
	CreateInBatches(values []*model.QeyKryWEyoastMigration, batchSize int) error
	Save(values ...*model.QeyKryWEyoastMigration) error
	First() (*model.QeyKryWEyoastMigration, error)
	Take() (*model.QeyKryWEyoastMigration, error)
	Last() (*model.QeyKryWEyoastMigration, error)
	Find() ([]*model.QeyKryWEyoastMigration, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastMigration, err error)
	FindInBatches(result *[]*model.QeyKryWEyoastMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEyoastMigration) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastMigrationDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEyoastMigrationDo
	Joins(fields ...field.RelationField) IQeyKryWEyoastMigrationDo
	Preload(fields ...field.RelationField) IQeyKryWEyoastMigrationDo
	FirstOrInit() (*model.QeyKryWEyoastMigration, error)
	FirstOrCreate() (*model.QeyKryWEyoastMigration, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastMigration, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEyoastMigrationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEyoastMigrationDo) Debug() IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEyoastMigrationDo) WithContext(ctx context.Context) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEyoastMigrationDo) ReadDB() IQeyKryWEyoastMigrationDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEyoastMigrationDo) WriteDB() IQeyKryWEyoastMigrationDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEyoastMigrationDo) Session(config *gorm.Session) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEyoastMigrationDo) Clauses(conds ...clause.Expression) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEyoastMigrationDo) Returning(value interface{}, columns ...string) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEyoastMigrationDo) Not(conds ...gen.Condition) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEyoastMigrationDo) Or(conds ...gen.Condition) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEyoastMigrationDo) Select(conds ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEyoastMigrationDo) Where(conds ...gen.Condition) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEyoastMigrationDo) Order(conds ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEyoastMigrationDo) Distinct(cols ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEyoastMigrationDo) Omit(cols ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEyoastMigrationDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEyoastMigrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEyoastMigrationDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEyoastMigrationDo) Group(cols ...field.Expr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEyoastMigrationDo) Having(conds ...gen.Condition) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEyoastMigrationDo) Limit(limit int) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEyoastMigrationDo) Offset(offset int) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEyoastMigrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEyoastMigrationDo) Unscoped() IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEyoastMigrationDo) Create(values ...*model.QeyKryWEyoastMigration) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEyoastMigrationDo) CreateInBatches(values []*model.QeyKryWEyoastMigration, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEyoastMigrationDo) Save(values ...*model.QeyKryWEyoastMigration) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEyoastMigrationDo) First() (*model.QeyKryWEyoastMigration, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastMigration), nil
	}
}

func (q qeyKryWEyoastMigrationDo) Take() (*model.QeyKryWEyoastMigration, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastMigration), nil
	}
}

func (q qeyKryWEyoastMigrationDo) Last() (*model.QeyKryWEyoastMigration, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastMigration), nil
	}
}

func (q qeyKryWEyoastMigrationDo) Find() ([]*model.QeyKryWEyoastMigration, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEyoastMigration), err
}

func (q qeyKryWEyoastMigrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastMigration, err error) {
	buf := make([]*model.QeyKryWEyoastMigration, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEyoastMigrationDo) FindInBatches(result *[]*model.QeyKryWEyoastMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEyoastMigrationDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEyoastMigrationDo) Assign(attrs ...field.AssignExpr) IQeyKryWEyoastMigrationDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEyoastMigrationDo) Joins(fields ...field.RelationField) IQeyKryWEyoastMigrationDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEyoastMigrationDo) Preload(fields ...field.RelationField) IQeyKryWEyoastMigrationDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEyoastMigrationDo) FirstOrInit() (*model.QeyKryWEyoastMigration, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastMigration), nil
	}
}

func (q qeyKryWEyoastMigrationDo) FirstOrCreate() (*model.QeyKryWEyoastMigration, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastMigration), nil
	}
}

func (q qeyKryWEyoastMigrationDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastMigration, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEyoastMigrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEyoastMigrationDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEyoastMigrationDo) Delete(models ...*model.QeyKryWEyoastMigration) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEyoastMigrationDo) withDO(do gen.Dao) *qeyKryWEyoastMigrationDo {
	q.DO = *do.(*gen.DO)
	return q
}
