// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEulikeComment(db *gorm.DB, opts ...gen.DOOption) qeyKryWEulikeComment {
	_qeyKryWEulikeComment := qeyKryWEulikeComment{}

	_qeyKryWEulikeComment.qeyKryWEulikeCommentDo.UseDB(db, opts...)
	_qeyKryWEulikeComment.qeyKryWEulikeCommentDo.UseModel(&model.QeyKryWEulikeComment{})

	tableName := _qeyKryWEulikeComment.qeyKryWEulikeCommentDo.TableName()
	_qeyKryWEulikeComment.ALL = field.NewAsterisk(tableName)
	_qeyKryWEulikeComment.ID = field.NewInt64(tableName, "id")
	_qeyKryWEulikeComment.CommentID = field.NewInt64(tableName, "comment_id")
	_qeyKryWEulikeComment.DateTime = field.NewTime(tableName, "date_time")
	_qeyKryWEulikeComment.IP = field.NewString(tableName, "ip")
	_qeyKryWEulikeComment.UserID = field.NewString(tableName, "user_id")
	_qeyKryWEulikeComment.Status = field.NewString(tableName, "status")

	_qeyKryWEulikeComment.fillFieldMap()

	return _qeyKryWEulikeComment
}

type qeyKryWEulikeComment struct {
	qeyKryWEulikeCommentDo

	ALL       field.Asterisk
	ID        field.Int64
	CommentID field.Int64
	DateTime  field.Time
	IP        field.String
	UserID    field.String
	Status    field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEulikeComment) Table(newTableName string) *qeyKryWEulikeComment {
	q.qeyKryWEulikeCommentDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEulikeComment) As(alias string) *qeyKryWEulikeComment {
	q.qeyKryWEulikeCommentDo.DO = *(q.qeyKryWEulikeCommentDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEulikeComment) updateTableName(table string) *qeyKryWEulikeComment {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.CommentID = field.NewInt64(table, "comment_id")
	q.DateTime = field.NewTime(table, "date_time")
	q.IP = field.NewString(table, "ip")
	q.UserID = field.NewString(table, "user_id")
	q.Status = field.NewString(table, "status")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEulikeComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEulikeComment) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["comment_id"] = q.CommentID
	q.fieldMap["date_time"] = q.DateTime
	q.fieldMap["ip"] = q.IP
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["status"] = q.Status
}

func (q qeyKryWEulikeComment) clone(db *gorm.DB) qeyKryWEulikeComment {
	q.qeyKryWEulikeCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEulikeComment) replaceDB(db *gorm.DB) qeyKryWEulikeComment {
	q.qeyKryWEulikeCommentDo.ReplaceDB(db)
	return q
}

type qeyKryWEulikeCommentDo struct{ gen.DO }

type IQeyKryWEulikeCommentDo interface {
	gen.SubQuery
	Debug() IQeyKryWEulikeCommentDo
	WithContext(ctx context.Context) IQeyKryWEulikeCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEulikeCommentDo
	WriteDB() IQeyKryWEulikeCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEulikeCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEulikeCommentDo
	Not(conds ...gen.Condition) IQeyKryWEulikeCommentDo
	Or(conds ...gen.Condition) IQeyKryWEulikeCommentDo
	Select(conds ...field.Expr) IQeyKryWEulikeCommentDo
	Where(conds ...gen.Condition) IQeyKryWEulikeCommentDo
	Order(conds ...field.Expr) IQeyKryWEulikeCommentDo
	Distinct(cols ...field.Expr) IQeyKryWEulikeCommentDo
	Omit(cols ...field.Expr) IQeyKryWEulikeCommentDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeCommentDo
	Group(cols ...field.Expr) IQeyKryWEulikeCommentDo
	Having(conds ...gen.Condition) IQeyKryWEulikeCommentDo
	Limit(limit int) IQeyKryWEulikeCommentDo
	Offset(offset int) IQeyKryWEulikeCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeCommentDo
	Unscoped() IQeyKryWEulikeCommentDo
	Create(values ...*model.QeyKryWEulikeComment) error
	CreateInBatches(values []*model.QeyKryWEulikeComment, batchSize int) error
	Save(values ...*model.QeyKryWEulikeComment) error
	First() (*model.QeyKryWEulikeComment, error)
	Take() (*model.QeyKryWEulikeComment, error)
	Last() (*model.QeyKryWEulikeComment, error)
	Find() ([]*model.QeyKryWEulikeComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeComment, err error)
	FindInBatches(result *[]*model.QeyKryWEulikeComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEulikeComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeCommentDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEulikeCommentDo
	Joins(fields ...field.RelationField) IQeyKryWEulikeCommentDo
	Preload(fields ...field.RelationField) IQeyKryWEulikeCommentDo
	FirstOrInit() (*model.QeyKryWEulikeComment, error)
	FirstOrCreate() (*model.QeyKryWEulikeComment, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEulikeCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEulikeCommentDo) Debug() IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEulikeCommentDo) WithContext(ctx context.Context) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEulikeCommentDo) ReadDB() IQeyKryWEulikeCommentDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEulikeCommentDo) WriteDB() IQeyKryWEulikeCommentDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEulikeCommentDo) Session(config *gorm.Session) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEulikeCommentDo) Clauses(conds ...clause.Expression) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEulikeCommentDo) Returning(value interface{}, columns ...string) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEulikeCommentDo) Not(conds ...gen.Condition) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEulikeCommentDo) Or(conds ...gen.Condition) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEulikeCommentDo) Select(conds ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEulikeCommentDo) Where(conds ...gen.Condition) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEulikeCommentDo) Order(conds ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEulikeCommentDo) Distinct(cols ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEulikeCommentDo) Omit(cols ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEulikeCommentDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEulikeCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEulikeCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEulikeCommentDo) Group(cols ...field.Expr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEulikeCommentDo) Having(conds ...gen.Condition) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEulikeCommentDo) Limit(limit int) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEulikeCommentDo) Offset(offset int) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEulikeCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEulikeCommentDo) Unscoped() IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEulikeCommentDo) Create(values ...*model.QeyKryWEulikeComment) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEulikeCommentDo) CreateInBatches(values []*model.QeyKryWEulikeComment, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEulikeCommentDo) Save(values ...*model.QeyKryWEulikeComment) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEulikeCommentDo) First() (*model.QeyKryWEulikeComment, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeComment), nil
	}
}

func (q qeyKryWEulikeCommentDo) Take() (*model.QeyKryWEulikeComment, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeComment), nil
	}
}

func (q qeyKryWEulikeCommentDo) Last() (*model.QeyKryWEulikeComment, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeComment), nil
	}
}

func (q qeyKryWEulikeCommentDo) Find() ([]*model.QeyKryWEulikeComment, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEulikeComment), err
}

func (q qeyKryWEulikeCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeComment, err error) {
	buf := make([]*model.QeyKryWEulikeComment, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEulikeCommentDo) FindInBatches(result *[]*model.QeyKryWEulikeComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEulikeCommentDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEulikeCommentDo) Assign(attrs ...field.AssignExpr) IQeyKryWEulikeCommentDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEulikeCommentDo) Joins(fields ...field.RelationField) IQeyKryWEulikeCommentDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEulikeCommentDo) Preload(fields ...field.RelationField) IQeyKryWEulikeCommentDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEulikeCommentDo) FirstOrInit() (*model.QeyKryWEulikeComment, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeComment), nil
	}
}

func (q qeyKryWEulikeCommentDo) FirstOrCreate() (*model.QeyKryWEulikeComment, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeComment), nil
	}
}

func (q qeyKryWEulikeCommentDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeComment, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEulikeCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEulikeCommentDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEulikeCommentDo) Delete(models ...*model.QeyKryWEulikeComment) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEulikeCommentDo) withDO(do gen.Dao) *qeyKryWEulikeCommentDo {
	q.DO = *do.(*gen.DO)
	return q
}
