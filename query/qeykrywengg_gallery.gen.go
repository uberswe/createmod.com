// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEnggGallery(db *gorm.DB, opts ...gen.DOOption) qeyKryWEnggGallery {
	_qeyKryWEnggGallery := qeyKryWEnggGallery{}

	_qeyKryWEnggGallery.qeyKryWEnggGalleryDo.UseDB(db, opts...)
	_qeyKryWEnggGallery.qeyKryWEnggGalleryDo.UseModel(&model.QeyKryWEnggGallery{})

	tableName := _qeyKryWEnggGallery.qeyKryWEnggGalleryDo.TableName()
	_qeyKryWEnggGallery.ALL = field.NewAsterisk(tableName)
	_qeyKryWEnggGallery.Gid = field.NewInt64(tableName, "gid")
	_qeyKryWEnggGallery.Name = field.NewString(tableName, "name")
	_qeyKryWEnggGallery.Slug = field.NewString(tableName, "slug")
	_qeyKryWEnggGallery.Path = field.NewString(tableName, "path")
	_qeyKryWEnggGallery.Title = field.NewString(tableName, "title")
	_qeyKryWEnggGallery.Galdesc = field.NewString(tableName, "galdesc")
	_qeyKryWEnggGallery.Pageid = field.NewInt64(tableName, "pageid")
	_qeyKryWEnggGallery.Previewpic = field.NewInt64(tableName, "previewpic")
	_qeyKryWEnggGallery.Author = field.NewInt64(tableName, "author")
	_qeyKryWEnggGallery.ExtrasPostID = field.NewInt64(tableName, "extras_post_id")

	_qeyKryWEnggGallery.fillFieldMap()

	return _qeyKryWEnggGallery
}

type qeyKryWEnggGallery struct {
	qeyKryWEnggGalleryDo

	ALL          field.Asterisk
	Gid          field.Int64
	Name         field.String
	Slug         field.String
	Path         field.String
	Title        field.String
	Galdesc      field.String
	Pageid       field.Int64
	Previewpic   field.Int64
	Author       field.Int64
	ExtrasPostID field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEnggGallery) Table(newTableName string) *qeyKryWEnggGallery {
	q.qeyKryWEnggGalleryDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEnggGallery) As(alias string) *qeyKryWEnggGallery {
	q.qeyKryWEnggGalleryDo.DO = *(q.qeyKryWEnggGalleryDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEnggGallery) updateTableName(table string) *qeyKryWEnggGallery {
	q.ALL = field.NewAsterisk(table)
	q.Gid = field.NewInt64(table, "gid")
	q.Name = field.NewString(table, "name")
	q.Slug = field.NewString(table, "slug")
	q.Path = field.NewString(table, "path")
	q.Title = field.NewString(table, "title")
	q.Galdesc = field.NewString(table, "galdesc")
	q.Pageid = field.NewInt64(table, "pageid")
	q.Previewpic = field.NewInt64(table, "previewpic")
	q.Author = field.NewInt64(table, "author")
	q.ExtrasPostID = field.NewInt64(table, "extras_post_id")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEnggGallery) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEnggGallery) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["gid"] = q.Gid
	q.fieldMap["name"] = q.Name
	q.fieldMap["slug"] = q.Slug
	q.fieldMap["path"] = q.Path
	q.fieldMap["title"] = q.Title
	q.fieldMap["galdesc"] = q.Galdesc
	q.fieldMap["pageid"] = q.Pageid
	q.fieldMap["previewpic"] = q.Previewpic
	q.fieldMap["author"] = q.Author
	q.fieldMap["extras_post_id"] = q.ExtrasPostID
}

func (q qeyKryWEnggGallery) clone(db *gorm.DB) qeyKryWEnggGallery {
	q.qeyKryWEnggGalleryDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEnggGallery) replaceDB(db *gorm.DB) qeyKryWEnggGallery {
	q.qeyKryWEnggGalleryDo.ReplaceDB(db)
	return q
}

type qeyKryWEnggGalleryDo struct{ gen.DO }

type IQeyKryWEnggGalleryDo interface {
	gen.SubQuery
	Debug() IQeyKryWEnggGalleryDo
	WithContext(ctx context.Context) IQeyKryWEnggGalleryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEnggGalleryDo
	WriteDB() IQeyKryWEnggGalleryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEnggGalleryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEnggGalleryDo
	Not(conds ...gen.Condition) IQeyKryWEnggGalleryDo
	Or(conds ...gen.Condition) IQeyKryWEnggGalleryDo
	Select(conds ...field.Expr) IQeyKryWEnggGalleryDo
	Where(conds ...gen.Condition) IQeyKryWEnggGalleryDo
	Order(conds ...field.Expr) IQeyKryWEnggGalleryDo
	Distinct(cols ...field.Expr) IQeyKryWEnggGalleryDo
	Omit(cols ...field.Expr) IQeyKryWEnggGalleryDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEnggGalleryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggGalleryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggGalleryDo
	Group(cols ...field.Expr) IQeyKryWEnggGalleryDo
	Having(conds ...gen.Condition) IQeyKryWEnggGalleryDo
	Limit(limit int) IQeyKryWEnggGalleryDo
	Offset(offset int) IQeyKryWEnggGalleryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEnggGalleryDo
	Unscoped() IQeyKryWEnggGalleryDo
	Create(values ...*model.QeyKryWEnggGallery) error
	CreateInBatches(values []*model.QeyKryWEnggGallery, batchSize int) error
	Save(values ...*model.QeyKryWEnggGallery) error
	First() (*model.QeyKryWEnggGallery, error)
	Take() (*model.QeyKryWEnggGallery, error)
	Last() (*model.QeyKryWEnggGallery, error)
	Find() ([]*model.QeyKryWEnggGallery, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEnggGallery, err error)
	FindInBatches(result *[]*model.QeyKryWEnggGallery, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEnggGallery) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEnggGalleryDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEnggGalleryDo
	Joins(fields ...field.RelationField) IQeyKryWEnggGalleryDo
	Preload(fields ...field.RelationField) IQeyKryWEnggGalleryDo
	FirstOrInit() (*model.QeyKryWEnggGallery, error)
	FirstOrCreate() (*model.QeyKryWEnggGallery, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEnggGallery, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEnggGalleryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEnggGalleryDo) Debug() IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEnggGalleryDo) WithContext(ctx context.Context) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEnggGalleryDo) ReadDB() IQeyKryWEnggGalleryDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEnggGalleryDo) WriteDB() IQeyKryWEnggGalleryDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEnggGalleryDo) Session(config *gorm.Session) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEnggGalleryDo) Clauses(conds ...clause.Expression) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEnggGalleryDo) Returning(value interface{}, columns ...string) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEnggGalleryDo) Not(conds ...gen.Condition) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEnggGalleryDo) Or(conds ...gen.Condition) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEnggGalleryDo) Select(conds ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEnggGalleryDo) Where(conds ...gen.Condition) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEnggGalleryDo) Order(conds ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEnggGalleryDo) Distinct(cols ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEnggGalleryDo) Omit(cols ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEnggGalleryDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEnggGalleryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEnggGalleryDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEnggGalleryDo) Group(cols ...field.Expr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEnggGalleryDo) Having(conds ...gen.Condition) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEnggGalleryDo) Limit(limit int) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEnggGalleryDo) Offset(offset int) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEnggGalleryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEnggGalleryDo) Unscoped() IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEnggGalleryDo) Create(values ...*model.QeyKryWEnggGallery) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEnggGalleryDo) CreateInBatches(values []*model.QeyKryWEnggGallery, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEnggGalleryDo) Save(values ...*model.QeyKryWEnggGallery) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEnggGalleryDo) First() (*model.QeyKryWEnggGallery, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggGallery), nil
	}
}

func (q qeyKryWEnggGalleryDo) Take() (*model.QeyKryWEnggGallery, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggGallery), nil
	}
}

func (q qeyKryWEnggGalleryDo) Last() (*model.QeyKryWEnggGallery, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggGallery), nil
	}
}

func (q qeyKryWEnggGalleryDo) Find() ([]*model.QeyKryWEnggGallery, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEnggGallery), err
}

func (q qeyKryWEnggGalleryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEnggGallery, err error) {
	buf := make([]*model.QeyKryWEnggGallery, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEnggGalleryDo) FindInBatches(result *[]*model.QeyKryWEnggGallery, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEnggGalleryDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEnggGalleryDo) Assign(attrs ...field.AssignExpr) IQeyKryWEnggGalleryDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEnggGalleryDo) Joins(fields ...field.RelationField) IQeyKryWEnggGalleryDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEnggGalleryDo) Preload(fields ...field.RelationField) IQeyKryWEnggGalleryDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEnggGalleryDo) FirstOrInit() (*model.QeyKryWEnggGallery, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggGallery), nil
	}
}

func (q qeyKryWEnggGalleryDo) FirstOrCreate() (*model.QeyKryWEnggGallery, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggGallery), nil
	}
}

func (q qeyKryWEnggGalleryDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEnggGallery, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEnggGalleryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEnggGalleryDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEnggGalleryDo) Delete(models ...*model.QeyKryWEnggGallery) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEnggGalleryDo) withDO(do gen.Dao) *qeyKryWEnggGalleryDo {
	q.DO = *do.(*gen.DO)
	return q
}
