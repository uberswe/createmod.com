// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEulike(db *gorm.DB, opts ...gen.DOOption) qeyKryWEulike {
	_qeyKryWEulike := qeyKryWEulike{}

	_qeyKryWEulike.qeyKryWEulikeDo.UseDB(db, opts...)
	_qeyKryWEulike.qeyKryWEulikeDo.UseModel(&model.QeyKryWEulike{})

	tableName := _qeyKryWEulike.qeyKryWEulikeDo.TableName()
	_qeyKryWEulike.ALL = field.NewAsterisk(tableName)
	_qeyKryWEulike.ID = field.NewInt64(tableName, "id")
	_qeyKryWEulike.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEulike.DateTime = field.NewTime(tableName, "date_time")
	_qeyKryWEulike.IP = field.NewString(tableName, "ip")
	_qeyKryWEulike.UserID = field.NewString(tableName, "user_id")
	_qeyKryWEulike.Status = field.NewString(tableName, "status")

	_qeyKryWEulike.fillFieldMap()

	return _qeyKryWEulike
}

type qeyKryWEulike struct {
	qeyKryWEulikeDo

	ALL      field.Asterisk
	ID       field.Int64
	PostID   field.Int64
	DateTime field.Time
	IP       field.String
	UserID   field.String
	Status   field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEulike) Table(newTableName string) *qeyKryWEulike {
	q.qeyKryWEulikeDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEulike) As(alias string) *qeyKryWEulike {
	q.qeyKryWEulikeDo.DO = *(q.qeyKryWEulikeDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEulike) updateTableName(table string) *qeyKryWEulike {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.PostID = field.NewInt64(table, "post_id")
	q.DateTime = field.NewTime(table, "date_time")
	q.IP = field.NewString(table, "ip")
	q.UserID = field.NewString(table, "user_id")
	q.Status = field.NewString(table, "status")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEulike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEulike) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["date_time"] = q.DateTime
	q.fieldMap["ip"] = q.IP
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["status"] = q.Status
}

func (q qeyKryWEulike) clone(db *gorm.DB) qeyKryWEulike {
	q.qeyKryWEulikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEulike) replaceDB(db *gorm.DB) qeyKryWEulike {
	q.qeyKryWEulikeDo.ReplaceDB(db)
	return q
}

type qeyKryWEulikeDo struct{ gen.DO }

type IQeyKryWEulikeDo interface {
	gen.SubQuery
	Debug() IQeyKryWEulikeDo
	WithContext(ctx context.Context) IQeyKryWEulikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEulikeDo
	WriteDB() IQeyKryWEulikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEulikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEulikeDo
	Not(conds ...gen.Condition) IQeyKryWEulikeDo
	Or(conds ...gen.Condition) IQeyKryWEulikeDo
	Select(conds ...field.Expr) IQeyKryWEulikeDo
	Where(conds ...gen.Condition) IQeyKryWEulikeDo
	Order(conds ...field.Expr) IQeyKryWEulikeDo
	Distinct(cols ...field.Expr) IQeyKryWEulikeDo
	Omit(cols ...field.Expr) IQeyKryWEulikeDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeDo
	Group(cols ...field.Expr) IQeyKryWEulikeDo
	Having(conds ...gen.Condition) IQeyKryWEulikeDo
	Limit(limit int) IQeyKryWEulikeDo
	Offset(offset int) IQeyKryWEulikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeDo
	Unscoped() IQeyKryWEulikeDo
	Create(values ...*model.QeyKryWEulike) error
	CreateInBatches(values []*model.QeyKryWEulike, batchSize int) error
	Save(values ...*model.QeyKryWEulike) error
	First() (*model.QeyKryWEulike, error)
	Take() (*model.QeyKryWEulike, error)
	Last() (*model.QeyKryWEulike, error)
	Find() ([]*model.QeyKryWEulike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulike, err error)
	FindInBatches(result *[]*model.QeyKryWEulike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEulike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEulikeDo
	Joins(fields ...field.RelationField) IQeyKryWEulikeDo
	Preload(fields ...field.RelationField) IQeyKryWEulikeDo
	FirstOrInit() (*model.QeyKryWEulike, error)
	FirstOrCreate() (*model.QeyKryWEulike, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEulike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEulikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEulikeDo) Debug() IQeyKryWEulikeDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEulikeDo) WithContext(ctx context.Context) IQeyKryWEulikeDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEulikeDo) ReadDB() IQeyKryWEulikeDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEulikeDo) WriteDB() IQeyKryWEulikeDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEulikeDo) Session(config *gorm.Session) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEulikeDo) Clauses(conds ...clause.Expression) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEulikeDo) Returning(value interface{}, columns ...string) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEulikeDo) Not(conds ...gen.Condition) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEulikeDo) Or(conds ...gen.Condition) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEulikeDo) Select(conds ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEulikeDo) Where(conds ...gen.Condition) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEulikeDo) Order(conds ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEulikeDo) Distinct(cols ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEulikeDo) Omit(cols ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEulikeDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEulikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEulikeDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEulikeDo) Group(cols ...field.Expr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEulikeDo) Having(conds ...gen.Condition) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEulikeDo) Limit(limit int) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEulikeDo) Offset(offset int) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEulikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEulikeDo) Unscoped() IQeyKryWEulikeDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEulikeDo) Create(values ...*model.QeyKryWEulike) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEulikeDo) CreateInBatches(values []*model.QeyKryWEulike, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEulikeDo) Save(values ...*model.QeyKryWEulike) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEulikeDo) First() (*model.QeyKryWEulike, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulike), nil
	}
}

func (q qeyKryWEulikeDo) Take() (*model.QeyKryWEulike, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulike), nil
	}
}

func (q qeyKryWEulikeDo) Last() (*model.QeyKryWEulike, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulike), nil
	}
}

func (q qeyKryWEulikeDo) Find() ([]*model.QeyKryWEulike, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEulike), err
}

func (q qeyKryWEulikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulike, err error) {
	buf := make([]*model.QeyKryWEulike, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEulikeDo) FindInBatches(result *[]*model.QeyKryWEulike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEulikeDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEulikeDo) Assign(attrs ...field.AssignExpr) IQeyKryWEulikeDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEulikeDo) Joins(fields ...field.RelationField) IQeyKryWEulikeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEulikeDo) Preload(fields ...field.RelationField) IQeyKryWEulikeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEulikeDo) FirstOrInit() (*model.QeyKryWEulike, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulike), nil
	}
}

func (q qeyKryWEulikeDo) FirstOrCreate() (*model.QeyKryWEulike, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulike), nil
	}
}

func (q qeyKryWEulikeDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEulike, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEulikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEulikeDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEulikeDo) Delete(models ...*model.QeyKryWEulike) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEulikeDo) withDO(do gen.Dao) *qeyKryWEulikeDo {
	q.DO = *do.(*gen.DO)
	return q
}
