// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEpostmetum(db *gorm.DB, opts ...gen.DOOption) qeyKryWEpostmetum {
	_qeyKryWEpostmetum := qeyKryWEpostmetum{}

	_qeyKryWEpostmetum.qeyKryWEpostmetumDo.UseDB(db, opts...)
	_qeyKryWEpostmetum.qeyKryWEpostmetumDo.UseModel(&model.QeyKryWEpostmetum{})

	tableName := _qeyKryWEpostmetum.qeyKryWEpostmetumDo.TableName()
	_qeyKryWEpostmetum.ALL = field.NewAsterisk(tableName)
	_qeyKryWEpostmetum.MetaID = field.NewInt64(tableName, "meta_id")
	_qeyKryWEpostmetum.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEpostmetum.MetaKey = field.NewString(tableName, "meta_key")
	_qeyKryWEpostmetum.MetaValue = field.NewString(tableName, "meta_value")

	_qeyKryWEpostmetum.fillFieldMap()

	return _qeyKryWEpostmetum
}

type qeyKryWEpostmetum struct {
	qeyKryWEpostmetumDo

	ALL       field.Asterisk
	MetaID    field.Int64
	PostID    field.Int64
	MetaKey   field.String
	MetaValue field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEpostmetum) Table(newTableName string) *qeyKryWEpostmetum {
	q.qeyKryWEpostmetumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEpostmetum) As(alias string) *qeyKryWEpostmetum {
	q.qeyKryWEpostmetumDo.DO = *(q.qeyKryWEpostmetumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEpostmetum) updateTableName(table string) *qeyKryWEpostmetum {
	q.ALL = field.NewAsterisk(table)
	q.MetaID = field.NewInt64(table, "meta_id")
	q.PostID = field.NewInt64(table, "post_id")
	q.MetaKey = field.NewString(table, "meta_key")
	q.MetaValue = field.NewString(table, "meta_value")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEpostmetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEpostmetum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["meta_id"] = q.MetaID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["meta_key"] = q.MetaKey
	q.fieldMap["meta_value"] = q.MetaValue
}

func (q qeyKryWEpostmetum) clone(db *gorm.DB) qeyKryWEpostmetum {
	q.qeyKryWEpostmetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEpostmetum) replaceDB(db *gorm.DB) qeyKryWEpostmetum {
	q.qeyKryWEpostmetumDo.ReplaceDB(db)
	return q
}

type qeyKryWEpostmetumDo struct{ gen.DO }

type IQeyKryWEpostmetumDo interface {
	gen.SubQuery
	Debug() IQeyKryWEpostmetumDo
	WithContext(ctx context.Context) IQeyKryWEpostmetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEpostmetumDo
	WriteDB() IQeyKryWEpostmetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEpostmetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEpostmetumDo
	Not(conds ...gen.Condition) IQeyKryWEpostmetumDo
	Or(conds ...gen.Condition) IQeyKryWEpostmetumDo
	Select(conds ...field.Expr) IQeyKryWEpostmetumDo
	Where(conds ...gen.Condition) IQeyKryWEpostmetumDo
	Order(conds ...field.Expr) IQeyKryWEpostmetumDo
	Distinct(cols ...field.Expr) IQeyKryWEpostmetumDo
	Omit(cols ...field.Expr) IQeyKryWEpostmetumDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEpostmetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostmetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostmetumDo
	Group(cols ...field.Expr) IQeyKryWEpostmetumDo
	Having(conds ...gen.Condition) IQeyKryWEpostmetumDo
	Limit(limit int) IQeyKryWEpostmetumDo
	Offset(offset int) IQeyKryWEpostmetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEpostmetumDo
	Unscoped() IQeyKryWEpostmetumDo
	Create(values ...*model.QeyKryWEpostmetum) error
	CreateInBatches(values []*model.QeyKryWEpostmetum, batchSize int) error
	Save(values ...*model.QeyKryWEpostmetum) error
	First() (*model.QeyKryWEpostmetum, error)
	Take() (*model.QeyKryWEpostmetum, error)
	Last() (*model.QeyKryWEpostmetum, error)
	Find() ([]*model.QeyKryWEpostmetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEpostmetum, err error)
	FindInBatches(result *[]*model.QeyKryWEpostmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEpostmetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEpostmetumDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEpostmetumDo
	Joins(fields ...field.RelationField) IQeyKryWEpostmetumDo
	Preload(fields ...field.RelationField) IQeyKryWEpostmetumDo
	FirstOrInit() (*model.QeyKryWEpostmetum, error)
	FirstOrCreate() (*model.QeyKryWEpostmetum, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEpostmetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEpostmetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEpostmetumDo) Debug() IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEpostmetumDo) WithContext(ctx context.Context) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEpostmetumDo) ReadDB() IQeyKryWEpostmetumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEpostmetumDo) WriteDB() IQeyKryWEpostmetumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEpostmetumDo) Session(config *gorm.Session) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEpostmetumDo) Clauses(conds ...clause.Expression) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEpostmetumDo) Returning(value interface{}, columns ...string) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEpostmetumDo) Not(conds ...gen.Condition) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEpostmetumDo) Or(conds ...gen.Condition) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEpostmetumDo) Select(conds ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEpostmetumDo) Where(conds ...gen.Condition) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEpostmetumDo) Order(conds ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEpostmetumDo) Distinct(cols ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEpostmetumDo) Omit(cols ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEpostmetumDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEpostmetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEpostmetumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEpostmetumDo) Group(cols ...field.Expr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEpostmetumDo) Having(conds ...gen.Condition) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEpostmetumDo) Limit(limit int) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEpostmetumDo) Offset(offset int) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEpostmetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEpostmetumDo) Unscoped() IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEpostmetumDo) Create(values ...*model.QeyKryWEpostmetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEpostmetumDo) CreateInBatches(values []*model.QeyKryWEpostmetum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEpostmetumDo) Save(values ...*model.QeyKryWEpostmetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEpostmetumDo) First() (*model.QeyKryWEpostmetum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostmetum), nil
	}
}

func (q qeyKryWEpostmetumDo) Take() (*model.QeyKryWEpostmetum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostmetum), nil
	}
}

func (q qeyKryWEpostmetumDo) Last() (*model.QeyKryWEpostmetum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostmetum), nil
	}
}

func (q qeyKryWEpostmetumDo) Find() ([]*model.QeyKryWEpostmetum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEpostmetum), err
}

func (q qeyKryWEpostmetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEpostmetum, err error) {
	buf := make([]*model.QeyKryWEpostmetum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEpostmetumDo) FindInBatches(result *[]*model.QeyKryWEpostmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEpostmetumDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEpostmetumDo) Assign(attrs ...field.AssignExpr) IQeyKryWEpostmetumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEpostmetumDo) Joins(fields ...field.RelationField) IQeyKryWEpostmetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEpostmetumDo) Preload(fields ...field.RelationField) IQeyKryWEpostmetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEpostmetumDo) FirstOrInit() (*model.QeyKryWEpostmetum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostmetum), nil
	}
}

func (q qeyKryWEpostmetumDo) FirstOrCreate() (*model.QeyKryWEpostmetum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostmetum), nil
	}
}

func (q qeyKryWEpostmetumDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEpostmetum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEpostmetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEpostmetumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEpostmetumDo) Delete(models ...*model.QeyKryWEpostmetum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEpostmetumDo) withDO(do gen.Dao) *qeyKryWEpostmetumDo {
	q.DO = *do.(*gen.DO)
	return q
}
