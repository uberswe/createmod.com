// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEyoastIndexable(db *gorm.DB, opts ...gen.DOOption) qeyKryWEyoastIndexable {
	_qeyKryWEyoastIndexable := qeyKryWEyoastIndexable{}

	_qeyKryWEyoastIndexable.qeyKryWEyoastIndexableDo.UseDB(db, opts...)
	_qeyKryWEyoastIndexable.qeyKryWEyoastIndexableDo.UseModel(&model.QeyKryWEyoastIndexable{})

	tableName := _qeyKryWEyoastIndexable.qeyKryWEyoastIndexableDo.TableName()
	_qeyKryWEyoastIndexable.ALL = field.NewAsterisk(tableName)
	_qeyKryWEyoastIndexable.ID = field.NewInt32(tableName, "id")
	_qeyKryWEyoastIndexable.Permalink = field.NewString(tableName, "permalink")
	_qeyKryWEyoastIndexable.PermalinkHash = field.NewString(tableName, "permalink_hash")
	_qeyKryWEyoastIndexable.ObjectID = field.NewInt64(tableName, "object_id")
	_qeyKryWEyoastIndexable.ObjectType = field.NewString(tableName, "object_type")
	_qeyKryWEyoastIndexable.ObjectSubType = field.NewString(tableName, "object_sub_type")
	_qeyKryWEyoastIndexable.AuthorID = field.NewInt64(tableName, "author_id")
	_qeyKryWEyoastIndexable.PostParent = field.NewInt64(tableName, "post_parent")
	_qeyKryWEyoastIndexable.Title = field.NewString(tableName, "title")
	_qeyKryWEyoastIndexable.Description = field.NewString(tableName, "description")
	_qeyKryWEyoastIndexable.BreadcrumbTitle = field.NewString(tableName, "breadcrumb_title")
	_qeyKryWEyoastIndexable.PostStatus = field.NewString(tableName, "post_status")
	_qeyKryWEyoastIndexable.IsPublic = field.NewBool(tableName, "is_public")
	_qeyKryWEyoastIndexable.IsProtected = field.NewBool(tableName, "is_protected")
	_qeyKryWEyoastIndexable.HasPublicPosts = field.NewBool(tableName, "has_public_posts")
	_qeyKryWEyoastIndexable.NumberOfPages = field.NewInt32(tableName, "number_of_pages")
	_qeyKryWEyoastIndexable.Canonical = field.NewString(tableName, "canonical")
	_qeyKryWEyoastIndexable.PrimaryFocusKeyword = field.NewString(tableName, "primary_focus_keyword")
	_qeyKryWEyoastIndexable.PrimaryFocusKeywordScore = field.NewInt32(tableName, "primary_focus_keyword_score")
	_qeyKryWEyoastIndexable.ReadabilityScore = field.NewInt32(tableName, "readability_score")
	_qeyKryWEyoastIndexable.IsCornerstone = field.NewBool(tableName, "is_cornerstone")
	_qeyKryWEyoastIndexable.IsRobotsNoindex = field.NewBool(tableName, "is_robots_noindex")
	_qeyKryWEyoastIndexable.IsRobotsNofollow = field.NewBool(tableName, "is_robots_nofollow")
	_qeyKryWEyoastIndexable.IsRobotsNoarchive = field.NewBool(tableName, "is_robots_noarchive")
	_qeyKryWEyoastIndexable.IsRobotsNoimageindex = field.NewBool(tableName, "is_robots_noimageindex")
	_qeyKryWEyoastIndexable.IsRobotsNosnippet = field.NewBool(tableName, "is_robots_nosnippet")
	_qeyKryWEyoastIndexable.TwitterTitle = field.NewString(tableName, "twitter_title")
	_qeyKryWEyoastIndexable.TwitterImage = field.NewString(tableName, "twitter_image")
	_qeyKryWEyoastIndexable.TwitterDescription = field.NewString(tableName, "twitter_description")
	_qeyKryWEyoastIndexable.TwitterImageID = field.NewString(tableName, "twitter_image_id")
	_qeyKryWEyoastIndexable.TwitterImageSource = field.NewString(tableName, "twitter_image_source")
	_qeyKryWEyoastIndexable.OpenGraphTitle = field.NewString(tableName, "open_graph_title")
	_qeyKryWEyoastIndexable.OpenGraphDescription = field.NewString(tableName, "open_graph_description")
	_qeyKryWEyoastIndexable.OpenGraphImage = field.NewString(tableName, "open_graph_image")
	_qeyKryWEyoastIndexable.OpenGraphImageID = field.NewString(tableName, "open_graph_image_id")
	_qeyKryWEyoastIndexable.OpenGraphImageSource = field.NewString(tableName, "open_graph_image_source")
	_qeyKryWEyoastIndexable.OpenGraphImageMeta = field.NewString(tableName, "open_graph_image_meta")
	_qeyKryWEyoastIndexable.LinkCount = field.NewInt32(tableName, "link_count")
	_qeyKryWEyoastIndexable.IncomingLinkCount = field.NewInt32(tableName, "incoming_link_count")
	_qeyKryWEyoastIndexable.ProminentWordsVersion = field.NewInt32(tableName, "prominent_words_version")
	_qeyKryWEyoastIndexable.CreatedAt = field.NewTime(tableName, "created_at")
	_qeyKryWEyoastIndexable.UpdatedAt = field.NewTime(tableName, "updated_at")
	_qeyKryWEyoastIndexable.BlogID = field.NewInt64(tableName, "blog_id")
	_qeyKryWEyoastIndexable.Language = field.NewString(tableName, "language")
	_qeyKryWEyoastIndexable.Region = field.NewString(tableName, "region")
	_qeyKryWEyoastIndexable.SchemaPageType = field.NewString(tableName, "schema_page_type")
	_qeyKryWEyoastIndexable.SchemaArticleType = field.NewString(tableName, "schema_article_type")
	_qeyKryWEyoastIndexable.HasAncestors = field.NewBool(tableName, "has_ancestors")
	_qeyKryWEyoastIndexable.EstimatedReadingTimeMinutes = field.NewInt32(tableName, "estimated_reading_time_minutes")
	_qeyKryWEyoastIndexable.Version = field.NewInt32(tableName, "version")
	_qeyKryWEyoastIndexable.ObjectLastModified = field.NewTime(tableName, "object_last_modified")
	_qeyKryWEyoastIndexable.ObjectPublishedAt = field.NewTime(tableName, "object_published_at")
	_qeyKryWEyoastIndexable.InclusiveLanguageScore = field.NewInt32(tableName, "inclusive_language_score")

	_qeyKryWEyoastIndexable.fillFieldMap()

	return _qeyKryWEyoastIndexable
}

type qeyKryWEyoastIndexable struct {
	qeyKryWEyoastIndexableDo

	ALL                         field.Asterisk
	ID                          field.Int32
	Permalink                   field.String
	PermalinkHash               field.String
	ObjectID                    field.Int64
	ObjectType                  field.String
	ObjectSubType               field.String
	AuthorID                    field.Int64
	PostParent                  field.Int64
	Title                       field.String
	Description                 field.String
	BreadcrumbTitle             field.String
	PostStatus                  field.String
	IsPublic                    field.Bool
	IsProtected                 field.Bool
	HasPublicPosts              field.Bool
	NumberOfPages               field.Int32
	Canonical                   field.String
	PrimaryFocusKeyword         field.String
	PrimaryFocusKeywordScore    field.Int32
	ReadabilityScore            field.Int32
	IsCornerstone               field.Bool
	IsRobotsNoindex             field.Bool
	IsRobotsNofollow            field.Bool
	IsRobotsNoarchive           field.Bool
	IsRobotsNoimageindex        field.Bool
	IsRobotsNosnippet           field.Bool
	TwitterTitle                field.String
	TwitterImage                field.String
	TwitterDescription          field.String
	TwitterImageID              field.String
	TwitterImageSource          field.String
	OpenGraphTitle              field.String
	OpenGraphDescription        field.String
	OpenGraphImage              field.String
	OpenGraphImageID            field.String
	OpenGraphImageSource        field.String
	OpenGraphImageMeta          field.String
	LinkCount                   field.Int32
	IncomingLinkCount           field.Int32
	ProminentWordsVersion       field.Int32
	CreatedAt                   field.Time
	UpdatedAt                   field.Time
	BlogID                      field.Int64
	Language                    field.String
	Region                      field.String
	SchemaPageType              field.String
	SchemaArticleType           field.String
	HasAncestors                field.Bool
	EstimatedReadingTimeMinutes field.Int32
	Version                     field.Int32
	ObjectLastModified          field.Time
	ObjectPublishedAt           field.Time
	InclusiveLanguageScore      field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEyoastIndexable) Table(newTableName string) *qeyKryWEyoastIndexable {
	q.qeyKryWEyoastIndexableDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEyoastIndexable) As(alias string) *qeyKryWEyoastIndexable {
	q.qeyKryWEyoastIndexableDo.DO = *(q.qeyKryWEyoastIndexableDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEyoastIndexable) updateTableName(table string) *qeyKryWEyoastIndexable {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Permalink = field.NewString(table, "permalink")
	q.PermalinkHash = field.NewString(table, "permalink_hash")
	q.ObjectID = field.NewInt64(table, "object_id")
	q.ObjectType = field.NewString(table, "object_type")
	q.ObjectSubType = field.NewString(table, "object_sub_type")
	q.AuthorID = field.NewInt64(table, "author_id")
	q.PostParent = field.NewInt64(table, "post_parent")
	q.Title = field.NewString(table, "title")
	q.Description = field.NewString(table, "description")
	q.BreadcrumbTitle = field.NewString(table, "breadcrumb_title")
	q.PostStatus = field.NewString(table, "post_status")
	q.IsPublic = field.NewBool(table, "is_public")
	q.IsProtected = field.NewBool(table, "is_protected")
	q.HasPublicPosts = field.NewBool(table, "has_public_posts")
	q.NumberOfPages = field.NewInt32(table, "number_of_pages")
	q.Canonical = field.NewString(table, "canonical")
	q.PrimaryFocusKeyword = field.NewString(table, "primary_focus_keyword")
	q.PrimaryFocusKeywordScore = field.NewInt32(table, "primary_focus_keyword_score")
	q.ReadabilityScore = field.NewInt32(table, "readability_score")
	q.IsCornerstone = field.NewBool(table, "is_cornerstone")
	q.IsRobotsNoindex = field.NewBool(table, "is_robots_noindex")
	q.IsRobotsNofollow = field.NewBool(table, "is_robots_nofollow")
	q.IsRobotsNoarchive = field.NewBool(table, "is_robots_noarchive")
	q.IsRobotsNoimageindex = field.NewBool(table, "is_robots_noimageindex")
	q.IsRobotsNosnippet = field.NewBool(table, "is_robots_nosnippet")
	q.TwitterTitle = field.NewString(table, "twitter_title")
	q.TwitterImage = field.NewString(table, "twitter_image")
	q.TwitterDescription = field.NewString(table, "twitter_description")
	q.TwitterImageID = field.NewString(table, "twitter_image_id")
	q.TwitterImageSource = field.NewString(table, "twitter_image_source")
	q.OpenGraphTitle = field.NewString(table, "open_graph_title")
	q.OpenGraphDescription = field.NewString(table, "open_graph_description")
	q.OpenGraphImage = field.NewString(table, "open_graph_image")
	q.OpenGraphImageID = field.NewString(table, "open_graph_image_id")
	q.OpenGraphImageSource = field.NewString(table, "open_graph_image_source")
	q.OpenGraphImageMeta = field.NewString(table, "open_graph_image_meta")
	q.LinkCount = field.NewInt32(table, "link_count")
	q.IncomingLinkCount = field.NewInt32(table, "incoming_link_count")
	q.ProminentWordsVersion = field.NewInt32(table, "prominent_words_version")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.BlogID = field.NewInt64(table, "blog_id")
	q.Language = field.NewString(table, "language")
	q.Region = field.NewString(table, "region")
	q.SchemaPageType = field.NewString(table, "schema_page_type")
	q.SchemaArticleType = field.NewString(table, "schema_article_type")
	q.HasAncestors = field.NewBool(table, "has_ancestors")
	q.EstimatedReadingTimeMinutes = field.NewInt32(table, "estimated_reading_time_minutes")
	q.Version = field.NewInt32(table, "version")
	q.ObjectLastModified = field.NewTime(table, "object_last_modified")
	q.ObjectPublishedAt = field.NewTime(table, "object_published_at")
	q.InclusiveLanguageScore = field.NewInt32(table, "inclusive_language_score")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEyoastIndexable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEyoastIndexable) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 53)
	q.fieldMap["id"] = q.ID
	q.fieldMap["permalink"] = q.Permalink
	q.fieldMap["permalink_hash"] = q.PermalinkHash
	q.fieldMap["object_id"] = q.ObjectID
	q.fieldMap["object_type"] = q.ObjectType
	q.fieldMap["object_sub_type"] = q.ObjectSubType
	q.fieldMap["author_id"] = q.AuthorID
	q.fieldMap["post_parent"] = q.PostParent
	q.fieldMap["title"] = q.Title
	q.fieldMap["description"] = q.Description
	q.fieldMap["breadcrumb_title"] = q.BreadcrumbTitle
	q.fieldMap["post_status"] = q.PostStatus
	q.fieldMap["is_public"] = q.IsPublic
	q.fieldMap["is_protected"] = q.IsProtected
	q.fieldMap["has_public_posts"] = q.HasPublicPosts
	q.fieldMap["number_of_pages"] = q.NumberOfPages
	q.fieldMap["canonical"] = q.Canonical
	q.fieldMap["primary_focus_keyword"] = q.PrimaryFocusKeyword
	q.fieldMap["primary_focus_keyword_score"] = q.PrimaryFocusKeywordScore
	q.fieldMap["readability_score"] = q.ReadabilityScore
	q.fieldMap["is_cornerstone"] = q.IsCornerstone
	q.fieldMap["is_robots_noindex"] = q.IsRobotsNoindex
	q.fieldMap["is_robots_nofollow"] = q.IsRobotsNofollow
	q.fieldMap["is_robots_noarchive"] = q.IsRobotsNoarchive
	q.fieldMap["is_robots_noimageindex"] = q.IsRobotsNoimageindex
	q.fieldMap["is_robots_nosnippet"] = q.IsRobotsNosnippet
	q.fieldMap["twitter_title"] = q.TwitterTitle
	q.fieldMap["twitter_image"] = q.TwitterImage
	q.fieldMap["twitter_description"] = q.TwitterDescription
	q.fieldMap["twitter_image_id"] = q.TwitterImageID
	q.fieldMap["twitter_image_source"] = q.TwitterImageSource
	q.fieldMap["open_graph_title"] = q.OpenGraphTitle
	q.fieldMap["open_graph_description"] = q.OpenGraphDescription
	q.fieldMap["open_graph_image"] = q.OpenGraphImage
	q.fieldMap["open_graph_image_id"] = q.OpenGraphImageID
	q.fieldMap["open_graph_image_source"] = q.OpenGraphImageSource
	q.fieldMap["open_graph_image_meta"] = q.OpenGraphImageMeta
	q.fieldMap["link_count"] = q.LinkCount
	q.fieldMap["incoming_link_count"] = q.IncomingLinkCount
	q.fieldMap["prominent_words_version"] = q.ProminentWordsVersion
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["blog_id"] = q.BlogID
	q.fieldMap["language"] = q.Language
	q.fieldMap["region"] = q.Region
	q.fieldMap["schema_page_type"] = q.SchemaPageType
	q.fieldMap["schema_article_type"] = q.SchemaArticleType
	q.fieldMap["has_ancestors"] = q.HasAncestors
	q.fieldMap["estimated_reading_time_minutes"] = q.EstimatedReadingTimeMinutes
	q.fieldMap["version"] = q.Version
	q.fieldMap["object_last_modified"] = q.ObjectLastModified
	q.fieldMap["object_published_at"] = q.ObjectPublishedAt
	q.fieldMap["inclusive_language_score"] = q.InclusiveLanguageScore
}

func (q qeyKryWEyoastIndexable) clone(db *gorm.DB) qeyKryWEyoastIndexable {
	q.qeyKryWEyoastIndexableDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEyoastIndexable) replaceDB(db *gorm.DB) qeyKryWEyoastIndexable {
	q.qeyKryWEyoastIndexableDo.ReplaceDB(db)
	return q
}

type qeyKryWEyoastIndexableDo struct{ gen.DO }

type IQeyKryWEyoastIndexableDo interface {
	gen.SubQuery
	Debug() IQeyKryWEyoastIndexableDo
	WithContext(ctx context.Context) IQeyKryWEyoastIndexableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEyoastIndexableDo
	WriteDB() IQeyKryWEyoastIndexableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEyoastIndexableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEyoastIndexableDo
	Not(conds ...gen.Condition) IQeyKryWEyoastIndexableDo
	Or(conds ...gen.Condition) IQeyKryWEyoastIndexableDo
	Select(conds ...field.Expr) IQeyKryWEyoastIndexableDo
	Where(conds ...gen.Condition) IQeyKryWEyoastIndexableDo
	Order(conds ...field.Expr) IQeyKryWEyoastIndexableDo
	Distinct(cols ...field.Expr) IQeyKryWEyoastIndexableDo
	Omit(cols ...field.Expr) IQeyKryWEyoastIndexableDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableDo
	Group(cols ...field.Expr) IQeyKryWEyoastIndexableDo
	Having(conds ...gen.Condition) IQeyKryWEyoastIndexableDo
	Limit(limit int) IQeyKryWEyoastIndexableDo
	Offset(offset int) IQeyKryWEyoastIndexableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastIndexableDo
	Unscoped() IQeyKryWEyoastIndexableDo
	Create(values ...*model.QeyKryWEyoastIndexable) error
	CreateInBatches(values []*model.QeyKryWEyoastIndexable, batchSize int) error
	Save(values ...*model.QeyKryWEyoastIndexable) error
	First() (*model.QeyKryWEyoastIndexable, error)
	Take() (*model.QeyKryWEyoastIndexable, error)
	Last() (*model.QeyKryWEyoastIndexable, error)
	Find() ([]*model.QeyKryWEyoastIndexable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastIndexable, err error)
	FindInBatches(result *[]*model.QeyKryWEyoastIndexable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEyoastIndexable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableDo
	Joins(fields ...field.RelationField) IQeyKryWEyoastIndexableDo
	Preload(fields ...field.RelationField) IQeyKryWEyoastIndexableDo
	FirstOrInit() (*model.QeyKryWEyoastIndexable, error)
	FirstOrCreate() (*model.QeyKryWEyoastIndexable, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastIndexable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEyoastIndexableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEyoastIndexableDo) Debug() IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEyoastIndexableDo) WithContext(ctx context.Context) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEyoastIndexableDo) ReadDB() IQeyKryWEyoastIndexableDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEyoastIndexableDo) WriteDB() IQeyKryWEyoastIndexableDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEyoastIndexableDo) Session(config *gorm.Session) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEyoastIndexableDo) Clauses(conds ...clause.Expression) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEyoastIndexableDo) Returning(value interface{}, columns ...string) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEyoastIndexableDo) Not(conds ...gen.Condition) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEyoastIndexableDo) Or(conds ...gen.Condition) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEyoastIndexableDo) Select(conds ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEyoastIndexableDo) Where(conds ...gen.Condition) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEyoastIndexableDo) Order(conds ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEyoastIndexableDo) Distinct(cols ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEyoastIndexableDo) Omit(cols ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEyoastIndexableDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEyoastIndexableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEyoastIndexableDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEyoastIndexableDo) Group(cols ...field.Expr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEyoastIndexableDo) Having(conds ...gen.Condition) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEyoastIndexableDo) Limit(limit int) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEyoastIndexableDo) Offset(offset int) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEyoastIndexableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEyoastIndexableDo) Unscoped() IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEyoastIndexableDo) Create(values ...*model.QeyKryWEyoastIndexable) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEyoastIndexableDo) CreateInBatches(values []*model.QeyKryWEyoastIndexable, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEyoastIndexableDo) Save(values ...*model.QeyKryWEyoastIndexable) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEyoastIndexableDo) First() (*model.QeyKryWEyoastIndexable, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexable), nil
	}
}

func (q qeyKryWEyoastIndexableDo) Take() (*model.QeyKryWEyoastIndexable, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexable), nil
	}
}

func (q qeyKryWEyoastIndexableDo) Last() (*model.QeyKryWEyoastIndexable, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexable), nil
	}
}

func (q qeyKryWEyoastIndexableDo) Find() ([]*model.QeyKryWEyoastIndexable, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEyoastIndexable), err
}

func (q qeyKryWEyoastIndexableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastIndexable, err error) {
	buf := make([]*model.QeyKryWEyoastIndexable, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEyoastIndexableDo) FindInBatches(result *[]*model.QeyKryWEyoastIndexable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEyoastIndexableDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEyoastIndexableDo) Assign(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEyoastIndexableDo) Joins(fields ...field.RelationField) IQeyKryWEyoastIndexableDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEyoastIndexableDo) Preload(fields ...field.RelationField) IQeyKryWEyoastIndexableDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEyoastIndexableDo) FirstOrInit() (*model.QeyKryWEyoastIndexable, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexable), nil
	}
}

func (q qeyKryWEyoastIndexableDo) FirstOrCreate() (*model.QeyKryWEyoastIndexable, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexable), nil
	}
}

func (q qeyKryWEyoastIndexableDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastIndexable, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEyoastIndexableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEyoastIndexableDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEyoastIndexableDo) Delete(models ...*model.QeyKryWEyoastIndexable) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEyoastIndexableDo) withDO(do gen.Dao) *qeyKryWEyoastIndexableDo {
	q.DO = *do.(*gen.DO)
	return q
}
