// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEtermRelationship(db *gorm.DB, opts ...gen.DOOption) qeyKryWEtermRelationship {
	_qeyKryWEtermRelationship := qeyKryWEtermRelationship{}

	_qeyKryWEtermRelationship.qeyKryWEtermRelationshipDo.UseDB(db, opts...)
	_qeyKryWEtermRelationship.qeyKryWEtermRelationshipDo.UseModel(&model.QeyKryWEtermRelationship{})

	tableName := _qeyKryWEtermRelationship.qeyKryWEtermRelationshipDo.TableName()
	_qeyKryWEtermRelationship.ALL = field.NewAsterisk(tableName)
	_qeyKryWEtermRelationship.ObjectID = field.NewInt64(tableName, "object_id")
	_qeyKryWEtermRelationship.TermTaxonomyID = field.NewInt64(tableName, "term_taxonomy_id")
	_qeyKryWEtermRelationship.TermOrder = field.NewInt32(tableName, "term_order")

	_qeyKryWEtermRelationship.fillFieldMap()

	return _qeyKryWEtermRelationship
}

type qeyKryWEtermRelationship struct {
	qeyKryWEtermRelationshipDo

	ALL            field.Asterisk
	ObjectID       field.Int64
	TermTaxonomyID field.Int64
	TermOrder      field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEtermRelationship) Table(newTableName string) *qeyKryWEtermRelationship {
	q.qeyKryWEtermRelationshipDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEtermRelationship) As(alias string) *qeyKryWEtermRelationship {
	q.qeyKryWEtermRelationshipDo.DO = *(q.qeyKryWEtermRelationshipDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEtermRelationship) updateTableName(table string) *qeyKryWEtermRelationship {
	q.ALL = field.NewAsterisk(table)
	q.ObjectID = field.NewInt64(table, "object_id")
	q.TermTaxonomyID = field.NewInt64(table, "term_taxonomy_id")
	q.TermOrder = field.NewInt32(table, "term_order")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEtermRelationship) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEtermRelationship) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["object_id"] = q.ObjectID
	q.fieldMap["term_taxonomy_id"] = q.TermTaxonomyID
	q.fieldMap["term_order"] = q.TermOrder
}

func (q qeyKryWEtermRelationship) clone(db *gorm.DB) qeyKryWEtermRelationship {
	q.qeyKryWEtermRelationshipDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEtermRelationship) replaceDB(db *gorm.DB) qeyKryWEtermRelationship {
	q.qeyKryWEtermRelationshipDo.ReplaceDB(db)
	return q
}

type qeyKryWEtermRelationshipDo struct{ gen.DO }

type IQeyKryWEtermRelationshipDo interface {
	gen.SubQuery
	Debug() IQeyKryWEtermRelationshipDo
	WithContext(ctx context.Context) IQeyKryWEtermRelationshipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEtermRelationshipDo
	WriteDB() IQeyKryWEtermRelationshipDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEtermRelationshipDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEtermRelationshipDo
	Not(conds ...gen.Condition) IQeyKryWEtermRelationshipDo
	Or(conds ...gen.Condition) IQeyKryWEtermRelationshipDo
	Select(conds ...field.Expr) IQeyKryWEtermRelationshipDo
	Where(conds ...gen.Condition) IQeyKryWEtermRelationshipDo
	Order(conds ...field.Expr) IQeyKryWEtermRelationshipDo
	Distinct(cols ...field.Expr) IQeyKryWEtermRelationshipDo
	Omit(cols ...field.Expr) IQeyKryWEtermRelationshipDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermRelationshipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermRelationshipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermRelationshipDo
	Group(cols ...field.Expr) IQeyKryWEtermRelationshipDo
	Having(conds ...gen.Condition) IQeyKryWEtermRelationshipDo
	Limit(limit int) IQeyKryWEtermRelationshipDo
	Offset(offset int) IQeyKryWEtermRelationshipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermRelationshipDo
	Unscoped() IQeyKryWEtermRelationshipDo
	Create(values ...*model.QeyKryWEtermRelationship) error
	CreateInBatches(values []*model.QeyKryWEtermRelationship, batchSize int) error
	Save(values ...*model.QeyKryWEtermRelationship) error
	First() (*model.QeyKryWEtermRelationship, error)
	Take() (*model.QeyKryWEtermRelationship, error)
	Last() (*model.QeyKryWEtermRelationship, error)
	Find() ([]*model.QeyKryWEtermRelationship, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEtermRelationship, err error)
	FindInBatches(result *[]*model.QeyKryWEtermRelationship, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEtermRelationship) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEtermRelationshipDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEtermRelationshipDo
	Joins(fields ...field.RelationField) IQeyKryWEtermRelationshipDo
	Preload(fields ...field.RelationField) IQeyKryWEtermRelationshipDo
	FirstOrInit() (*model.QeyKryWEtermRelationship, error)
	FirstOrCreate() (*model.QeyKryWEtermRelationship, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEtermRelationship, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEtermRelationshipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEtermRelationshipDo) Debug() IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEtermRelationshipDo) WithContext(ctx context.Context) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEtermRelationshipDo) ReadDB() IQeyKryWEtermRelationshipDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEtermRelationshipDo) WriteDB() IQeyKryWEtermRelationshipDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEtermRelationshipDo) Session(config *gorm.Session) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEtermRelationshipDo) Clauses(conds ...clause.Expression) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEtermRelationshipDo) Returning(value interface{}, columns ...string) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEtermRelationshipDo) Not(conds ...gen.Condition) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEtermRelationshipDo) Or(conds ...gen.Condition) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEtermRelationshipDo) Select(conds ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEtermRelationshipDo) Where(conds ...gen.Condition) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEtermRelationshipDo) Order(conds ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEtermRelationshipDo) Distinct(cols ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEtermRelationshipDo) Omit(cols ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEtermRelationshipDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEtermRelationshipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEtermRelationshipDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEtermRelationshipDo) Group(cols ...field.Expr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEtermRelationshipDo) Having(conds ...gen.Condition) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEtermRelationshipDo) Limit(limit int) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEtermRelationshipDo) Offset(offset int) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEtermRelationshipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEtermRelationshipDo) Unscoped() IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEtermRelationshipDo) Create(values ...*model.QeyKryWEtermRelationship) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEtermRelationshipDo) CreateInBatches(values []*model.QeyKryWEtermRelationship, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEtermRelationshipDo) Save(values ...*model.QeyKryWEtermRelationship) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEtermRelationshipDo) First() (*model.QeyKryWEtermRelationship, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermRelationship), nil
	}
}

func (q qeyKryWEtermRelationshipDo) Take() (*model.QeyKryWEtermRelationship, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermRelationship), nil
	}
}

func (q qeyKryWEtermRelationshipDo) Last() (*model.QeyKryWEtermRelationship, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermRelationship), nil
	}
}

func (q qeyKryWEtermRelationshipDo) Find() ([]*model.QeyKryWEtermRelationship, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEtermRelationship), err
}

func (q qeyKryWEtermRelationshipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEtermRelationship, err error) {
	buf := make([]*model.QeyKryWEtermRelationship, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEtermRelationshipDo) FindInBatches(result *[]*model.QeyKryWEtermRelationship, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEtermRelationshipDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEtermRelationshipDo) Assign(attrs ...field.AssignExpr) IQeyKryWEtermRelationshipDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEtermRelationshipDo) Joins(fields ...field.RelationField) IQeyKryWEtermRelationshipDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEtermRelationshipDo) Preload(fields ...field.RelationField) IQeyKryWEtermRelationshipDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEtermRelationshipDo) FirstOrInit() (*model.QeyKryWEtermRelationship, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermRelationship), nil
	}
}

func (q qeyKryWEtermRelationshipDo) FirstOrCreate() (*model.QeyKryWEtermRelationship, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermRelationship), nil
	}
}

func (q qeyKryWEtermRelationshipDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEtermRelationship, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEtermRelationshipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEtermRelationshipDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEtermRelationshipDo) Delete(models ...*model.QeyKryWEtermRelationship) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEtermRelationshipDo) withDO(do gen.Dao) *qeyKryWEtermRelationshipDo {
	q.DO = *do.(*gen.DO)
	return q
}
