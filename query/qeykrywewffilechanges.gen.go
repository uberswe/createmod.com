// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwffilechange(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwffilechange {
	_qeyKryWEwffilechange := qeyKryWEwffilechange{}

	_qeyKryWEwffilechange.qeyKryWEwffilechangeDo.UseDB(db, opts...)
	_qeyKryWEwffilechange.qeyKryWEwffilechangeDo.UseModel(&model.QeyKryWEwffilechange{})

	tableName := _qeyKryWEwffilechange.qeyKryWEwffilechangeDo.TableName()
	_qeyKryWEwffilechange.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwffilechange.FilenameHash = field.NewString(tableName, "filenameHash")
	_qeyKryWEwffilechange.File = field.NewString(tableName, "file")
	_qeyKryWEwffilechange.Md5 = field.NewString(tableName, "md5")

	_qeyKryWEwffilechange.fillFieldMap()

	return _qeyKryWEwffilechange
}

type qeyKryWEwffilechange struct {
	qeyKryWEwffilechangeDo

	ALL          field.Asterisk
	FilenameHash field.String
	File         field.String
	Md5          field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwffilechange) Table(newTableName string) *qeyKryWEwffilechange {
	q.qeyKryWEwffilechangeDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwffilechange) As(alias string) *qeyKryWEwffilechange {
	q.qeyKryWEwffilechangeDo.DO = *(q.qeyKryWEwffilechangeDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwffilechange) updateTableName(table string) *qeyKryWEwffilechange {
	q.ALL = field.NewAsterisk(table)
	q.FilenameHash = field.NewString(table, "filenameHash")
	q.File = field.NewString(table, "file")
	q.Md5 = field.NewString(table, "md5")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwffilechange) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwffilechange) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["filenameHash"] = q.FilenameHash
	q.fieldMap["file"] = q.File
	q.fieldMap["md5"] = q.Md5
}

func (q qeyKryWEwffilechange) clone(db *gorm.DB) qeyKryWEwffilechange {
	q.qeyKryWEwffilechangeDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwffilechange) replaceDB(db *gorm.DB) qeyKryWEwffilechange {
	q.qeyKryWEwffilechangeDo.ReplaceDB(db)
	return q
}

type qeyKryWEwffilechangeDo struct{ gen.DO }

type IQeyKryWEwffilechangeDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwffilechangeDo
	WithContext(ctx context.Context) IQeyKryWEwffilechangeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwffilechangeDo
	WriteDB() IQeyKryWEwffilechangeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwffilechangeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwffilechangeDo
	Not(conds ...gen.Condition) IQeyKryWEwffilechangeDo
	Or(conds ...gen.Condition) IQeyKryWEwffilechangeDo
	Select(conds ...field.Expr) IQeyKryWEwffilechangeDo
	Where(conds ...gen.Condition) IQeyKryWEwffilechangeDo
	Order(conds ...field.Expr) IQeyKryWEwffilechangeDo
	Distinct(cols ...field.Expr) IQeyKryWEwffilechangeDo
	Omit(cols ...field.Expr) IQeyKryWEwffilechangeDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilechangeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilechangeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilechangeDo
	Group(cols ...field.Expr) IQeyKryWEwffilechangeDo
	Having(conds ...gen.Condition) IQeyKryWEwffilechangeDo
	Limit(limit int) IQeyKryWEwffilechangeDo
	Offset(offset int) IQeyKryWEwffilechangeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwffilechangeDo
	Unscoped() IQeyKryWEwffilechangeDo
	Create(values ...*model.QeyKryWEwffilechange) error
	CreateInBatches(values []*model.QeyKryWEwffilechange, batchSize int) error
	Save(values ...*model.QeyKryWEwffilechange) error
	First() (*model.QeyKryWEwffilechange, error)
	Take() (*model.QeyKryWEwffilechange, error)
	Last() (*model.QeyKryWEwffilechange, error)
	Find() ([]*model.QeyKryWEwffilechange, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwffilechange, err error)
	FindInBatches(result *[]*model.QeyKryWEwffilechange, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwffilechange) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwffilechangeDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwffilechangeDo
	Joins(fields ...field.RelationField) IQeyKryWEwffilechangeDo
	Preload(fields ...field.RelationField) IQeyKryWEwffilechangeDo
	FirstOrInit() (*model.QeyKryWEwffilechange, error)
	FirstOrCreate() (*model.QeyKryWEwffilechange, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwffilechange, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwffilechangeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwffilechangeDo) Debug() IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwffilechangeDo) WithContext(ctx context.Context) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwffilechangeDo) ReadDB() IQeyKryWEwffilechangeDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwffilechangeDo) WriteDB() IQeyKryWEwffilechangeDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwffilechangeDo) Session(config *gorm.Session) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwffilechangeDo) Clauses(conds ...clause.Expression) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwffilechangeDo) Returning(value interface{}, columns ...string) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwffilechangeDo) Not(conds ...gen.Condition) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwffilechangeDo) Or(conds ...gen.Condition) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwffilechangeDo) Select(conds ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwffilechangeDo) Where(conds ...gen.Condition) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwffilechangeDo) Order(conds ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwffilechangeDo) Distinct(cols ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwffilechangeDo) Omit(cols ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwffilechangeDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwffilechangeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwffilechangeDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwffilechangeDo) Group(cols ...field.Expr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwffilechangeDo) Having(conds ...gen.Condition) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwffilechangeDo) Limit(limit int) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwffilechangeDo) Offset(offset int) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwffilechangeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwffilechangeDo) Unscoped() IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwffilechangeDo) Create(values ...*model.QeyKryWEwffilechange) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwffilechangeDo) CreateInBatches(values []*model.QeyKryWEwffilechange, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwffilechangeDo) Save(values ...*model.QeyKryWEwffilechange) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwffilechangeDo) First() (*model.QeyKryWEwffilechange, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilechange), nil
	}
}

func (q qeyKryWEwffilechangeDo) Take() (*model.QeyKryWEwffilechange, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilechange), nil
	}
}

func (q qeyKryWEwffilechangeDo) Last() (*model.QeyKryWEwffilechange, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilechange), nil
	}
}

func (q qeyKryWEwffilechangeDo) Find() ([]*model.QeyKryWEwffilechange, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwffilechange), err
}

func (q qeyKryWEwffilechangeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwffilechange, err error) {
	buf := make([]*model.QeyKryWEwffilechange, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwffilechangeDo) FindInBatches(result *[]*model.QeyKryWEwffilechange, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwffilechangeDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwffilechangeDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwffilechangeDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwffilechangeDo) Joins(fields ...field.RelationField) IQeyKryWEwffilechangeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwffilechangeDo) Preload(fields ...field.RelationField) IQeyKryWEwffilechangeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwffilechangeDo) FirstOrInit() (*model.QeyKryWEwffilechange, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilechange), nil
	}
}

func (q qeyKryWEwffilechangeDo) FirstOrCreate() (*model.QeyKryWEwffilechange, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilechange), nil
	}
}

func (q qeyKryWEwffilechangeDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwffilechange, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwffilechangeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwffilechangeDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwffilechangeDo) Delete(models ...*model.QeyKryWEwffilechange) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwffilechangeDo) withDO(do gen.Dao) *qeyKryWEwffilechangeDo {
	q.DO = *do.(*gen.DO)
	return q
}
