// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwpacReactionsSystem(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwpacReactionsSystem {
	_qeyKryWEwpacReactionsSystem := qeyKryWEwpacReactionsSystem{}

	_qeyKryWEwpacReactionsSystem.qeyKryWEwpacReactionsSystemDo.UseDB(db, opts...)
	_qeyKryWEwpacReactionsSystem.qeyKryWEwpacReactionsSystemDo.UseModel(&model.QeyKryWEwpacReactionsSystem{})

	tableName := _qeyKryWEwpacReactionsSystem.qeyKryWEwpacReactionsSystemDo.TableName()
	_qeyKryWEwpacReactionsSystem.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwpacReactionsSystem.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwpacReactionsSystem.UserID = field.NewInt32(tableName, "user_id")
	_qeyKryWEwpacReactionsSystem.PostID = field.NewInt32(tableName, "post_id")
	_qeyKryWEwpacReactionsSystem.ReactionID = field.NewInt32(tableName, "reaction_id")
	_qeyKryWEwpacReactionsSystem.CookieID = field.NewInt32(tableName, "cookie_id")
	_qeyKryWEwpacReactionsSystem.UserIP = field.NewString(tableName, "user_ip")
	_qeyKryWEwpacReactionsSystem.Time = field.NewTime(tableName, "time")

	_qeyKryWEwpacReactionsSystem.fillFieldMap()

	return _qeyKryWEwpacReactionsSystem
}

type qeyKryWEwpacReactionsSystem struct {
	qeyKryWEwpacReactionsSystemDo

	ALL        field.Asterisk
	ID         field.Int32
	UserID     field.Int32
	PostID     field.Int32
	ReactionID field.Int32
	CookieID   field.Int32
	UserIP     field.String
	Time       field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwpacReactionsSystem) Table(newTableName string) *qeyKryWEwpacReactionsSystem {
	q.qeyKryWEwpacReactionsSystemDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwpacReactionsSystem) As(alias string) *qeyKryWEwpacReactionsSystem {
	q.qeyKryWEwpacReactionsSystemDo.DO = *(q.qeyKryWEwpacReactionsSystemDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwpacReactionsSystem) updateTableName(table string) *qeyKryWEwpacReactionsSystem {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.UserID = field.NewInt32(table, "user_id")
	q.PostID = field.NewInt32(table, "post_id")
	q.ReactionID = field.NewInt32(table, "reaction_id")
	q.CookieID = field.NewInt32(table, "cookie_id")
	q.UserIP = field.NewString(table, "user_ip")
	q.Time = field.NewTime(table, "time")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwpacReactionsSystem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwpacReactionsSystem) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["reaction_id"] = q.ReactionID
	q.fieldMap["cookie_id"] = q.CookieID
	q.fieldMap["user_ip"] = q.UserIP
	q.fieldMap["time"] = q.Time
}

func (q qeyKryWEwpacReactionsSystem) clone(db *gorm.DB) qeyKryWEwpacReactionsSystem {
	q.qeyKryWEwpacReactionsSystemDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwpacReactionsSystem) replaceDB(db *gorm.DB) qeyKryWEwpacReactionsSystem {
	q.qeyKryWEwpacReactionsSystemDo.ReplaceDB(db)
	return q
}

type qeyKryWEwpacReactionsSystemDo struct{ gen.DO }

type IQeyKryWEwpacReactionsSystemDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwpacReactionsSystemDo
	WithContext(ctx context.Context) IQeyKryWEwpacReactionsSystemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwpacReactionsSystemDo
	WriteDB() IQeyKryWEwpacReactionsSystemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwpacReactionsSystemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwpacReactionsSystemDo
	Not(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo
	Or(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo
	Select(conds ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	Where(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo
	Order(conds ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	Distinct(cols ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	Omit(cols ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	Group(cols ...field.Expr) IQeyKryWEwpacReactionsSystemDo
	Having(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo
	Limit(limit int) IQeyKryWEwpacReactionsSystemDo
	Offset(offset int) IQeyKryWEwpacReactionsSystemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpacReactionsSystemDo
	Unscoped() IQeyKryWEwpacReactionsSystemDo
	Create(values ...*model.QeyKryWEwpacReactionsSystem) error
	CreateInBatches(values []*model.QeyKryWEwpacReactionsSystem, batchSize int) error
	Save(values ...*model.QeyKryWEwpacReactionsSystem) error
	First() (*model.QeyKryWEwpacReactionsSystem, error)
	Take() (*model.QeyKryWEwpacReactionsSystem, error)
	Last() (*model.QeyKryWEwpacReactionsSystem, error)
	Find() ([]*model.QeyKryWEwpacReactionsSystem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpacReactionsSystem, err error)
	FindInBatches(result *[]*model.QeyKryWEwpacReactionsSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwpacReactionsSystem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwpacReactionsSystemDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwpacReactionsSystemDo
	Joins(fields ...field.RelationField) IQeyKryWEwpacReactionsSystemDo
	Preload(fields ...field.RelationField) IQeyKryWEwpacReactionsSystemDo
	FirstOrInit() (*model.QeyKryWEwpacReactionsSystem, error)
	FirstOrCreate() (*model.QeyKryWEwpacReactionsSystem, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwpacReactionsSystem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwpacReactionsSystemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwpacReactionsSystemDo) Debug() IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwpacReactionsSystemDo) WithContext(ctx context.Context) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwpacReactionsSystemDo) ReadDB() IQeyKryWEwpacReactionsSystemDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwpacReactionsSystemDo) WriteDB() IQeyKryWEwpacReactionsSystemDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwpacReactionsSystemDo) Session(config *gorm.Session) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwpacReactionsSystemDo) Clauses(conds ...clause.Expression) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Returning(value interface{}, columns ...string) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwpacReactionsSystemDo) Not(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Or(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Select(conds ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Where(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Order(conds ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Distinct(cols ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwpacReactionsSystemDo) Omit(cols ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwpacReactionsSystemDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwpacReactionsSystemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwpacReactionsSystemDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwpacReactionsSystemDo) Group(cols ...field.Expr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwpacReactionsSystemDo) Having(conds ...gen.Condition) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwpacReactionsSystemDo) Limit(limit int) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwpacReactionsSystemDo) Offset(offset int) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwpacReactionsSystemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwpacReactionsSystemDo) Unscoped() IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwpacReactionsSystemDo) Create(values ...*model.QeyKryWEwpacReactionsSystem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwpacReactionsSystemDo) CreateInBatches(values []*model.QeyKryWEwpacReactionsSystem, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwpacReactionsSystemDo) Save(values ...*model.QeyKryWEwpacReactionsSystem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwpacReactionsSystemDo) First() (*model.QeyKryWEwpacReactionsSystem, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacReactionsSystem), nil
	}
}

func (q qeyKryWEwpacReactionsSystemDo) Take() (*model.QeyKryWEwpacReactionsSystem, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacReactionsSystem), nil
	}
}

func (q qeyKryWEwpacReactionsSystemDo) Last() (*model.QeyKryWEwpacReactionsSystem, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacReactionsSystem), nil
	}
}

func (q qeyKryWEwpacReactionsSystemDo) Find() ([]*model.QeyKryWEwpacReactionsSystem, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwpacReactionsSystem), err
}

func (q qeyKryWEwpacReactionsSystemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpacReactionsSystem, err error) {
	buf := make([]*model.QeyKryWEwpacReactionsSystem, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwpacReactionsSystemDo) FindInBatches(result *[]*model.QeyKryWEwpacReactionsSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwpacReactionsSystemDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwpacReactionsSystemDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwpacReactionsSystemDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwpacReactionsSystemDo) Joins(fields ...field.RelationField) IQeyKryWEwpacReactionsSystemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwpacReactionsSystemDo) Preload(fields ...field.RelationField) IQeyKryWEwpacReactionsSystemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwpacReactionsSystemDo) FirstOrInit() (*model.QeyKryWEwpacReactionsSystem, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacReactionsSystem), nil
	}
}

func (q qeyKryWEwpacReactionsSystemDo) FirstOrCreate() (*model.QeyKryWEwpacReactionsSystem, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacReactionsSystem), nil
	}
}

func (q qeyKryWEwpacReactionsSystemDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwpacReactionsSystem, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwpacReactionsSystemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwpacReactionsSystemDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwpacReactionsSystemDo) Delete(models ...*model.QeyKryWEwpacReactionsSystem) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwpacReactionsSystemDo) withDO(do gen.Dao) *qeyKryWEwpacReactionsSystemDo {
	q.DO = *do.(*gen.DO)
	return q
}
