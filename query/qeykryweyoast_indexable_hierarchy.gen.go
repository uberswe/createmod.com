// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEyoastIndexableHierarchy(db *gorm.DB, opts ...gen.DOOption) qeyKryWEyoastIndexableHierarchy {
	_qeyKryWEyoastIndexableHierarchy := qeyKryWEyoastIndexableHierarchy{}

	_qeyKryWEyoastIndexableHierarchy.qeyKryWEyoastIndexableHierarchyDo.UseDB(db, opts...)
	_qeyKryWEyoastIndexableHierarchy.qeyKryWEyoastIndexableHierarchyDo.UseModel(&model.QeyKryWEyoastIndexableHierarchy{})

	tableName := _qeyKryWEyoastIndexableHierarchy.qeyKryWEyoastIndexableHierarchyDo.TableName()
	_qeyKryWEyoastIndexableHierarchy.ALL = field.NewAsterisk(tableName)
	_qeyKryWEyoastIndexableHierarchy.IndexableID = field.NewInt32(tableName, "indexable_id")
	_qeyKryWEyoastIndexableHierarchy.AncestorID = field.NewInt32(tableName, "ancestor_id")
	_qeyKryWEyoastIndexableHierarchy.Depth = field.NewInt32(tableName, "depth")
	_qeyKryWEyoastIndexableHierarchy.BlogID = field.NewInt64(tableName, "blog_id")

	_qeyKryWEyoastIndexableHierarchy.fillFieldMap()

	return _qeyKryWEyoastIndexableHierarchy
}

type qeyKryWEyoastIndexableHierarchy struct {
	qeyKryWEyoastIndexableHierarchyDo

	ALL         field.Asterisk
	IndexableID field.Int32
	AncestorID  field.Int32
	Depth       field.Int32
	BlogID      field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEyoastIndexableHierarchy) Table(newTableName string) *qeyKryWEyoastIndexableHierarchy {
	q.qeyKryWEyoastIndexableHierarchyDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEyoastIndexableHierarchy) As(alias string) *qeyKryWEyoastIndexableHierarchy {
	q.qeyKryWEyoastIndexableHierarchyDo.DO = *(q.qeyKryWEyoastIndexableHierarchyDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEyoastIndexableHierarchy) updateTableName(table string) *qeyKryWEyoastIndexableHierarchy {
	q.ALL = field.NewAsterisk(table)
	q.IndexableID = field.NewInt32(table, "indexable_id")
	q.AncestorID = field.NewInt32(table, "ancestor_id")
	q.Depth = field.NewInt32(table, "depth")
	q.BlogID = field.NewInt64(table, "blog_id")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEyoastIndexableHierarchy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEyoastIndexableHierarchy) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["indexable_id"] = q.IndexableID
	q.fieldMap["ancestor_id"] = q.AncestorID
	q.fieldMap["depth"] = q.Depth
	q.fieldMap["blog_id"] = q.BlogID
}

func (q qeyKryWEyoastIndexableHierarchy) clone(db *gorm.DB) qeyKryWEyoastIndexableHierarchy {
	q.qeyKryWEyoastIndexableHierarchyDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEyoastIndexableHierarchy) replaceDB(db *gorm.DB) qeyKryWEyoastIndexableHierarchy {
	q.qeyKryWEyoastIndexableHierarchyDo.ReplaceDB(db)
	return q
}

type qeyKryWEyoastIndexableHierarchyDo struct{ gen.DO }

type IQeyKryWEyoastIndexableHierarchyDo interface {
	gen.SubQuery
	Debug() IQeyKryWEyoastIndexableHierarchyDo
	WithContext(ctx context.Context) IQeyKryWEyoastIndexableHierarchyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEyoastIndexableHierarchyDo
	WriteDB() IQeyKryWEyoastIndexableHierarchyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEyoastIndexableHierarchyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEyoastIndexableHierarchyDo
	Not(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo
	Or(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo
	Select(conds ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	Where(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo
	Order(conds ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	Distinct(cols ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	Omit(cols ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	Group(cols ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo
	Having(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo
	Limit(limit int) IQeyKryWEyoastIndexableHierarchyDo
	Offset(offset int) IQeyKryWEyoastIndexableHierarchyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastIndexableHierarchyDo
	Unscoped() IQeyKryWEyoastIndexableHierarchyDo
	Create(values ...*model.QeyKryWEyoastIndexableHierarchy) error
	CreateInBatches(values []*model.QeyKryWEyoastIndexableHierarchy, batchSize int) error
	Save(values ...*model.QeyKryWEyoastIndexableHierarchy) error
	First() (*model.QeyKryWEyoastIndexableHierarchy, error)
	Take() (*model.QeyKryWEyoastIndexableHierarchy, error)
	Last() (*model.QeyKryWEyoastIndexableHierarchy, error)
	Find() ([]*model.QeyKryWEyoastIndexableHierarchy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastIndexableHierarchy, err error)
	FindInBatches(result *[]*model.QeyKryWEyoastIndexableHierarchy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEyoastIndexableHierarchy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableHierarchyDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableHierarchyDo
	Joins(fields ...field.RelationField) IQeyKryWEyoastIndexableHierarchyDo
	Preload(fields ...field.RelationField) IQeyKryWEyoastIndexableHierarchyDo
	FirstOrInit() (*model.QeyKryWEyoastIndexableHierarchy, error)
	FirstOrCreate() (*model.QeyKryWEyoastIndexableHierarchy, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastIndexableHierarchy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEyoastIndexableHierarchyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEyoastIndexableHierarchyDo) Debug() IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEyoastIndexableHierarchyDo) WithContext(ctx context.Context) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEyoastIndexableHierarchyDo) ReadDB() IQeyKryWEyoastIndexableHierarchyDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEyoastIndexableHierarchyDo) WriteDB() IQeyKryWEyoastIndexableHierarchyDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEyoastIndexableHierarchyDo) Session(config *gorm.Session) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Clauses(conds ...clause.Expression) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Returning(value interface{}, columns ...string) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Not(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Or(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Select(conds ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Where(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Order(conds ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Distinct(cols ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Omit(cols ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Group(cols ...field.Expr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Having(conds ...gen.Condition) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Limit(limit int) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Offset(offset int) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Unscoped() IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEyoastIndexableHierarchyDo) Create(values ...*model.QeyKryWEyoastIndexableHierarchy) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEyoastIndexableHierarchyDo) CreateInBatches(values []*model.QeyKryWEyoastIndexableHierarchy, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEyoastIndexableHierarchyDo) Save(values ...*model.QeyKryWEyoastIndexableHierarchy) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEyoastIndexableHierarchyDo) First() (*model.QeyKryWEyoastIndexableHierarchy, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexableHierarchy), nil
	}
}

func (q qeyKryWEyoastIndexableHierarchyDo) Take() (*model.QeyKryWEyoastIndexableHierarchy, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexableHierarchy), nil
	}
}

func (q qeyKryWEyoastIndexableHierarchyDo) Last() (*model.QeyKryWEyoastIndexableHierarchy, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexableHierarchy), nil
	}
}

func (q qeyKryWEyoastIndexableHierarchyDo) Find() ([]*model.QeyKryWEyoastIndexableHierarchy, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEyoastIndexableHierarchy), err
}

func (q qeyKryWEyoastIndexableHierarchyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastIndexableHierarchy, err error) {
	buf := make([]*model.QeyKryWEyoastIndexableHierarchy, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEyoastIndexableHierarchyDo) FindInBatches(result *[]*model.QeyKryWEyoastIndexableHierarchy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEyoastIndexableHierarchyDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Assign(attrs ...field.AssignExpr) IQeyKryWEyoastIndexableHierarchyDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEyoastIndexableHierarchyDo) Joins(fields ...field.RelationField) IQeyKryWEyoastIndexableHierarchyDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEyoastIndexableHierarchyDo) Preload(fields ...field.RelationField) IQeyKryWEyoastIndexableHierarchyDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEyoastIndexableHierarchyDo) FirstOrInit() (*model.QeyKryWEyoastIndexableHierarchy, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexableHierarchy), nil
	}
}

func (q qeyKryWEyoastIndexableHierarchyDo) FirstOrCreate() (*model.QeyKryWEyoastIndexableHierarchy, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastIndexableHierarchy), nil
	}
}

func (q qeyKryWEyoastIndexableHierarchyDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastIndexableHierarchy, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEyoastIndexableHierarchyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEyoastIndexableHierarchyDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEyoastIndexableHierarchyDo) Delete(models ...*model.QeyKryWEyoastIndexableHierarchy) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEyoastIndexableHierarchyDo) withDO(do gen.Dao) *qeyKryWEyoastIndexableHierarchyDo {
	q.DO = *do.(*gen.DO)
	return q
}
