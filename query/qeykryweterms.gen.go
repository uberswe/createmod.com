// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEterm(db *gorm.DB, opts ...gen.DOOption) qeyKryWEterm {
	_qeyKryWEterm := qeyKryWEterm{}

	_qeyKryWEterm.qeyKryWEtermDo.UseDB(db, opts...)
	_qeyKryWEterm.qeyKryWEtermDo.UseModel(&model.QeyKryWEterm{})

	tableName := _qeyKryWEterm.qeyKryWEtermDo.TableName()
	_qeyKryWEterm.ALL = field.NewAsterisk(tableName)
	_qeyKryWEterm.TermID = field.NewInt64(tableName, "term_id")
	_qeyKryWEterm.Name = field.NewString(tableName, "name")
	_qeyKryWEterm.Slug = field.NewString(tableName, "slug")
	_qeyKryWEterm.TermGroup = field.NewInt64(tableName, "term_group")

	_qeyKryWEterm.fillFieldMap()

	return _qeyKryWEterm
}

type qeyKryWEterm struct {
	qeyKryWEtermDo

	ALL       field.Asterisk
	TermID    field.Int64
	Name      field.String
	Slug      field.String
	TermGroup field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEterm) Table(newTableName string) *qeyKryWEterm {
	q.qeyKryWEtermDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEterm) As(alias string) *qeyKryWEterm {
	q.qeyKryWEtermDo.DO = *(q.qeyKryWEtermDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEterm) updateTableName(table string) *qeyKryWEterm {
	q.ALL = field.NewAsterisk(table)
	q.TermID = field.NewInt64(table, "term_id")
	q.Name = field.NewString(table, "name")
	q.Slug = field.NewString(table, "slug")
	q.TermGroup = field.NewInt64(table, "term_group")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEterm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEterm) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["term_id"] = q.TermID
	q.fieldMap["name"] = q.Name
	q.fieldMap["slug"] = q.Slug
	q.fieldMap["term_group"] = q.TermGroup
}

func (q qeyKryWEterm) clone(db *gorm.DB) qeyKryWEterm {
	q.qeyKryWEtermDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEterm) replaceDB(db *gorm.DB) qeyKryWEterm {
	q.qeyKryWEtermDo.ReplaceDB(db)
	return q
}

type qeyKryWEtermDo struct{ gen.DO }

type IQeyKryWEtermDo interface {
	gen.SubQuery
	Debug() IQeyKryWEtermDo
	WithContext(ctx context.Context) IQeyKryWEtermDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEtermDo
	WriteDB() IQeyKryWEtermDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEtermDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEtermDo
	Not(conds ...gen.Condition) IQeyKryWEtermDo
	Or(conds ...gen.Condition) IQeyKryWEtermDo
	Select(conds ...field.Expr) IQeyKryWEtermDo
	Where(conds ...gen.Condition) IQeyKryWEtermDo
	Order(conds ...field.Expr) IQeyKryWEtermDo
	Distinct(cols ...field.Expr) IQeyKryWEtermDo
	Omit(cols ...field.Expr) IQeyKryWEtermDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermDo
	Group(cols ...field.Expr) IQeyKryWEtermDo
	Having(conds ...gen.Condition) IQeyKryWEtermDo
	Limit(limit int) IQeyKryWEtermDo
	Offset(offset int) IQeyKryWEtermDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermDo
	Unscoped() IQeyKryWEtermDo
	Create(values ...*model.QeyKryWEterm) error
	CreateInBatches(values []*model.QeyKryWEterm, batchSize int) error
	Save(values ...*model.QeyKryWEterm) error
	First() (*model.QeyKryWEterm, error)
	Take() (*model.QeyKryWEterm, error)
	Last() (*model.QeyKryWEterm, error)
	Find() ([]*model.QeyKryWEterm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEterm, err error)
	FindInBatches(result *[]*model.QeyKryWEterm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEterm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEtermDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEtermDo
	Joins(fields ...field.RelationField) IQeyKryWEtermDo
	Preload(fields ...field.RelationField) IQeyKryWEtermDo
	FirstOrInit() (*model.QeyKryWEterm, error)
	FirstOrCreate() (*model.QeyKryWEterm, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEterm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEtermDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEtermDo) Debug() IQeyKryWEtermDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEtermDo) WithContext(ctx context.Context) IQeyKryWEtermDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEtermDo) ReadDB() IQeyKryWEtermDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEtermDo) WriteDB() IQeyKryWEtermDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEtermDo) Session(config *gorm.Session) IQeyKryWEtermDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEtermDo) Clauses(conds ...clause.Expression) IQeyKryWEtermDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEtermDo) Returning(value interface{}, columns ...string) IQeyKryWEtermDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEtermDo) Not(conds ...gen.Condition) IQeyKryWEtermDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEtermDo) Or(conds ...gen.Condition) IQeyKryWEtermDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEtermDo) Select(conds ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEtermDo) Where(conds ...gen.Condition) IQeyKryWEtermDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEtermDo) Order(conds ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEtermDo) Distinct(cols ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEtermDo) Omit(cols ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEtermDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEtermDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEtermDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEtermDo) Group(cols ...field.Expr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEtermDo) Having(conds ...gen.Condition) IQeyKryWEtermDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEtermDo) Limit(limit int) IQeyKryWEtermDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEtermDo) Offset(offset int) IQeyKryWEtermDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEtermDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEtermDo) Unscoped() IQeyKryWEtermDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEtermDo) Create(values ...*model.QeyKryWEterm) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEtermDo) CreateInBatches(values []*model.QeyKryWEterm, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEtermDo) Save(values ...*model.QeyKryWEterm) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEtermDo) First() (*model.QeyKryWEterm, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEterm), nil
	}
}

func (q qeyKryWEtermDo) Take() (*model.QeyKryWEterm, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEterm), nil
	}
}

func (q qeyKryWEtermDo) Last() (*model.QeyKryWEterm, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEterm), nil
	}
}

func (q qeyKryWEtermDo) Find() ([]*model.QeyKryWEterm, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEterm), err
}

func (q qeyKryWEtermDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEterm, err error) {
	buf := make([]*model.QeyKryWEterm, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEtermDo) FindInBatches(result *[]*model.QeyKryWEterm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEtermDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEtermDo) Assign(attrs ...field.AssignExpr) IQeyKryWEtermDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEtermDo) Joins(fields ...field.RelationField) IQeyKryWEtermDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEtermDo) Preload(fields ...field.RelationField) IQeyKryWEtermDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEtermDo) FirstOrInit() (*model.QeyKryWEterm, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEterm), nil
	}
}

func (q qeyKryWEtermDo) FirstOrCreate() (*model.QeyKryWEterm, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEterm), nil
	}
}

func (q qeyKryWEtermDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEterm, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEtermDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEtermDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEtermDo) Delete(models ...*model.QeyKryWEterm) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEtermDo) withDO(do gen.Dao) *qeyKryWEtermDo {
	q.DO = *do.(*gen.DO)
	return q
}
