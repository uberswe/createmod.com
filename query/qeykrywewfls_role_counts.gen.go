// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwflsRoleCount(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwflsRoleCount {
	_qeyKryWEwflsRoleCount := qeyKryWEwflsRoleCount{}

	_qeyKryWEwflsRoleCount.qeyKryWEwflsRoleCountDo.UseDB(db, opts...)
	_qeyKryWEwflsRoleCount.qeyKryWEwflsRoleCountDo.UseModel(&model.QeyKryWEwflsRoleCount{})

	tableName := _qeyKryWEwflsRoleCount.qeyKryWEwflsRoleCountDo.TableName()
	_qeyKryWEwflsRoleCount.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwflsRoleCount.SerializedRoles = field.NewBytes(tableName, "serialized_roles")
	_qeyKryWEwflsRoleCount.TwoFactorInactive = field.NewBool(tableName, "two_factor_inactive")
	_qeyKryWEwflsRoleCount.UserCount = field.NewInt64(tableName, "user_count")

	_qeyKryWEwflsRoleCount.fillFieldMap()

	return _qeyKryWEwflsRoleCount
}

type qeyKryWEwflsRoleCount struct {
	qeyKryWEwflsRoleCountDo

	ALL               field.Asterisk
	SerializedRoles   field.Bytes
	TwoFactorInactive field.Bool
	UserCount         field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwflsRoleCount) Table(newTableName string) *qeyKryWEwflsRoleCount {
	q.qeyKryWEwflsRoleCountDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwflsRoleCount) As(alias string) *qeyKryWEwflsRoleCount {
	q.qeyKryWEwflsRoleCountDo.DO = *(q.qeyKryWEwflsRoleCountDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwflsRoleCount) updateTableName(table string) *qeyKryWEwflsRoleCount {
	q.ALL = field.NewAsterisk(table)
	q.SerializedRoles = field.NewBytes(table, "serialized_roles")
	q.TwoFactorInactive = field.NewBool(table, "two_factor_inactive")
	q.UserCount = field.NewInt64(table, "user_count")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwflsRoleCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwflsRoleCount) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["serialized_roles"] = q.SerializedRoles
	q.fieldMap["two_factor_inactive"] = q.TwoFactorInactive
	q.fieldMap["user_count"] = q.UserCount
}

func (q qeyKryWEwflsRoleCount) clone(db *gorm.DB) qeyKryWEwflsRoleCount {
	q.qeyKryWEwflsRoleCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwflsRoleCount) replaceDB(db *gorm.DB) qeyKryWEwflsRoleCount {
	q.qeyKryWEwflsRoleCountDo.ReplaceDB(db)
	return q
}

type qeyKryWEwflsRoleCountDo struct{ gen.DO }

type IQeyKryWEwflsRoleCountDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwflsRoleCountDo
	WithContext(ctx context.Context) IQeyKryWEwflsRoleCountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwflsRoleCountDo
	WriteDB() IQeyKryWEwflsRoleCountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwflsRoleCountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwflsRoleCountDo
	Not(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo
	Or(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo
	Select(conds ...field.Expr) IQeyKryWEwflsRoleCountDo
	Where(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo
	Order(conds ...field.Expr) IQeyKryWEwflsRoleCountDo
	Distinct(cols ...field.Expr) IQeyKryWEwflsRoleCountDo
	Omit(cols ...field.Expr) IQeyKryWEwflsRoleCountDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsRoleCountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsRoleCountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsRoleCountDo
	Group(cols ...field.Expr) IQeyKryWEwflsRoleCountDo
	Having(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo
	Limit(limit int) IQeyKryWEwflsRoleCountDo
	Offset(offset int) IQeyKryWEwflsRoleCountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflsRoleCountDo
	Unscoped() IQeyKryWEwflsRoleCountDo
	Create(values ...*model.QeyKryWEwflsRoleCount) error
	CreateInBatches(values []*model.QeyKryWEwflsRoleCount, batchSize int) error
	Save(values ...*model.QeyKryWEwflsRoleCount) error
	First() (*model.QeyKryWEwflsRoleCount, error)
	Take() (*model.QeyKryWEwflsRoleCount, error)
	Last() (*model.QeyKryWEwflsRoleCount, error)
	Find() ([]*model.QeyKryWEwflsRoleCount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwflsRoleCount, err error)
	FindInBatches(result *[]*model.QeyKryWEwflsRoleCount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwflsRoleCount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwflsRoleCountDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwflsRoleCountDo
	Joins(fields ...field.RelationField) IQeyKryWEwflsRoleCountDo
	Preload(fields ...field.RelationField) IQeyKryWEwflsRoleCountDo
	FirstOrInit() (*model.QeyKryWEwflsRoleCount, error)
	FirstOrCreate() (*model.QeyKryWEwflsRoleCount, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwflsRoleCount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwflsRoleCountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwflsRoleCountDo) Debug() IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwflsRoleCountDo) WithContext(ctx context.Context) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwflsRoleCountDo) ReadDB() IQeyKryWEwflsRoleCountDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwflsRoleCountDo) WriteDB() IQeyKryWEwflsRoleCountDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwflsRoleCountDo) Session(config *gorm.Session) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwflsRoleCountDo) Clauses(conds ...clause.Expression) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Returning(value interface{}, columns ...string) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwflsRoleCountDo) Not(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Or(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Select(conds ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Where(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Order(conds ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Distinct(cols ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwflsRoleCountDo) Omit(cols ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwflsRoleCountDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwflsRoleCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwflsRoleCountDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwflsRoleCountDo) Group(cols ...field.Expr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwflsRoleCountDo) Having(conds ...gen.Condition) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwflsRoleCountDo) Limit(limit int) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwflsRoleCountDo) Offset(offset int) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwflsRoleCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwflsRoleCountDo) Unscoped() IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwflsRoleCountDo) Create(values ...*model.QeyKryWEwflsRoleCount) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwflsRoleCountDo) CreateInBatches(values []*model.QeyKryWEwflsRoleCount, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwflsRoleCountDo) Save(values ...*model.QeyKryWEwflsRoleCount) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwflsRoleCountDo) First() (*model.QeyKryWEwflsRoleCount, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsRoleCount), nil
	}
}

func (q qeyKryWEwflsRoleCountDo) Take() (*model.QeyKryWEwflsRoleCount, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsRoleCount), nil
	}
}

func (q qeyKryWEwflsRoleCountDo) Last() (*model.QeyKryWEwflsRoleCount, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsRoleCount), nil
	}
}

func (q qeyKryWEwflsRoleCountDo) Find() ([]*model.QeyKryWEwflsRoleCount, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwflsRoleCount), err
}

func (q qeyKryWEwflsRoleCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwflsRoleCount, err error) {
	buf := make([]*model.QeyKryWEwflsRoleCount, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwflsRoleCountDo) FindInBatches(result *[]*model.QeyKryWEwflsRoleCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwflsRoleCountDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwflsRoleCountDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwflsRoleCountDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwflsRoleCountDo) Joins(fields ...field.RelationField) IQeyKryWEwflsRoleCountDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwflsRoleCountDo) Preload(fields ...field.RelationField) IQeyKryWEwflsRoleCountDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwflsRoleCountDo) FirstOrInit() (*model.QeyKryWEwflsRoleCount, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsRoleCount), nil
	}
}

func (q qeyKryWEwflsRoleCountDo) FirstOrCreate() (*model.QeyKryWEwflsRoleCount, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsRoleCount), nil
	}
}

func (q qeyKryWEwflsRoleCountDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwflsRoleCount, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwflsRoleCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwflsRoleCountDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwflsRoleCountDo) Delete(models ...*model.QeyKryWEwflsRoleCount) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwflsRoleCountDo) withDO(do gen.Dao) *qeyKryWEwflsRoleCountDo {
	q.DO = *do.(*gen.DO)
	return q
}
