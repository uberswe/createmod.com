// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEcommentmetum(db *gorm.DB, opts ...gen.DOOption) qeyKryWEcommentmetum {
	_qeyKryWEcommentmetum := qeyKryWEcommentmetum{}

	_qeyKryWEcommentmetum.qeyKryWEcommentmetumDo.UseDB(db, opts...)
	_qeyKryWEcommentmetum.qeyKryWEcommentmetumDo.UseModel(&model.QeyKryWEcommentmetum{})

	tableName := _qeyKryWEcommentmetum.qeyKryWEcommentmetumDo.TableName()
	_qeyKryWEcommentmetum.ALL = field.NewAsterisk(tableName)
	_qeyKryWEcommentmetum.MetaID = field.NewInt64(tableName, "meta_id")
	_qeyKryWEcommentmetum.CommentID = field.NewInt64(tableName, "comment_id")
	_qeyKryWEcommentmetum.MetaKey = field.NewString(tableName, "meta_key")
	_qeyKryWEcommentmetum.MetaValue = field.NewString(tableName, "meta_value")

	_qeyKryWEcommentmetum.fillFieldMap()

	return _qeyKryWEcommentmetum
}

type qeyKryWEcommentmetum struct {
	qeyKryWEcommentmetumDo

	ALL       field.Asterisk
	MetaID    field.Int64
	CommentID field.Int64
	MetaKey   field.String
	MetaValue field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEcommentmetum) Table(newTableName string) *qeyKryWEcommentmetum {
	q.qeyKryWEcommentmetumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEcommentmetum) As(alias string) *qeyKryWEcommentmetum {
	q.qeyKryWEcommentmetumDo.DO = *(q.qeyKryWEcommentmetumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEcommentmetum) updateTableName(table string) *qeyKryWEcommentmetum {
	q.ALL = field.NewAsterisk(table)
	q.MetaID = field.NewInt64(table, "meta_id")
	q.CommentID = field.NewInt64(table, "comment_id")
	q.MetaKey = field.NewString(table, "meta_key")
	q.MetaValue = field.NewString(table, "meta_value")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEcommentmetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEcommentmetum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["meta_id"] = q.MetaID
	q.fieldMap["comment_id"] = q.CommentID
	q.fieldMap["meta_key"] = q.MetaKey
	q.fieldMap["meta_value"] = q.MetaValue
}

func (q qeyKryWEcommentmetum) clone(db *gorm.DB) qeyKryWEcommentmetum {
	q.qeyKryWEcommentmetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEcommentmetum) replaceDB(db *gorm.DB) qeyKryWEcommentmetum {
	q.qeyKryWEcommentmetumDo.ReplaceDB(db)
	return q
}

type qeyKryWEcommentmetumDo struct{ gen.DO }

type IQeyKryWEcommentmetumDo interface {
	gen.SubQuery
	Debug() IQeyKryWEcommentmetumDo
	WithContext(ctx context.Context) IQeyKryWEcommentmetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEcommentmetumDo
	WriteDB() IQeyKryWEcommentmetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEcommentmetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEcommentmetumDo
	Not(conds ...gen.Condition) IQeyKryWEcommentmetumDo
	Or(conds ...gen.Condition) IQeyKryWEcommentmetumDo
	Select(conds ...field.Expr) IQeyKryWEcommentmetumDo
	Where(conds ...gen.Condition) IQeyKryWEcommentmetumDo
	Order(conds ...field.Expr) IQeyKryWEcommentmetumDo
	Distinct(cols ...field.Expr) IQeyKryWEcommentmetumDo
	Omit(cols ...field.Expr) IQeyKryWEcommentmetumDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEcommentmetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEcommentmetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEcommentmetumDo
	Group(cols ...field.Expr) IQeyKryWEcommentmetumDo
	Having(conds ...gen.Condition) IQeyKryWEcommentmetumDo
	Limit(limit int) IQeyKryWEcommentmetumDo
	Offset(offset int) IQeyKryWEcommentmetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEcommentmetumDo
	Unscoped() IQeyKryWEcommentmetumDo
	Create(values ...*model.QeyKryWEcommentmetum) error
	CreateInBatches(values []*model.QeyKryWEcommentmetum, batchSize int) error
	Save(values ...*model.QeyKryWEcommentmetum) error
	First() (*model.QeyKryWEcommentmetum, error)
	Take() (*model.QeyKryWEcommentmetum, error)
	Last() (*model.QeyKryWEcommentmetum, error)
	Find() ([]*model.QeyKryWEcommentmetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEcommentmetum, err error)
	FindInBatches(result *[]*model.QeyKryWEcommentmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEcommentmetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEcommentmetumDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEcommentmetumDo
	Joins(fields ...field.RelationField) IQeyKryWEcommentmetumDo
	Preload(fields ...field.RelationField) IQeyKryWEcommentmetumDo
	FirstOrInit() (*model.QeyKryWEcommentmetum, error)
	FirstOrCreate() (*model.QeyKryWEcommentmetum, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEcommentmetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEcommentmetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEcommentmetumDo) Debug() IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEcommentmetumDo) WithContext(ctx context.Context) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEcommentmetumDo) ReadDB() IQeyKryWEcommentmetumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEcommentmetumDo) WriteDB() IQeyKryWEcommentmetumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEcommentmetumDo) Session(config *gorm.Session) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEcommentmetumDo) Clauses(conds ...clause.Expression) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEcommentmetumDo) Returning(value interface{}, columns ...string) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEcommentmetumDo) Not(conds ...gen.Condition) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEcommentmetumDo) Or(conds ...gen.Condition) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEcommentmetumDo) Select(conds ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEcommentmetumDo) Where(conds ...gen.Condition) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEcommentmetumDo) Order(conds ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEcommentmetumDo) Distinct(cols ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEcommentmetumDo) Omit(cols ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEcommentmetumDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEcommentmetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEcommentmetumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEcommentmetumDo) Group(cols ...field.Expr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEcommentmetumDo) Having(conds ...gen.Condition) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEcommentmetumDo) Limit(limit int) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEcommentmetumDo) Offset(offset int) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEcommentmetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEcommentmetumDo) Unscoped() IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEcommentmetumDo) Create(values ...*model.QeyKryWEcommentmetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEcommentmetumDo) CreateInBatches(values []*model.QeyKryWEcommentmetum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEcommentmetumDo) Save(values ...*model.QeyKryWEcommentmetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEcommentmetumDo) First() (*model.QeyKryWEcommentmetum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEcommentmetum), nil
	}
}

func (q qeyKryWEcommentmetumDo) Take() (*model.QeyKryWEcommentmetum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEcommentmetum), nil
	}
}

func (q qeyKryWEcommentmetumDo) Last() (*model.QeyKryWEcommentmetum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEcommentmetum), nil
	}
}

func (q qeyKryWEcommentmetumDo) Find() ([]*model.QeyKryWEcommentmetum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEcommentmetum), err
}

func (q qeyKryWEcommentmetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEcommentmetum, err error) {
	buf := make([]*model.QeyKryWEcommentmetum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEcommentmetumDo) FindInBatches(result *[]*model.QeyKryWEcommentmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEcommentmetumDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEcommentmetumDo) Assign(attrs ...field.AssignExpr) IQeyKryWEcommentmetumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEcommentmetumDo) Joins(fields ...field.RelationField) IQeyKryWEcommentmetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEcommentmetumDo) Preload(fields ...field.RelationField) IQeyKryWEcommentmetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEcommentmetumDo) FirstOrInit() (*model.QeyKryWEcommentmetum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEcommentmetum), nil
	}
}

func (q qeyKryWEcommentmetumDo) FirstOrCreate() (*model.QeyKryWEcommentmetum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEcommentmetum), nil
	}
}

func (q qeyKryWEcommentmetumDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEcommentmetum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEcommentmetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEcommentmetumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEcommentmetumDo) Delete(models ...*model.QeyKryWEcommentmetum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEcommentmetumDo) withDO(do gen.Dao) *qeyKryWEcommentmetumDo {
	q.DO = *do.(*gen.DO)
	return q
}
