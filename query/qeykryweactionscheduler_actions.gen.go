// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEactionschedulerAction(db *gorm.DB, opts ...gen.DOOption) qeyKryWEactionschedulerAction {
	_qeyKryWEactionschedulerAction := qeyKryWEactionschedulerAction{}

	_qeyKryWEactionschedulerAction.qeyKryWEactionschedulerActionDo.UseDB(db, opts...)
	_qeyKryWEactionschedulerAction.qeyKryWEactionschedulerActionDo.UseModel(&model.QeyKryWEactionschedulerAction{})

	tableName := _qeyKryWEactionschedulerAction.qeyKryWEactionschedulerActionDo.TableName()
	_qeyKryWEactionschedulerAction.ALL = field.NewAsterisk(tableName)
	_qeyKryWEactionschedulerAction.ActionID = field.NewInt64(tableName, "action_id")
	_qeyKryWEactionschedulerAction.Hook = field.NewString(tableName, "hook")
	_qeyKryWEactionschedulerAction.Status = field.NewString(tableName, "status")
	_qeyKryWEactionschedulerAction.ScheduledDateGmt = field.NewTime(tableName, "scheduled_date_gmt")
	_qeyKryWEactionschedulerAction.ScheduledDateLocal = field.NewTime(tableName, "scheduled_date_local")
	_qeyKryWEactionschedulerAction.Priority = field.NewInt32(tableName, "priority")
	_qeyKryWEactionschedulerAction.Args = field.NewString(tableName, "args")
	_qeyKryWEactionschedulerAction.Schedule = field.NewString(tableName, "schedule")
	_qeyKryWEactionschedulerAction.GroupID = field.NewInt64(tableName, "group_id")
	_qeyKryWEactionschedulerAction.Attempts = field.NewInt32(tableName, "attempts")
	_qeyKryWEactionschedulerAction.LastAttemptGmt = field.NewTime(tableName, "last_attempt_gmt")
	_qeyKryWEactionschedulerAction.LastAttemptLocal = field.NewTime(tableName, "last_attempt_local")
	_qeyKryWEactionschedulerAction.ClaimID = field.NewInt64(tableName, "claim_id")
	_qeyKryWEactionschedulerAction.ExtendedArgs = field.NewString(tableName, "extended_args")

	_qeyKryWEactionschedulerAction.fillFieldMap()

	return _qeyKryWEactionschedulerAction
}

type qeyKryWEactionschedulerAction struct {
	qeyKryWEactionschedulerActionDo

	ALL                field.Asterisk
	ActionID           field.Int64
	Hook               field.String
	Status             field.String
	ScheduledDateGmt   field.Time
	ScheduledDateLocal field.Time
	Priority           field.Int32
	Args               field.String
	Schedule           field.String
	GroupID            field.Int64
	Attempts           field.Int32
	LastAttemptGmt     field.Time
	LastAttemptLocal   field.Time
	ClaimID            field.Int64
	ExtendedArgs       field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEactionschedulerAction) Table(newTableName string) *qeyKryWEactionschedulerAction {
	q.qeyKryWEactionschedulerActionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEactionschedulerAction) As(alias string) *qeyKryWEactionschedulerAction {
	q.qeyKryWEactionschedulerActionDo.DO = *(q.qeyKryWEactionschedulerActionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEactionschedulerAction) updateTableName(table string) *qeyKryWEactionschedulerAction {
	q.ALL = field.NewAsterisk(table)
	q.ActionID = field.NewInt64(table, "action_id")
	q.Hook = field.NewString(table, "hook")
	q.Status = field.NewString(table, "status")
	q.ScheduledDateGmt = field.NewTime(table, "scheduled_date_gmt")
	q.ScheduledDateLocal = field.NewTime(table, "scheduled_date_local")
	q.Priority = field.NewInt32(table, "priority")
	q.Args = field.NewString(table, "args")
	q.Schedule = field.NewString(table, "schedule")
	q.GroupID = field.NewInt64(table, "group_id")
	q.Attempts = field.NewInt32(table, "attempts")
	q.LastAttemptGmt = field.NewTime(table, "last_attempt_gmt")
	q.LastAttemptLocal = field.NewTime(table, "last_attempt_local")
	q.ClaimID = field.NewInt64(table, "claim_id")
	q.ExtendedArgs = field.NewString(table, "extended_args")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEactionschedulerAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEactionschedulerAction) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 14)
	q.fieldMap["action_id"] = q.ActionID
	q.fieldMap["hook"] = q.Hook
	q.fieldMap["status"] = q.Status
	q.fieldMap["scheduled_date_gmt"] = q.ScheduledDateGmt
	q.fieldMap["scheduled_date_local"] = q.ScheduledDateLocal
	q.fieldMap["priority"] = q.Priority
	q.fieldMap["args"] = q.Args
	q.fieldMap["schedule"] = q.Schedule
	q.fieldMap["group_id"] = q.GroupID
	q.fieldMap["attempts"] = q.Attempts
	q.fieldMap["last_attempt_gmt"] = q.LastAttemptGmt
	q.fieldMap["last_attempt_local"] = q.LastAttemptLocal
	q.fieldMap["claim_id"] = q.ClaimID
	q.fieldMap["extended_args"] = q.ExtendedArgs
}

func (q qeyKryWEactionschedulerAction) clone(db *gorm.DB) qeyKryWEactionschedulerAction {
	q.qeyKryWEactionschedulerActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEactionschedulerAction) replaceDB(db *gorm.DB) qeyKryWEactionschedulerAction {
	q.qeyKryWEactionschedulerActionDo.ReplaceDB(db)
	return q
}

type qeyKryWEactionschedulerActionDo struct{ gen.DO }

type IQeyKryWEactionschedulerActionDo interface {
	gen.SubQuery
	Debug() IQeyKryWEactionschedulerActionDo
	WithContext(ctx context.Context) IQeyKryWEactionschedulerActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEactionschedulerActionDo
	WriteDB() IQeyKryWEactionschedulerActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEactionschedulerActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerActionDo
	Not(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo
	Or(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo
	Select(conds ...field.Expr) IQeyKryWEactionschedulerActionDo
	Where(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo
	Order(conds ...field.Expr) IQeyKryWEactionschedulerActionDo
	Distinct(cols ...field.Expr) IQeyKryWEactionschedulerActionDo
	Omit(cols ...field.Expr) IQeyKryWEactionschedulerActionDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerActionDo
	Group(cols ...field.Expr) IQeyKryWEactionschedulerActionDo
	Having(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo
	Limit(limit int) IQeyKryWEactionschedulerActionDo
	Offset(offset int) IQeyKryWEactionschedulerActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerActionDo
	Unscoped() IQeyKryWEactionschedulerActionDo
	Create(values ...*model.QeyKryWEactionschedulerAction) error
	CreateInBatches(values []*model.QeyKryWEactionschedulerAction, batchSize int) error
	Save(values ...*model.QeyKryWEactionschedulerAction) error
	First() (*model.QeyKryWEactionschedulerAction, error)
	Take() (*model.QeyKryWEactionschedulerAction, error)
	Last() (*model.QeyKryWEactionschedulerAction, error)
	Find() ([]*model.QeyKryWEactionschedulerAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerAction, err error)
	FindInBatches(result *[]*model.QeyKryWEactionschedulerAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEactionschedulerAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerActionDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerActionDo
	Joins(fields ...field.RelationField) IQeyKryWEactionschedulerActionDo
	Preload(fields ...field.RelationField) IQeyKryWEactionschedulerActionDo
	FirstOrInit() (*model.QeyKryWEactionschedulerAction, error)
	FirstOrCreate() (*model.QeyKryWEactionschedulerAction, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEactionschedulerActionDo) Debug() IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEactionschedulerActionDo) WithContext(ctx context.Context) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEactionschedulerActionDo) ReadDB() IQeyKryWEactionschedulerActionDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEactionschedulerActionDo) WriteDB() IQeyKryWEactionschedulerActionDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEactionschedulerActionDo) Session(config *gorm.Session) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEactionschedulerActionDo) Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEactionschedulerActionDo) Not(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Or(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Select(conds ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Where(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Order(conds ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Distinct(cols ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEactionschedulerActionDo) Omit(cols ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEactionschedulerActionDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEactionschedulerActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEactionschedulerActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEactionschedulerActionDo) Group(cols ...field.Expr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEactionschedulerActionDo) Having(conds ...gen.Condition) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEactionschedulerActionDo) Limit(limit int) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEactionschedulerActionDo) Offset(offset int) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEactionschedulerActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEactionschedulerActionDo) Unscoped() IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEactionschedulerActionDo) Create(values ...*model.QeyKryWEactionschedulerAction) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEactionschedulerActionDo) CreateInBatches(values []*model.QeyKryWEactionschedulerAction, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEactionschedulerActionDo) Save(values ...*model.QeyKryWEactionschedulerAction) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEactionschedulerActionDo) First() (*model.QeyKryWEactionschedulerAction, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerAction), nil
	}
}

func (q qeyKryWEactionschedulerActionDo) Take() (*model.QeyKryWEactionschedulerAction, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerAction), nil
	}
}

func (q qeyKryWEactionschedulerActionDo) Last() (*model.QeyKryWEactionschedulerAction, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerAction), nil
	}
}

func (q qeyKryWEactionschedulerActionDo) Find() ([]*model.QeyKryWEactionschedulerAction, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEactionschedulerAction), err
}

func (q qeyKryWEactionschedulerActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerAction, err error) {
	buf := make([]*model.QeyKryWEactionschedulerAction, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEactionschedulerActionDo) FindInBatches(result *[]*model.QeyKryWEactionschedulerAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEactionschedulerActionDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEactionschedulerActionDo) Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerActionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEactionschedulerActionDo) Joins(fields ...field.RelationField) IQeyKryWEactionschedulerActionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerActionDo) Preload(fields ...field.RelationField) IQeyKryWEactionschedulerActionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerActionDo) FirstOrInit() (*model.QeyKryWEactionschedulerAction, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerAction), nil
	}
}

func (q qeyKryWEactionschedulerActionDo) FirstOrCreate() (*model.QeyKryWEactionschedulerAction, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerAction), nil
	}
}

func (q qeyKryWEactionschedulerActionDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerAction, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEactionschedulerActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEactionschedulerActionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEactionschedulerActionDo) Delete(models ...*model.QeyKryWEactionschedulerAction) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEactionschedulerActionDo) withDO(do gen.Dao) *qeyKryWEactionschedulerActionDo {
	q.DO = *do.(*gen.DO)
	return q
}
