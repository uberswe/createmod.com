// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEactionschedulerClaim(db *gorm.DB, opts ...gen.DOOption) qeyKryWEactionschedulerClaim {
	_qeyKryWEactionschedulerClaim := qeyKryWEactionschedulerClaim{}

	_qeyKryWEactionschedulerClaim.qeyKryWEactionschedulerClaimDo.UseDB(db, opts...)
	_qeyKryWEactionschedulerClaim.qeyKryWEactionschedulerClaimDo.UseModel(&model.QeyKryWEactionschedulerClaim{})

	tableName := _qeyKryWEactionschedulerClaim.qeyKryWEactionschedulerClaimDo.TableName()
	_qeyKryWEactionschedulerClaim.ALL = field.NewAsterisk(tableName)
	_qeyKryWEactionschedulerClaim.ClaimID = field.NewInt64(tableName, "claim_id")
	_qeyKryWEactionschedulerClaim.DateCreatedGmt = field.NewTime(tableName, "date_created_gmt")

	_qeyKryWEactionschedulerClaim.fillFieldMap()

	return _qeyKryWEactionschedulerClaim
}

type qeyKryWEactionschedulerClaim struct {
	qeyKryWEactionschedulerClaimDo

	ALL            field.Asterisk
	ClaimID        field.Int64
	DateCreatedGmt field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEactionschedulerClaim) Table(newTableName string) *qeyKryWEactionschedulerClaim {
	q.qeyKryWEactionschedulerClaimDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEactionschedulerClaim) As(alias string) *qeyKryWEactionschedulerClaim {
	q.qeyKryWEactionschedulerClaimDo.DO = *(q.qeyKryWEactionschedulerClaimDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEactionschedulerClaim) updateTableName(table string) *qeyKryWEactionschedulerClaim {
	q.ALL = field.NewAsterisk(table)
	q.ClaimID = field.NewInt64(table, "claim_id")
	q.DateCreatedGmt = field.NewTime(table, "date_created_gmt")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEactionschedulerClaim) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEactionschedulerClaim) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["claim_id"] = q.ClaimID
	q.fieldMap["date_created_gmt"] = q.DateCreatedGmt
}

func (q qeyKryWEactionschedulerClaim) clone(db *gorm.DB) qeyKryWEactionschedulerClaim {
	q.qeyKryWEactionschedulerClaimDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEactionschedulerClaim) replaceDB(db *gorm.DB) qeyKryWEactionschedulerClaim {
	q.qeyKryWEactionschedulerClaimDo.ReplaceDB(db)
	return q
}

type qeyKryWEactionschedulerClaimDo struct{ gen.DO }

type IQeyKryWEactionschedulerClaimDo interface {
	gen.SubQuery
	Debug() IQeyKryWEactionschedulerClaimDo
	WithContext(ctx context.Context) IQeyKryWEactionschedulerClaimDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEactionschedulerClaimDo
	WriteDB() IQeyKryWEactionschedulerClaimDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEactionschedulerClaimDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerClaimDo
	Not(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo
	Or(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo
	Select(conds ...field.Expr) IQeyKryWEactionschedulerClaimDo
	Where(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo
	Order(conds ...field.Expr) IQeyKryWEactionschedulerClaimDo
	Distinct(cols ...field.Expr) IQeyKryWEactionschedulerClaimDo
	Omit(cols ...field.Expr) IQeyKryWEactionschedulerClaimDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerClaimDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerClaimDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerClaimDo
	Group(cols ...field.Expr) IQeyKryWEactionschedulerClaimDo
	Having(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo
	Limit(limit int) IQeyKryWEactionschedulerClaimDo
	Offset(offset int) IQeyKryWEactionschedulerClaimDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerClaimDo
	Unscoped() IQeyKryWEactionschedulerClaimDo
	Create(values ...*model.QeyKryWEactionschedulerClaim) error
	CreateInBatches(values []*model.QeyKryWEactionschedulerClaim, batchSize int) error
	Save(values ...*model.QeyKryWEactionschedulerClaim) error
	First() (*model.QeyKryWEactionschedulerClaim, error)
	Take() (*model.QeyKryWEactionschedulerClaim, error)
	Last() (*model.QeyKryWEactionschedulerClaim, error)
	Find() ([]*model.QeyKryWEactionschedulerClaim, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerClaim, err error)
	FindInBatches(result *[]*model.QeyKryWEactionschedulerClaim, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEactionschedulerClaim) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerClaimDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerClaimDo
	Joins(fields ...field.RelationField) IQeyKryWEactionschedulerClaimDo
	Preload(fields ...field.RelationField) IQeyKryWEactionschedulerClaimDo
	FirstOrInit() (*model.QeyKryWEactionschedulerClaim, error)
	FirstOrCreate() (*model.QeyKryWEactionschedulerClaim, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerClaim, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerClaimDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEactionschedulerClaimDo) Debug() IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEactionschedulerClaimDo) WithContext(ctx context.Context) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEactionschedulerClaimDo) ReadDB() IQeyKryWEactionschedulerClaimDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEactionschedulerClaimDo) WriteDB() IQeyKryWEactionschedulerClaimDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEactionschedulerClaimDo) Session(config *gorm.Session) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEactionschedulerClaimDo) Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEactionschedulerClaimDo) Not(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Or(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Select(conds ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Where(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Order(conds ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Distinct(cols ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEactionschedulerClaimDo) Omit(cols ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEactionschedulerClaimDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEactionschedulerClaimDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEactionschedulerClaimDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEactionschedulerClaimDo) Group(cols ...field.Expr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEactionschedulerClaimDo) Having(conds ...gen.Condition) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEactionschedulerClaimDo) Limit(limit int) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEactionschedulerClaimDo) Offset(offset int) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEactionschedulerClaimDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEactionschedulerClaimDo) Unscoped() IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEactionschedulerClaimDo) Create(values ...*model.QeyKryWEactionschedulerClaim) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEactionschedulerClaimDo) CreateInBatches(values []*model.QeyKryWEactionschedulerClaim, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEactionschedulerClaimDo) Save(values ...*model.QeyKryWEactionschedulerClaim) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEactionschedulerClaimDo) First() (*model.QeyKryWEactionschedulerClaim, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerClaim), nil
	}
}

func (q qeyKryWEactionschedulerClaimDo) Take() (*model.QeyKryWEactionschedulerClaim, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerClaim), nil
	}
}

func (q qeyKryWEactionschedulerClaimDo) Last() (*model.QeyKryWEactionschedulerClaim, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerClaim), nil
	}
}

func (q qeyKryWEactionschedulerClaimDo) Find() ([]*model.QeyKryWEactionschedulerClaim, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEactionschedulerClaim), err
}

func (q qeyKryWEactionschedulerClaimDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerClaim, err error) {
	buf := make([]*model.QeyKryWEactionschedulerClaim, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEactionschedulerClaimDo) FindInBatches(result *[]*model.QeyKryWEactionschedulerClaim, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEactionschedulerClaimDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEactionschedulerClaimDo) Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerClaimDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEactionschedulerClaimDo) Joins(fields ...field.RelationField) IQeyKryWEactionschedulerClaimDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerClaimDo) Preload(fields ...field.RelationField) IQeyKryWEactionschedulerClaimDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerClaimDo) FirstOrInit() (*model.QeyKryWEactionschedulerClaim, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerClaim), nil
	}
}

func (q qeyKryWEactionschedulerClaimDo) FirstOrCreate() (*model.QeyKryWEactionschedulerClaim, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerClaim), nil
	}
}

func (q qeyKryWEactionschedulerClaimDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerClaim, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEactionschedulerClaimDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEactionschedulerClaimDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEactionschedulerClaimDo) Delete(models ...*model.QeyKryWEactionschedulerClaim) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEactionschedulerClaimDo) withDO(do gen.Dao) *qeyKryWEactionschedulerClaimDo {
	q.DO = *do.(*gen.DO)
	return q
}
