// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfpendingissue(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfpendingissue {
	_qeyKryWEwfpendingissue := qeyKryWEwfpendingissue{}

	_qeyKryWEwfpendingissue.qeyKryWEwfpendingissueDo.UseDB(db, opts...)
	_qeyKryWEwfpendingissue.qeyKryWEwfpendingissueDo.UseModel(&model.QeyKryWEwfpendingissue{})

	tableName := _qeyKryWEwfpendingissue.qeyKryWEwfpendingissueDo.TableName()
	_qeyKryWEwfpendingissue.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfpendingissue.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfpendingissue.Time = field.NewInt32(tableName, "time")
	_qeyKryWEwfpendingissue.LastUpdated = field.NewInt32(tableName, "lastUpdated")
	_qeyKryWEwfpendingissue.Status = field.NewString(tableName, "status")
	_qeyKryWEwfpendingissue.Type = field.NewString(tableName, "type")
	_qeyKryWEwfpendingissue.Severity = field.NewInt32(tableName, "severity")
	_qeyKryWEwfpendingissue.IgnoreP = field.NewString(tableName, "ignoreP")
	_qeyKryWEwfpendingissue.IgnoreC = field.NewString(tableName, "ignoreC")
	_qeyKryWEwfpendingissue.ShortMsg = field.NewString(tableName, "shortMsg")
	_qeyKryWEwfpendingissue.LongMsg = field.NewString(tableName, "longMsg")
	_qeyKryWEwfpendingissue.Data = field.NewString(tableName, "data")

	_qeyKryWEwfpendingissue.fillFieldMap()

	return _qeyKryWEwfpendingissue
}

type qeyKryWEwfpendingissue struct {
	qeyKryWEwfpendingissueDo

	ALL         field.Asterisk
	ID          field.Int32
	Time        field.Int32
	LastUpdated field.Int32
	Status      field.String
	Type        field.String
	Severity    field.Int32
	IgnoreP     field.String
	IgnoreC     field.String
	ShortMsg    field.String
	LongMsg     field.String
	Data        field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfpendingissue) Table(newTableName string) *qeyKryWEwfpendingissue {
	q.qeyKryWEwfpendingissueDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfpendingissue) As(alias string) *qeyKryWEwfpendingissue {
	q.qeyKryWEwfpendingissueDo.DO = *(q.qeyKryWEwfpendingissueDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfpendingissue) updateTableName(table string) *qeyKryWEwfpendingissue {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Time = field.NewInt32(table, "time")
	q.LastUpdated = field.NewInt32(table, "lastUpdated")
	q.Status = field.NewString(table, "status")
	q.Type = field.NewString(table, "type")
	q.Severity = field.NewInt32(table, "severity")
	q.IgnoreP = field.NewString(table, "ignoreP")
	q.IgnoreC = field.NewString(table, "ignoreC")
	q.ShortMsg = field.NewString(table, "shortMsg")
	q.LongMsg = field.NewString(table, "longMsg")
	q.Data = field.NewString(table, "data")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfpendingissue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfpendingissue) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 11)
	q.fieldMap["id"] = q.ID
	q.fieldMap["time"] = q.Time
	q.fieldMap["lastUpdated"] = q.LastUpdated
	q.fieldMap["status"] = q.Status
	q.fieldMap["type"] = q.Type
	q.fieldMap["severity"] = q.Severity
	q.fieldMap["ignoreP"] = q.IgnoreP
	q.fieldMap["ignoreC"] = q.IgnoreC
	q.fieldMap["shortMsg"] = q.ShortMsg
	q.fieldMap["longMsg"] = q.LongMsg
	q.fieldMap["data"] = q.Data
}

func (q qeyKryWEwfpendingissue) clone(db *gorm.DB) qeyKryWEwfpendingissue {
	q.qeyKryWEwfpendingissueDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfpendingissue) replaceDB(db *gorm.DB) qeyKryWEwfpendingissue {
	q.qeyKryWEwfpendingissueDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfpendingissueDo struct{ gen.DO }

type IQeyKryWEwfpendingissueDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfpendingissueDo
	WithContext(ctx context.Context) IQeyKryWEwfpendingissueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfpendingissueDo
	WriteDB() IQeyKryWEwfpendingissueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfpendingissueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfpendingissueDo
	Not(conds ...gen.Condition) IQeyKryWEwfpendingissueDo
	Or(conds ...gen.Condition) IQeyKryWEwfpendingissueDo
	Select(conds ...field.Expr) IQeyKryWEwfpendingissueDo
	Where(conds ...gen.Condition) IQeyKryWEwfpendingissueDo
	Order(conds ...field.Expr) IQeyKryWEwfpendingissueDo
	Distinct(cols ...field.Expr) IQeyKryWEwfpendingissueDo
	Omit(cols ...field.Expr) IQeyKryWEwfpendingissueDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfpendingissueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfpendingissueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfpendingissueDo
	Group(cols ...field.Expr) IQeyKryWEwfpendingissueDo
	Having(conds ...gen.Condition) IQeyKryWEwfpendingissueDo
	Limit(limit int) IQeyKryWEwfpendingissueDo
	Offset(offset int) IQeyKryWEwfpendingissueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfpendingissueDo
	Unscoped() IQeyKryWEwfpendingissueDo
	Create(values ...*model.QeyKryWEwfpendingissue) error
	CreateInBatches(values []*model.QeyKryWEwfpendingissue, batchSize int) error
	Save(values ...*model.QeyKryWEwfpendingissue) error
	First() (*model.QeyKryWEwfpendingissue, error)
	Take() (*model.QeyKryWEwfpendingissue, error)
	Last() (*model.QeyKryWEwfpendingissue, error)
	Find() ([]*model.QeyKryWEwfpendingissue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfpendingissue, err error)
	FindInBatches(result *[]*model.QeyKryWEwfpendingissue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfpendingissue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfpendingissueDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfpendingissueDo
	Joins(fields ...field.RelationField) IQeyKryWEwfpendingissueDo
	Preload(fields ...field.RelationField) IQeyKryWEwfpendingissueDo
	FirstOrInit() (*model.QeyKryWEwfpendingissue, error)
	FirstOrCreate() (*model.QeyKryWEwfpendingissue, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfpendingissue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfpendingissueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfpendingissueDo) Debug() IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfpendingissueDo) WithContext(ctx context.Context) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfpendingissueDo) ReadDB() IQeyKryWEwfpendingissueDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfpendingissueDo) WriteDB() IQeyKryWEwfpendingissueDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfpendingissueDo) Session(config *gorm.Session) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfpendingissueDo) Clauses(conds ...clause.Expression) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfpendingissueDo) Returning(value interface{}, columns ...string) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfpendingissueDo) Not(conds ...gen.Condition) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfpendingissueDo) Or(conds ...gen.Condition) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfpendingissueDo) Select(conds ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfpendingissueDo) Where(conds ...gen.Condition) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfpendingissueDo) Order(conds ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfpendingissueDo) Distinct(cols ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfpendingissueDo) Omit(cols ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfpendingissueDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfpendingissueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfpendingissueDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfpendingissueDo) Group(cols ...field.Expr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfpendingissueDo) Having(conds ...gen.Condition) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfpendingissueDo) Limit(limit int) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfpendingissueDo) Offset(offset int) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfpendingissueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfpendingissueDo) Unscoped() IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfpendingissueDo) Create(values ...*model.QeyKryWEwfpendingissue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfpendingissueDo) CreateInBatches(values []*model.QeyKryWEwfpendingissue, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfpendingissueDo) Save(values ...*model.QeyKryWEwfpendingissue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfpendingissueDo) First() (*model.QeyKryWEwfpendingissue, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfpendingissue), nil
	}
}

func (q qeyKryWEwfpendingissueDo) Take() (*model.QeyKryWEwfpendingissue, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfpendingissue), nil
	}
}

func (q qeyKryWEwfpendingissueDo) Last() (*model.QeyKryWEwfpendingissue, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfpendingissue), nil
	}
}

func (q qeyKryWEwfpendingissueDo) Find() ([]*model.QeyKryWEwfpendingissue, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfpendingissue), err
}

func (q qeyKryWEwfpendingissueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfpendingissue, err error) {
	buf := make([]*model.QeyKryWEwfpendingissue, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfpendingissueDo) FindInBatches(result *[]*model.QeyKryWEwfpendingissue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfpendingissueDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfpendingissueDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfpendingissueDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfpendingissueDo) Joins(fields ...field.RelationField) IQeyKryWEwfpendingissueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfpendingissueDo) Preload(fields ...field.RelationField) IQeyKryWEwfpendingissueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfpendingissueDo) FirstOrInit() (*model.QeyKryWEwfpendingissue, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfpendingissue), nil
	}
}

func (q qeyKryWEwfpendingissueDo) FirstOrCreate() (*model.QeyKryWEwfpendingissue, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfpendingissue), nil
	}
}

func (q qeyKryWEwfpendingissueDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfpendingissue, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfpendingissueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfpendingissueDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfpendingissueDo) Delete(models ...*model.QeyKryWEwfpendingissue) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfpendingissueDo) withDO(do gen.Dao) *qeyKryWEwfpendingissueDo {
	q.DO = *do.(*gen.DO)
	return q
}
