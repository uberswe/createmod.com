// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEuser(db *gorm.DB, opts ...gen.DOOption) qeyKryWEuser {
	_qeyKryWEuser := qeyKryWEuser{}

	_qeyKryWEuser.qeyKryWEuserDo.UseDB(db, opts...)
	_qeyKryWEuser.qeyKryWEuserDo.UseModel(&model.QeyKryWEuser{})

	tableName := _qeyKryWEuser.qeyKryWEuserDo.TableName()
	_qeyKryWEuser.ALL = field.NewAsterisk(tableName)
	_qeyKryWEuser.ID = field.NewInt64(tableName, "ID")
	_qeyKryWEuser.UserLogin = field.NewString(tableName, "user_login")
	_qeyKryWEuser.UserPass = field.NewString(tableName, "user_pass")
	_qeyKryWEuser.UserNicename = field.NewString(tableName, "user_nicename")
	_qeyKryWEuser.UserEmail = field.NewString(tableName, "user_email")
	_qeyKryWEuser.UserURL = field.NewString(tableName, "user_url")
	_qeyKryWEuser.UserRegistered = field.NewTime(tableName, "user_registered")
	_qeyKryWEuser.UserActivationKey = field.NewString(tableName, "user_activation_key")
	_qeyKryWEuser.UserStatus = field.NewInt32(tableName, "user_status")
	_qeyKryWEuser.DisplayName = field.NewString(tableName, "display_name")

	_qeyKryWEuser.fillFieldMap()

	return _qeyKryWEuser
}

type qeyKryWEuser struct {
	qeyKryWEuserDo

	ALL               field.Asterisk
	ID                field.Int64
	UserLogin         field.String
	UserPass          field.String
	UserNicename      field.String
	UserEmail         field.String
	UserURL           field.String
	UserRegistered    field.Time
	UserActivationKey field.String
	UserStatus        field.Int32
	DisplayName       field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEuser) Table(newTableName string) *qeyKryWEuser {
	q.qeyKryWEuserDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEuser) As(alias string) *qeyKryWEuser {
	q.qeyKryWEuserDo.DO = *(q.qeyKryWEuserDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEuser) updateTableName(table string) *qeyKryWEuser {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "ID")
	q.UserLogin = field.NewString(table, "user_login")
	q.UserPass = field.NewString(table, "user_pass")
	q.UserNicename = field.NewString(table, "user_nicename")
	q.UserEmail = field.NewString(table, "user_email")
	q.UserURL = field.NewString(table, "user_url")
	q.UserRegistered = field.NewTime(table, "user_registered")
	q.UserActivationKey = field.NewString(table, "user_activation_key")
	q.UserStatus = field.NewInt32(table, "user_status")
	q.DisplayName = field.NewString(table, "display_name")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEuser) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["ID"] = q.ID
	q.fieldMap["user_login"] = q.UserLogin
	q.fieldMap["user_pass"] = q.UserPass
	q.fieldMap["user_nicename"] = q.UserNicename
	q.fieldMap["user_email"] = q.UserEmail
	q.fieldMap["user_url"] = q.UserURL
	q.fieldMap["user_registered"] = q.UserRegistered
	q.fieldMap["user_activation_key"] = q.UserActivationKey
	q.fieldMap["user_status"] = q.UserStatus
	q.fieldMap["display_name"] = q.DisplayName
}

func (q qeyKryWEuser) clone(db *gorm.DB) qeyKryWEuser {
	q.qeyKryWEuserDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEuser) replaceDB(db *gorm.DB) qeyKryWEuser {
	q.qeyKryWEuserDo.ReplaceDB(db)
	return q
}

type qeyKryWEuserDo struct{ gen.DO }

type IQeyKryWEuserDo interface {
	gen.SubQuery
	Debug() IQeyKryWEuserDo
	WithContext(ctx context.Context) IQeyKryWEuserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEuserDo
	WriteDB() IQeyKryWEuserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEuserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEuserDo
	Not(conds ...gen.Condition) IQeyKryWEuserDo
	Or(conds ...gen.Condition) IQeyKryWEuserDo
	Select(conds ...field.Expr) IQeyKryWEuserDo
	Where(conds ...gen.Condition) IQeyKryWEuserDo
	Order(conds ...field.Expr) IQeyKryWEuserDo
	Distinct(cols ...field.Expr) IQeyKryWEuserDo
	Omit(cols ...field.Expr) IQeyKryWEuserDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEuserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserDo
	Group(cols ...field.Expr) IQeyKryWEuserDo
	Having(conds ...gen.Condition) IQeyKryWEuserDo
	Limit(limit int) IQeyKryWEuserDo
	Offset(offset int) IQeyKryWEuserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEuserDo
	Unscoped() IQeyKryWEuserDo
	Create(values ...*model.QeyKryWEuser) error
	CreateInBatches(values []*model.QeyKryWEuser, batchSize int) error
	Save(values ...*model.QeyKryWEuser) error
	First() (*model.QeyKryWEuser, error)
	Take() (*model.QeyKryWEuser, error)
	Last() (*model.QeyKryWEuser, error)
	Find() ([]*model.QeyKryWEuser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEuser, err error)
	FindInBatches(result *[]*model.QeyKryWEuser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEuser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEuserDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEuserDo
	Joins(fields ...field.RelationField) IQeyKryWEuserDo
	Preload(fields ...field.RelationField) IQeyKryWEuserDo
	FirstOrInit() (*model.QeyKryWEuser, error)
	FirstOrCreate() (*model.QeyKryWEuser, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEuser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEuserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEuserDo) Debug() IQeyKryWEuserDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEuserDo) WithContext(ctx context.Context) IQeyKryWEuserDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEuserDo) ReadDB() IQeyKryWEuserDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEuserDo) WriteDB() IQeyKryWEuserDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEuserDo) Session(config *gorm.Session) IQeyKryWEuserDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEuserDo) Clauses(conds ...clause.Expression) IQeyKryWEuserDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEuserDo) Returning(value interface{}, columns ...string) IQeyKryWEuserDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEuserDo) Not(conds ...gen.Condition) IQeyKryWEuserDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEuserDo) Or(conds ...gen.Condition) IQeyKryWEuserDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEuserDo) Select(conds ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEuserDo) Where(conds ...gen.Condition) IQeyKryWEuserDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEuserDo) Order(conds ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEuserDo) Distinct(cols ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEuserDo) Omit(cols ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEuserDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEuserDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEuserDo) Group(cols ...field.Expr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEuserDo) Having(conds ...gen.Condition) IQeyKryWEuserDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEuserDo) Limit(limit int) IQeyKryWEuserDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEuserDo) Offset(offset int) IQeyKryWEuserDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEuserDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEuserDo) Unscoped() IQeyKryWEuserDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEuserDo) Create(values ...*model.QeyKryWEuser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEuserDo) CreateInBatches(values []*model.QeyKryWEuser, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEuserDo) Save(values ...*model.QeyKryWEuser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEuserDo) First() (*model.QeyKryWEuser, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuser), nil
	}
}

func (q qeyKryWEuserDo) Take() (*model.QeyKryWEuser, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuser), nil
	}
}

func (q qeyKryWEuserDo) Last() (*model.QeyKryWEuser, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuser), nil
	}
}

func (q qeyKryWEuserDo) Find() ([]*model.QeyKryWEuser, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEuser), err
}

func (q qeyKryWEuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEuser, err error) {
	buf := make([]*model.QeyKryWEuser, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEuserDo) FindInBatches(result *[]*model.QeyKryWEuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEuserDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEuserDo) Assign(attrs ...field.AssignExpr) IQeyKryWEuserDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEuserDo) Joins(fields ...field.RelationField) IQeyKryWEuserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEuserDo) Preload(fields ...field.RelationField) IQeyKryWEuserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEuserDo) FirstOrInit() (*model.QeyKryWEuser, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuser), nil
	}
}

func (q qeyKryWEuserDo) FirstOrCreate() (*model.QeyKryWEuser, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuser), nil
	}
}

func (q qeyKryWEuserDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEuser, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEuserDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEuserDo) Delete(models ...*model.QeyKryWEuser) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEuserDo) withDO(do gen.Dao) *qeyKryWEuserDo {
	q.DO = *do.(*gen.DO)
	return q
}
