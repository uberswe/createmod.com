// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEulikeForum(db *gorm.DB, opts ...gen.DOOption) qeyKryWEulikeForum {
	_qeyKryWEulikeForum := qeyKryWEulikeForum{}

	_qeyKryWEulikeForum.qeyKryWEulikeForumDo.UseDB(db, opts...)
	_qeyKryWEulikeForum.qeyKryWEulikeForumDo.UseModel(&model.QeyKryWEulikeForum{})

	tableName := _qeyKryWEulikeForum.qeyKryWEulikeForumDo.TableName()
	_qeyKryWEulikeForum.ALL = field.NewAsterisk(tableName)
	_qeyKryWEulikeForum.ID = field.NewInt64(tableName, "id")
	_qeyKryWEulikeForum.TopicID = field.NewInt64(tableName, "topic_id")
	_qeyKryWEulikeForum.DateTime = field.NewTime(tableName, "date_time")
	_qeyKryWEulikeForum.IP = field.NewString(tableName, "ip")
	_qeyKryWEulikeForum.UserID = field.NewString(tableName, "user_id")
	_qeyKryWEulikeForum.Status = field.NewString(tableName, "status")

	_qeyKryWEulikeForum.fillFieldMap()

	return _qeyKryWEulikeForum
}

type qeyKryWEulikeForum struct {
	qeyKryWEulikeForumDo

	ALL      field.Asterisk
	ID       field.Int64
	TopicID  field.Int64
	DateTime field.Time
	IP       field.String
	UserID   field.String
	Status   field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEulikeForum) Table(newTableName string) *qeyKryWEulikeForum {
	q.qeyKryWEulikeForumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEulikeForum) As(alias string) *qeyKryWEulikeForum {
	q.qeyKryWEulikeForumDo.DO = *(q.qeyKryWEulikeForumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEulikeForum) updateTableName(table string) *qeyKryWEulikeForum {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.TopicID = field.NewInt64(table, "topic_id")
	q.DateTime = field.NewTime(table, "date_time")
	q.IP = field.NewString(table, "ip")
	q.UserID = field.NewString(table, "user_id")
	q.Status = field.NewString(table, "status")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEulikeForum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEulikeForum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["topic_id"] = q.TopicID
	q.fieldMap["date_time"] = q.DateTime
	q.fieldMap["ip"] = q.IP
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["status"] = q.Status
}

func (q qeyKryWEulikeForum) clone(db *gorm.DB) qeyKryWEulikeForum {
	q.qeyKryWEulikeForumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEulikeForum) replaceDB(db *gorm.DB) qeyKryWEulikeForum {
	q.qeyKryWEulikeForumDo.ReplaceDB(db)
	return q
}

type qeyKryWEulikeForumDo struct{ gen.DO }

type IQeyKryWEulikeForumDo interface {
	gen.SubQuery
	Debug() IQeyKryWEulikeForumDo
	WithContext(ctx context.Context) IQeyKryWEulikeForumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEulikeForumDo
	WriteDB() IQeyKryWEulikeForumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEulikeForumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEulikeForumDo
	Not(conds ...gen.Condition) IQeyKryWEulikeForumDo
	Or(conds ...gen.Condition) IQeyKryWEulikeForumDo
	Select(conds ...field.Expr) IQeyKryWEulikeForumDo
	Where(conds ...gen.Condition) IQeyKryWEulikeForumDo
	Order(conds ...field.Expr) IQeyKryWEulikeForumDo
	Distinct(cols ...field.Expr) IQeyKryWEulikeForumDo
	Omit(cols ...field.Expr) IQeyKryWEulikeForumDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeForumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeForumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeForumDo
	Group(cols ...field.Expr) IQeyKryWEulikeForumDo
	Having(conds ...gen.Condition) IQeyKryWEulikeForumDo
	Limit(limit int) IQeyKryWEulikeForumDo
	Offset(offset int) IQeyKryWEulikeForumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeForumDo
	Unscoped() IQeyKryWEulikeForumDo
	Create(values ...*model.QeyKryWEulikeForum) error
	CreateInBatches(values []*model.QeyKryWEulikeForum, batchSize int) error
	Save(values ...*model.QeyKryWEulikeForum) error
	First() (*model.QeyKryWEulikeForum, error)
	Take() (*model.QeyKryWEulikeForum, error)
	Last() (*model.QeyKryWEulikeForum, error)
	Find() ([]*model.QeyKryWEulikeForum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeForum, err error)
	FindInBatches(result *[]*model.QeyKryWEulikeForum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEulikeForum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeForumDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEulikeForumDo
	Joins(fields ...field.RelationField) IQeyKryWEulikeForumDo
	Preload(fields ...field.RelationField) IQeyKryWEulikeForumDo
	FirstOrInit() (*model.QeyKryWEulikeForum, error)
	FirstOrCreate() (*model.QeyKryWEulikeForum, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeForum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEulikeForumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEulikeForumDo) Debug() IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEulikeForumDo) WithContext(ctx context.Context) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEulikeForumDo) ReadDB() IQeyKryWEulikeForumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEulikeForumDo) WriteDB() IQeyKryWEulikeForumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEulikeForumDo) Session(config *gorm.Session) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEulikeForumDo) Clauses(conds ...clause.Expression) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEulikeForumDo) Returning(value interface{}, columns ...string) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEulikeForumDo) Not(conds ...gen.Condition) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEulikeForumDo) Or(conds ...gen.Condition) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEulikeForumDo) Select(conds ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEulikeForumDo) Where(conds ...gen.Condition) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEulikeForumDo) Order(conds ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEulikeForumDo) Distinct(cols ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEulikeForumDo) Omit(cols ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEulikeForumDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEulikeForumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEulikeForumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEulikeForumDo) Group(cols ...field.Expr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEulikeForumDo) Having(conds ...gen.Condition) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEulikeForumDo) Limit(limit int) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEulikeForumDo) Offset(offset int) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEulikeForumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEulikeForumDo) Unscoped() IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEulikeForumDo) Create(values ...*model.QeyKryWEulikeForum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEulikeForumDo) CreateInBatches(values []*model.QeyKryWEulikeForum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEulikeForumDo) Save(values ...*model.QeyKryWEulikeForum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEulikeForumDo) First() (*model.QeyKryWEulikeForum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeForum), nil
	}
}

func (q qeyKryWEulikeForumDo) Take() (*model.QeyKryWEulikeForum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeForum), nil
	}
}

func (q qeyKryWEulikeForumDo) Last() (*model.QeyKryWEulikeForum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeForum), nil
	}
}

func (q qeyKryWEulikeForumDo) Find() ([]*model.QeyKryWEulikeForum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEulikeForum), err
}

func (q qeyKryWEulikeForumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeForum, err error) {
	buf := make([]*model.QeyKryWEulikeForum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEulikeForumDo) FindInBatches(result *[]*model.QeyKryWEulikeForum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEulikeForumDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEulikeForumDo) Assign(attrs ...field.AssignExpr) IQeyKryWEulikeForumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEulikeForumDo) Joins(fields ...field.RelationField) IQeyKryWEulikeForumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEulikeForumDo) Preload(fields ...field.RelationField) IQeyKryWEulikeForumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEulikeForumDo) FirstOrInit() (*model.QeyKryWEulikeForum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeForum), nil
	}
}

func (q qeyKryWEulikeForumDo) FirstOrCreate() (*model.QeyKryWEulikeForum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeForum), nil
	}
}

func (q qeyKryWEulikeForumDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeForum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEulikeForumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEulikeForumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEulikeForumDo) Delete(models ...*model.QeyKryWEulikeForum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEulikeForumDo) withDO(do gen.Dao) *qeyKryWEulikeForumDo {
	q.DO = *do.(*gen.DO)
	return q
}
