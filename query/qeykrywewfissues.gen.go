// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfissue(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfissue {
	_qeyKryWEwfissue := qeyKryWEwfissue{}

	_qeyKryWEwfissue.qeyKryWEwfissueDo.UseDB(db, opts...)
	_qeyKryWEwfissue.qeyKryWEwfissueDo.UseModel(&model.QeyKryWEwfissue{})

	tableName := _qeyKryWEwfissue.qeyKryWEwfissueDo.TableName()
	_qeyKryWEwfissue.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfissue.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfissue.Time = field.NewInt32(tableName, "time")
	_qeyKryWEwfissue.LastUpdated = field.NewInt32(tableName, "lastUpdated")
	_qeyKryWEwfissue.Status = field.NewString(tableName, "status")
	_qeyKryWEwfissue.Type = field.NewString(tableName, "type")
	_qeyKryWEwfissue.Severity = field.NewInt32(tableName, "severity")
	_qeyKryWEwfissue.IgnoreP = field.NewString(tableName, "ignoreP")
	_qeyKryWEwfissue.IgnoreC = field.NewString(tableName, "ignoreC")
	_qeyKryWEwfissue.ShortMsg = field.NewString(tableName, "shortMsg")
	_qeyKryWEwfissue.LongMsg = field.NewString(tableName, "longMsg")
	_qeyKryWEwfissue.Data = field.NewString(tableName, "data")

	_qeyKryWEwfissue.fillFieldMap()

	return _qeyKryWEwfissue
}

type qeyKryWEwfissue struct {
	qeyKryWEwfissueDo

	ALL         field.Asterisk
	ID          field.Int32
	Time        field.Int32
	LastUpdated field.Int32
	Status      field.String
	Type        field.String
	Severity    field.Int32
	IgnoreP     field.String
	IgnoreC     field.String
	ShortMsg    field.String
	LongMsg     field.String
	Data        field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfissue) Table(newTableName string) *qeyKryWEwfissue {
	q.qeyKryWEwfissueDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfissue) As(alias string) *qeyKryWEwfissue {
	q.qeyKryWEwfissueDo.DO = *(q.qeyKryWEwfissueDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfissue) updateTableName(table string) *qeyKryWEwfissue {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Time = field.NewInt32(table, "time")
	q.LastUpdated = field.NewInt32(table, "lastUpdated")
	q.Status = field.NewString(table, "status")
	q.Type = field.NewString(table, "type")
	q.Severity = field.NewInt32(table, "severity")
	q.IgnoreP = field.NewString(table, "ignoreP")
	q.IgnoreC = field.NewString(table, "ignoreC")
	q.ShortMsg = field.NewString(table, "shortMsg")
	q.LongMsg = field.NewString(table, "longMsg")
	q.Data = field.NewString(table, "data")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfissue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfissue) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 11)
	q.fieldMap["id"] = q.ID
	q.fieldMap["time"] = q.Time
	q.fieldMap["lastUpdated"] = q.LastUpdated
	q.fieldMap["status"] = q.Status
	q.fieldMap["type"] = q.Type
	q.fieldMap["severity"] = q.Severity
	q.fieldMap["ignoreP"] = q.IgnoreP
	q.fieldMap["ignoreC"] = q.IgnoreC
	q.fieldMap["shortMsg"] = q.ShortMsg
	q.fieldMap["longMsg"] = q.LongMsg
	q.fieldMap["data"] = q.Data
}

func (q qeyKryWEwfissue) clone(db *gorm.DB) qeyKryWEwfissue {
	q.qeyKryWEwfissueDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfissue) replaceDB(db *gorm.DB) qeyKryWEwfissue {
	q.qeyKryWEwfissueDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfissueDo struct{ gen.DO }

type IQeyKryWEwfissueDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfissueDo
	WithContext(ctx context.Context) IQeyKryWEwfissueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfissueDo
	WriteDB() IQeyKryWEwfissueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfissueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfissueDo
	Not(conds ...gen.Condition) IQeyKryWEwfissueDo
	Or(conds ...gen.Condition) IQeyKryWEwfissueDo
	Select(conds ...field.Expr) IQeyKryWEwfissueDo
	Where(conds ...gen.Condition) IQeyKryWEwfissueDo
	Order(conds ...field.Expr) IQeyKryWEwfissueDo
	Distinct(cols ...field.Expr) IQeyKryWEwfissueDo
	Omit(cols ...field.Expr) IQeyKryWEwfissueDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfissueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfissueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfissueDo
	Group(cols ...field.Expr) IQeyKryWEwfissueDo
	Having(conds ...gen.Condition) IQeyKryWEwfissueDo
	Limit(limit int) IQeyKryWEwfissueDo
	Offset(offset int) IQeyKryWEwfissueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfissueDo
	Unscoped() IQeyKryWEwfissueDo
	Create(values ...*model.QeyKryWEwfissue) error
	CreateInBatches(values []*model.QeyKryWEwfissue, batchSize int) error
	Save(values ...*model.QeyKryWEwfissue) error
	First() (*model.QeyKryWEwfissue, error)
	Take() (*model.QeyKryWEwfissue, error)
	Last() (*model.QeyKryWEwfissue, error)
	Find() ([]*model.QeyKryWEwfissue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfissue, err error)
	FindInBatches(result *[]*model.QeyKryWEwfissue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfissue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfissueDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfissueDo
	Joins(fields ...field.RelationField) IQeyKryWEwfissueDo
	Preload(fields ...field.RelationField) IQeyKryWEwfissueDo
	FirstOrInit() (*model.QeyKryWEwfissue, error)
	FirstOrCreate() (*model.QeyKryWEwfissue, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfissue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfissueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfissueDo) Debug() IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfissueDo) WithContext(ctx context.Context) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfissueDo) ReadDB() IQeyKryWEwfissueDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfissueDo) WriteDB() IQeyKryWEwfissueDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfissueDo) Session(config *gorm.Session) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfissueDo) Clauses(conds ...clause.Expression) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfissueDo) Returning(value interface{}, columns ...string) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfissueDo) Not(conds ...gen.Condition) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfissueDo) Or(conds ...gen.Condition) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfissueDo) Select(conds ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfissueDo) Where(conds ...gen.Condition) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfissueDo) Order(conds ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfissueDo) Distinct(cols ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfissueDo) Omit(cols ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfissueDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfissueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfissueDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfissueDo) Group(cols ...field.Expr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfissueDo) Having(conds ...gen.Condition) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfissueDo) Limit(limit int) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfissueDo) Offset(offset int) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfissueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfissueDo) Unscoped() IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfissueDo) Create(values ...*model.QeyKryWEwfissue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfissueDo) CreateInBatches(values []*model.QeyKryWEwfissue, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfissueDo) Save(values ...*model.QeyKryWEwfissue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfissueDo) First() (*model.QeyKryWEwfissue, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfissue), nil
	}
}

func (q qeyKryWEwfissueDo) Take() (*model.QeyKryWEwfissue, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfissue), nil
	}
}

func (q qeyKryWEwfissueDo) Last() (*model.QeyKryWEwfissue, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfissue), nil
	}
}

func (q qeyKryWEwfissueDo) Find() ([]*model.QeyKryWEwfissue, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfissue), err
}

func (q qeyKryWEwfissueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfissue, err error) {
	buf := make([]*model.QeyKryWEwfissue, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfissueDo) FindInBatches(result *[]*model.QeyKryWEwfissue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfissueDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfissueDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfissueDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfissueDo) Joins(fields ...field.RelationField) IQeyKryWEwfissueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfissueDo) Preload(fields ...field.RelationField) IQeyKryWEwfissueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfissueDo) FirstOrInit() (*model.QeyKryWEwfissue, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfissue), nil
	}
}

func (q qeyKryWEwfissueDo) FirstOrCreate() (*model.QeyKryWEwfissue, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfissue), nil
	}
}

func (q qeyKryWEwfissueDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfissue, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfissueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfissueDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfissueDo) Delete(models ...*model.QeyKryWEwfissue) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfissueDo) withDO(do gen.Dao) *qeyKryWEwfissueDo {
	q.DO = *do.(*gen.DO)
	return q
}
