// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfloc(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfloc {
	_qeyKryWEwfloc := qeyKryWEwfloc{}

	_qeyKryWEwfloc.qeyKryWEwflocDo.UseDB(db, opts...)
	_qeyKryWEwfloc.qeyKryWEwflocDo.UseModel(&model.QeyKryWEwfloc{})

	tableName := _qeyKryWEwfloc.qeyKryWEwflocDo.TableName()
	_qeyKryWEwfloc.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfloc.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwfloc.Ctime = field.NewInt32(tableName, "ctime")
	_qeyKryWEwfloc.Failed = field.NewInt32(tableName, "failed")
	_qeyKryWEwfloc.City = field.NewString(tableName, "city")
	_qeyKryWEwfloc.Region = field.NewString(tableName, "region")
	_qeyKryWEwfloc.CountryName = field.NewString(tableName, "countryName")
	_qeyKryWEwfloc.CountryCode = field.NewString(tableName, "countryCode")
	_qeyKryWEwfloc.Lat = field.NewFloat32(tableName, "lat")
	_qeyKryWEwfloc.Lon = field.NewFloat32(tableName, "lon")

	_qeyKryWEwfloc.fillFieldMap()

	return _qeyKryWEwfloc
}

type qeyKryWEwfloc struct {
	qeyKryWEwflocDo

	ALL         field.Asterisk
	IP          field.Bytes
	Ctime       field.Int32
	Failed      field.Int32
	City        field.String
	Region      field.String
	CountryName field.String
	CountryCode field.String
	Lat         field.Float32
	Lon         field.Float32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfloc) Table(newTableName string) *qeyKryWEwfloc {
	q.qeyKryWEwflocDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfloc) As(alias string) *qeyKryWEwfloc {
	q.qeyKryWEwflocDo.DO = *(q.qeyKryWEwflocDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfloc) updateTableName(table string) *qeyKryWEwfloc {
	q.ALL = field.NewAsterisk(table)
	q.IP = field.NewBytes(table, "IP")
	q.Ctime = field.NewInt32(table, "ctime")
	q.Failed = field.NewInt32(table, "failed")
	q.City = field.NewString(table, "city")
	q.Region = field.NewString(table, "region")
	q.CountryName = field.NewString(table, "countryName")
	q.CountryCode = field.NewString(table, "countryCode")
	q.Lat = field.NewFloat32(table, "lat")
	q.Lon = field.NewFloat32(table, "lon")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfloc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfloc) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["IP"] = q.IP
	q.fieldMap["ctime"] = q.Ctime
	q.fieldMap["failed"] = q.Failed
	q.fieldMap["city"] = q.City
	q.fieldMap["region"] = q.Region
	q.fieldMap["countryName"] = q.CountryName
	q.fieldMap["countryCode"] = q.CountryCode
	q.fieldMap["lat"] = q.Lat
	q.fieldMap["lon"] = q.Lon
}

func (q qeyKryWEwfloc) clone(db *gorm.DB) qeyKryWEwfloc {
	q.qeyKryWEwflocDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfloc) replaceDB(db *gorm.DB) qeyKryWEwfloc {
	q.qeyKryWEwflocDo.ReplaceDB(db)
	return q
}

type qeyKryWEwflocDo struct{ gen.DO }

type IQeyKryWEwflocDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwflocDo
	WithContext(ctx context.Context) IQeyKryWEwflocDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwflocDo
	WriteDB() IQeyKryWEwflocDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwflocDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwflocDo
	Not(conds ...gen.Condition) IQeyKryWEwflocDo
	Or(conds ...gen.Condition) IQeyKryWEwflocDo
	Select(conds ...field.Expr) IQeyKryWEwflocDo
	Where(conds ...gen.Condition) IQeyKryWEwflocDo
	Order(conds ...field.Expr) IQeyKryWEwflocDo
	Distinct(cols ...field.Expr) IQeyKryWEwflocDo
	Omit(cols ...field.Expr) IQeyKryWEwflocDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflocDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflocDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflocDo
	Group(cols ...field.Expr) IQeyKryWEwflocDo
	Having(conds ...gen.Condition) IQeyKryWEwflocDo
	Limit(limit int) IQeyKryWEwflocDo
	Offset(offset int) IQeyKryWEwflocDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflocDo
	Unscoped() IQeyKryWEwflocDo
	Create(values ...*model.QeyKryWEwfloc) error
	CreateInBatches(values []*model.QeyKryWEwfloc, batchSize int) error
	Save(values ...*model.QeyKryWEwfloc) error
	First() (*model.QeyKryWEwfloc, error)
	Take() (*model.QeyKryWEwfloc, error)
	Last() (*model.QeyKryWEwfloc, error)
	Find() ([]*model.QeyKryWEwfloc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfloc, err error)
	FindInBatches(result *[]*model.QeyKryWEwfloc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfloc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwflocDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwflocDo
	Joins(fields ...field.RelationField) IQeyKryWEwflocDo
	Preload(fields ...field.RelationField) IQeyKryWEwflocDo
	FirstOrInit() (*model.QeyKryWEwfloc, error)
	FirstOrCreate() (*model.QeyKryWEwfloc, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfloc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwflocDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwflocDo) Debug() IQeyKryWEwflocDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwflocDo) WithContext(ctx context.Context) IQeyKryWEwflocDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwflocDo) ReadDB() IQeyKryWEwflocDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwflocDo) WriteDB() IQeyKryWEwflocDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwflocDo) Session(config *gorm.Session) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwflocDo) Clauses(conds ...clause.Expression) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwflocDo) Returning(value interface{}, columns ...string) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwflocDo) Not(conds ...gen.Condition) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwflocDo) Or(conds ...gen.Condition) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwflocDo) Select(conds ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwflocDo) Where(conds ...gen.Condition) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwflocDo) Order(conds ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwflocDo) Distinct(cols ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwflocDo) Omit(cols ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwflocDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwflocDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwflocDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwflocDo) Group(cols ...field.Expr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwflocDo) Having(conds ...gen.Condition) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwflocDo) Limit(limit int) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwflocDo) Offset(offset int) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwflocDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwflocDo) Unscoped() IQeyKryWEwflocDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwflocDo) Create(values ...*model.QeyKryWEwfloc) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwflocDo) CreateInBatches(values []*model.QeyKryWEwfloc, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwflocDo) Save(values ...*model.QeyKryWEwfloc) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwflocDo) First() (*model.QeyKryWEwfloc, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfloc), nil
	}
}

func (q qeyKryWEwflocDo) Take() (*model.QeyKryWEwfloc, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfloc), nil
	}
}

func (q qeyKryWEwflocDo) Last() (*model.QeyKryWEwfloc, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfloc), nil
	}
}

func (q qeyKryWEwflocDo) Find() ([]*model.QeyKryWEwfloc, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfloc), err
}

func (q qeyKryWEwflocDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfloc, err error) {
	buf := make([]*model.QeyKryWEwfloc, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwflocDo) FindInBatches(result *[]*model.QeyKryWEwfloc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwflocDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwflocDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwflocDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwflocDo) Joins(fields ...field.RelationField) IQeyKryWEwflocDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwflocDo) Preload(fields ...field.RelationField) IQeyKryWEwflocDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwflocDo) FirstOrInit() (*model.QeyKryWEwfloc, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfloc), nil
	}
}

func (q qeyKryWEwflocDo) FirstOrCreate() (*model.QeyKryWEwfloc, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfloc), nil
	}
}

func (q qeyKryWEwflocDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfloc, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwflocDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwflocDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwflocDo) Delete(models ...*model.QeyKryWEwfloc) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwflocDo) withDO(do gen.Dao) *qeyKryWEwflocDo {
	q.DO = *do.(*gen.DO)
	return q
}
