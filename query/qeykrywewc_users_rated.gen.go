// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwcUsersRated(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwcUsersRated {
	_qeyKryWEwcUsersRated := qeyKryWEwcUsersRated{}

	_qeyKryWEwcUsersRated.qeyKryWEwcUsersRatedDo.UseDB(db, opts...)
	_qeyKryWEwcUsersRated.qeyKryWEwcUsersRatedDo.UseModel(&model.QeyKryWEwcUsersRated{})

	tableName := _qeyKryWEwcUsersRated.qeyKryWEwcUsersRatedDo.TableName()
	_qeyKryWEwcUsersRated.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwcUsersRated.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwcUsersRated.PostID = field.NewInt32(tableName, "post_id")
	_qeyKryWEwcUsersRated.UserID = field.NewInt32(tableName, "user_id")
	_qeyKryWEwcUsersRated.UserIP = field.NewString(tableName, "user_ip")
	_qeyKryWEwcUsersRated.Rating = field.NewInt32(tableName, "rating")
	_qeyKryWEwcUsersRated.Date = field.NewInt32(tableName, "date")

	_qeyKryWEwcUsersRated.fillFieldMap()

	return _qeyKryWEwcUsersRated
}

type qeyKryWEwcUsersRated struct {
	qeyKryWEwcUsersRatedDo

	ALL    field.Asterisk
	ID     field.Int32
	PostID field.Int32
	UserID field.Int32
	UserIP field.String
	Rating field.Int32
	Date   field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwcUsersRated) Table(newTableName string) *qeyKryWEwcUsersRated {
	q.qeyKryWEwcUsersRatedDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwcUsersRated) As(alias string) *qeyKryWEwcUsersRated {
	q.qeyKryWEwcUsersRatedDo.DO = *(q.qeyKryWEwcUsersRatedDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwcUsersRated) updateTableName(table string) *qeyKryWEwcUsersRated {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.PostID = field.NewInt32(table, "post_id")
	q.UserID = field.NewInt32(table, "user_id")
	q.UserIP = field.NewString(table, "user_ip")
	q.Rating = field.NewInt32(table, "rating")
	q.Date = field.NewInt32(table, "date")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwcUsersRated) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwcUsersRated) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["user_ip"] = q.UserIP
	q.fieldMap["rating"] = q.Rating
	q.fieldMap["date"] = q.Date
}

func (q qeyKryWEwcUsersRated) clone(db *gorm.DB) qeyKryWEwcUsersRated {
	q.qeyKryWEwcUsersRatedDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwcUsersRated) replaceDB(db *gorm.DB) qeyKryWEwcUsersRated {
	q.qeyKryWEwcUsersRatedDo.ReplaceDB(db)
	return q
}

type qeyKryWEwcUsersRatedDo struct{ gen.DO }

type IQeyKryWEwcUsersRatedDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwcUsersRatedDo
	WithContext(ctx context.Context) IQeyKryWEwcUsersRatedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwcUsersRatedDo
	WriteDB() IQeyKryWEwcUsersRatedDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwcUsersRatedDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwcUsersRatedDo
	Not(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo
	Or(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo
	Select(conds ...field.Expr) IQeyKryWEwcUsersRatedDo
	Where(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo
	Order(conds ...field.Expr) IQeyKryWEwcUsersRatedDo
	Distinct(cols ...field.Expr) IQeyKryWEwcUsersRatedDo
	Omit(cols ...field.Expr) IQeyKryWEwcUsersRatedDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcUsersRatedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcUsersRatedDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcUsersRatedDo
	Group(cols ...field.Expr) IQeyKryWEwcUsersRatedDo
	Having(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo
	Limit(limit int) IQeyKryWEwcUsersRatedDo
	Offset(offset int) IQeyKryWEwcUsersRatedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcUsersRatedDo
	Unscoped() IQeyKryWEwcUsersRatedDo
	Create(values ...*model.QeyKryWEwcUsersRated) error
	CreateInBatches(values []*model.QeyKryWEwcUsersRated, batchSize int) error
	Save(values ...*model.QeyKryWEwcUsersRated) error
	First() (*model.QeyKryWEwcUsersRated, error)
	Take() (*model.QeyKryWEwcUsersRated, error)
	Last() (*model.QeyKryWEwcUsersRated, error)
	Find() ([]*model.QeyKryWEwcUsersRated, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcUsersRated, err error)
	FindInBatches(result *[]*model.QeyKryWEwcUsersRated, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwcUsersRated) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwcUsersRatedDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwcUsersRatedDo
	Joins(fields ...field.RelationField) IQeyKryWEwcUsersRatedDo
	Preload(fields ...field.RelationField) IQeyKryWEwcUsersRatedDo
	FirstOrInit() (*model.QeyKryWEwcUsersRated, error)
	FirstOrCreate() (*model.QeyKryWEwcUsersRated, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwcUsersRated, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwcUsersRatedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwcUsersRatedDo) Debug() IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwcUsersRatedDo) WithContext(ctx context.Context) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwcUsersRatedDo) ReadDB() IQeyKryWEwcUsersRatedDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwcUsersRatedDo) WriteDB() IQeyKryWEwcUsersRatedDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwcUsersRatedDo) Session(config *gorm.Session) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwcUsersRatedDo) Clauses(conds ...clause.Expression) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Returning(value interface{}, columns ...string) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwcUsersRatedDo) Not(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Or(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Select(conds ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Where(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Order(conds ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Distinct(cols ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwcUsersRatedDo) Omit(cols ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwcUsersRatedDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwcUsersRatedDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwcUsersRatedDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwcUsersRatedDo) Group(cols ...field.Expr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwcUsersRatedDo) Having(conds ...gen.Condition) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwcUsersRatedDo) Limit(limit int) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwcUsersRatedDo) Offset(offset int) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwcUsersRatedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwcUsersRatedDo) Unscoped() IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwcUsersRatedDo) Create(values ...*model.QeyKryWEwcUsersRated) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwcUsersRatedDo) CreateInBatches(values []*model.QeyKryWEwcUsersRated, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwcUsersRatedDo) Save(values ...*model.QeyKryWEwcUsersRated) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwcUsersRatedDo) First() (*model.QeyKryWEwcUsersRated, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcUsersRated), nil
	}
}

func (q qeyKryWEwcUsersRatedDo) Take() (*model.QeyKryWEwcUsersRated, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcUsersRated), nil
	}
}

func (q qeyKryWEwcUsersRatedDo) Last() (*model.QeyKryWEwcUsersRated, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcUsersRated), nil
	}
}

func (q qeyKryWEwcUsersRatedDo) Find() ([]*model.QeyKryWEwcUsersRated, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwcUsersRated), err
}

func (q qeyKryWEwcUsersRatedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcUsersRated, err error) {
	buf := make([]*model.QeyKryWEwcUsersRated, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwcUsersRatedDo) FindInBatches(result *[]*model.QeyKryWEwcUsersRated, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwcUsersRatedDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwcUsersRatedDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwcUsersRatedDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwcUsersRatedDo) Joins(fields ...field.RelationField) IQeyKryWEwcUsersRatedDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwcUsersRatedDo) Preload(fields ...field.RelationField) IQeyKryWEwcUsersRatedDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwcUsersRatedDo) FirstOrInit() (*model.QeyKryWEwcUsersRated, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcUsersRated), nil
	}
}

func (q qeyKryWEwcUsersRatedDo) FirstOrCreate() (*model.QeyKryWEwcUsersRated, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcUsersRated), nil
	}
}

func (q qeyKryWEwcUsersRatedDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwcUsersRated, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwcUsersRatedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwcUsersRatedDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwcUsersRatedDo) Delete(models ...*model.QeyKryWEwcUsersRated) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwcUsersRatedDo) withDO(do gen.Dao) *qeyKryWEwcUsersRatedDo {
	q.DO = *do.(*gen.DO)
	return q
}
