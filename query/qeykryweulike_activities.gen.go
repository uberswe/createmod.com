// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEulikeActivity(db *gorm.DB, opts ...gen.DOOption) qeyKryWEulikeActivity {
	_qeyKryWEulikeActivity := qeyKryWEulikeActivity{}

	_qeyKryWEulikeActivity.qeyKryWEulikeActivityDo.UseDB(db, opts...)
	_qeyKryWEulikeActivity.qeyKryWEulikeActivityDo.UseModel(&model.QeyKryWEulikeActivity{})

	tableName := _qeyKryWEulikeActivity.qeyKryWEulikeActivityDo.TableName()
	_qeyKryWEulikeActivity.ALL = field.NewAsterisk(tableName)
	_qeyKryWEulikeActivity.ID = field.NewInt64(tableName, "id")
	_qeyKryWEulikeActivity.ActivityID = field.NewInt64(tableName, "activity_id")
	_qeyKryWEulikeActivity.DateTime = field.NewTime(tableName, "date_time")
	_qeyKryWEulikeActivity.IP = field.NewString(tableName, "ip")
	_qeyKryWEulikeActivity.UserID = field.NewString(tableName, "user_id")
	_qeyKryWEulikeActivity.Status = field.NewString(tableName, "status")

	_qeyKryWEulikeActivity.fillFieldMap()

	return _qeyKryWEulikeActivity
}

type qeyKryWEulikeActivity struct {
	qeyKryWEulikeActivityDo

	ALL        field.Asterisk
	ID         field.Int64
	ActivityID field.Int64
	DateTime   field.Time
	IP         field.String
	UserID     field.String
	Status     field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEulikeActivity) Table(newTableName string) *qeyKryWEulikeActivity {
	q.qeyKryWEulikeActivityDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEulikeActivity) As(alias string) *qeyKryWEulikeActivity {
	q.qeyKryWEulikeActivityDo.DO = *(q.qeyKryWEulikeActivityDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEulikeActivity) updateTableName(table string) *qeyKryWEulikeActivity {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.ActivityID = field.NewInt64(table, "activity_id")
	q.DateTime = field.NewTime(table, "date_time")
	q.IP = field.NewString(table, "ip")
	q.UserID = field.NewString(table, "user_id")
	q.Status = field.NewString(table, "status")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEulikeActivity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEulikeActivity) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["activity_id"] = q.ActivityID
	q.fieldMap["date_time"] = q.DateTime
	q.fieldMap["ip"] = q.IP
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["status"] = q.Status
}

func (q qeyKryWEulikeActivity) clone(db *gorm.DB) qeyKryWEulikeActivity {
	q.qeyKryWEulikeActivityDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEulikeActivity) replaceDB(db *gorm.DB) qeyKryWEulikeActivity {
	q.qeyKryWEulikeActivityDo.ReplaceDB(db)
	return q
}

type qeyKryWEulikeActivityDo struct{ gen.DO }

type IQeyKryWEulikeActivityDo interface {
	gen.SubQuery
	Debug() IQeyKryWEulikeActivityDo
	WithContext(ctx context.Context) IQeyKryWEulikeActivityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEulikeActivityDo
	WriteDB() IQeyKryWEulikeActivityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEulikeActivityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEulikeActivityDo
	Not(conds ...gen.Condition) IQeyKryWEulikeActivityDo
	Or(conds ...gen.Condition) IQeyKryWEulikeActivityDo
	Select(conds ...field.Expr) IQeyKryWEulikeActivityDo
	Where(conds ...gen.Condition) IQeyKryWEulikeActivityDo
	Order(conds ...field.Expr) IQeyKryWEulikeActivityDo
	Distinct(cols ...field.Expr) IQeyKryWEulikeActivityDo
	Omit(cols ...field.Expr) IQeyKryWEulikeActivityDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeActivityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeActivityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeActivityDo
	Group(cols ...field.Expr) IQeyKryWEulikeActivityDo
	Having(conds ...gen.Condition) IQeyKryWEulikeActivityDo
	Limit(limit int) IQeyKryWEulikeActivityDo
	Offset(offset int) IQeyKryWEulikeActivityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeActivityDo
	Unscoped() IQeyKryWEulikeActivityDo
	Create(values ...*model.QeyKryWEulikeActivity) error
	CreateInBatches(values []*model.QeyKryWEulikeActivity, batchSize int) error
	Save(values ...*model.QeyKryWEulikeActivity) error
	First() (*model.QeyKryWEulikeActivity, error)
	Take() (*model.QeyKryWEulikeActivity, error)
	Last() (*model.QeyKryWEulikeActivity, error)
	Find() ([]*model.QeyKryWEulikeActivity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeActivity, err error)
	FindInBatches(result *[]*model.QeyKryWEulikeActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEulikeActivity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeActivityDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEulikeActivityDo
	Joins(fields ...field.RelationField) IQeyKryWEulikeActivityDo
	Preload(fields ...field.RelationField) IQeyKryWEulikeActivityDo
	FirstOrInit() (*model.QeyKryWEulikeActivity, error)
	FirstOrCreate() (*model.QeyKryWEulikeActivity, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeActivity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEulikeActivityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEulikeActivityDo) Debug() IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEulikeActivityDo) WithContext(ctx context.Context) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEulikeActivityDo) ReadDB() IQeyKryWEulikeActivityDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEulikeActivityDo) WriteDB() IQeyKryWEulikeActivityDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEulikeActivityDo) Session(config *gorm.Session) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEulikeActivityDo) Clauses(conds ...clause.Expression) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEulikeActivityDo) Returning(value interface{}, columns ...string) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEulikeActivityDo) Not(conds ...gen.Condition) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEulikeActivityDo) Or(conds ...gen.Condition) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEulikeActivityDo) Select(conds ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEulikeActivityDo) Where(conds ...gen.Condition) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEulikeActivityDo) Order(conds ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEulikeActivityDo) Distinct(cols ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEulikeActivityDo) Omit(cols ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEulikeActivityDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEulikeActivityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEulikeActivityDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEulikeActivityDo) Group(cols ...field.Expr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEulikeActivityDo) Having(conds ...gen.Condition) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEulikeActivityDo) Limit(limit int) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEulikeActivityDo) Offset(offset int) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEulikeActivityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEulikeActivityDo) Unscoped() IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEulikeActivityDo) Create(values ...*model.QeyKryWEulikeActivity) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEulikeActivityDo) CreateInBatches(values []*model.QeyKryWEulikeActivity, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEulikeActivityDo) Save(values ...*model.QeyKryWEulikeActivity) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEulikeActivityDo) First() (*model.QeyKryWEulikeActivity, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeActivity), nil
	}
}

func (q qeyKryWEulikeActivityDo) Take() (*model.QeyKryWEulikeActivity, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeActivity), nil
	}
}

func (q qeyKryWEulikeActivityDo) Last() (*model.QeyKryWEulikeActivity, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeActivity), nil
	}
}

func (q qeyKryWEulikeActivityDo) Find() ([]*model.QeyKryWEulikeActivity, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEulikeActivity), err
}

func (q qeyKryWEulikeActivityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeActivity, err error) {
	buf := make([]*model.QeyKryWEulikeActivity, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEulikeActivityDo) FindInBatches(result *[]*model.QeyKryWEulikeActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEulikeActivityDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEulikeActivityDo) Assign(attrs ...field.AssignExpr) IQeyKryWEulikeActivityDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEulikeActivityDo) Joins(fields ...field.RelationField) IQeyKryWEulikeActivityDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEulikeActivityDo) Preload(fields ...field.RelationField) IQeyKryWEulikeActivityDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEulikeActivityDo) FirstOrInit() (*model.QeyKryWEulikeActivity, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeActivity), nil
	}
}

func (q qeyKryWEulikeActivityDo) FirstOrCreate() (*model.QeyKryWEulikeActivity, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeActivity), nil
	}
}

func (q qeyKryWEulikeActivityDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeActivity, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEulikeActivityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEulikeActivityDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEulikeActivityDo) Delete(models ...*model.QeyKryWEulikeActivity) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEulikeActivityDo) withDO(do gen.Dao) *qeyKryWEulikeActivityDo {
	q.DO = *do.(*gen.DO)
	return q
}
