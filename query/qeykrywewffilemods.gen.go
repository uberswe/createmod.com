// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwffilemod(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwffilemod {
	_qeyKryWEwffilemod := qeyKryWEwffilemod{}

	_qeyKryWEwffilemod.qeyKryWEwffilemodDo.UseDB(db, opts...)
	_qeyKryWEwffilemod.qeyKryWEwffilemodDo.UseModel(&model.QeyKryWEwffilemod{})

	tableName := _qeyKryWEwffilemod.qeyKryWEwffilemodDo.TableName()
	_qeyKryWEwffilemod.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwffilemod.FilenameMD5 = field.NewBytes(tableName, "filenameMD5")
	_qeyKryWEwffilemod.Filename = field.NewString(tableName, "filename")
	_qeyKryWEwffilemod.RealPath = field.NewString(tableName, "real_path")
	_qeyKryWEwffilemod.KnownFile = field.NewInt32(tableName, "knownFile")
	_qeyKryWEwffilemod.OldMD5 = field.NewBytes(tableName, "oldMD5")
	_qeyKryWEwffilemod.NewMD5 = field.NewBytes(tableName, "newMD5")
	_qeyKryWEwffilemod.SHAC = field.NewBytes(tableName, "SHAC")
	_qeyKryWEwffilemod.StoppedOnSignature = field.NewString(tableName, "stoppedOnSignature")
	_qeyKryWEwffilemod.StoppedOnPosition = field.NewInt32(tableName, "stoppedOnPosition")
	_qeyKryWEwffilemod.IsSafeFile = field.NewString(tableName, "isSafeFile")

	_qeyKryWEwffilemod.fillFieldMap()

	return _qeyKryWEwffilemod
}

type qeyKryWEwffilemod struct {
	qeyKryWEwffilemodDo

	ALL                field.Asterisk
	FilenameMD5        field.Bytes
	Filename           field.String
	RealPath           field.String
	KnownFile          field.Int32
	OldMD5             field.Bytes
	NewMD5             field.Bytes
	SHAC               field.Bytes
	StoppedOnSignature field.String
	StoppedOnPosition  field.Int32
	IsSafeFile         field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwffilemod) Table(newTableName string) *qeyKryWEwffilemod {
	q.qeyKryWEwffilemodDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwffilemod) As(alias string) *qeyKryWEwffilemod {
	q.qeyKryWEwffilemodDo.DO = *(q.qeyKryWEwffilemodDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwffilemod) updateTableName(table string) *qeyKryWEwffilemod {
	q.ALL = field.NewAsterisk(table)
	q.FilenameMD5 = field.NewBytes(table, "filenameMD5")
	q.Filename = field.NewString(table, "filename")
	q.RealPath = field.NewString(table, "real_path")
	q.KnownFile = field.NewInt32(table, "knownFile")
	q.OldMD5 = field.NewBytes(table, "oldMD5")
	q.NewMD5 = field.NewBytes(table, "newMD5")
	q.SHAC = field.NewBytes(table, "SHAC")
	q.StoppedOnSignature = field.NewString(table, "stoppedOnSignature")
	q.StoppedOnPosition = field.NewInt32(table, "stoppedOnPosition")
	q.IsSafeFile = field.NewString(table, "isSafeFile")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwffilemod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwffilemod) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["filenameMD5"] = q.FilenameMD5
	q.fieldMap["filename"] = q.Filename
	q.fieldMap["real_path"] = q.RealPath
	q.fieldMap["knownFile"] = q.KnownFile
	q.fieldMap["oldMD5"] = q.OldMD5
	q.fieldMap["newMD5"] = q.NewMD5
	q.fieldMap["SHAC"] = q.SHAC
	q.fieldMap["stoppedOnSignature"] = q.StoppedOnSignature
	q.fieldMap["stoppedOnPosition"] = q.StoppedOnPosition
	q.fieldMap["isSafeFile"] = q.IsSafeFile
}

func (q qeyKryWEwffilemod) clone(db *gorm.DB) qeyKryWEwffilemod {
	q.qeyKryWEwffilemodDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwffilemod) replaceDB(db *gorm.DB) qeyKryWEwffilemod {
	q.qeyKryWEwffilemodDo.ReplaceDB(db)
	return q
}

type qeyKryWEwffilemodDo struct{ gen.DO }

type IQeyKryWEwffilemodDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwffilemodDo
	WithContext(ctx context.Context) IQeyKryWEwffilemodDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwffilemodDo
	WriteDB() IQeyKryWEwffilemodDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwffilemodDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwffilemodDo
	Not(conds ...gen.Condition) IQeyKryWEwffilemodDo
	Or(conds ...gen.Condition) IQeyKryWEwffilemodDo
	Select(conds ...field.Expr) IQeyKryWEwffilemodDo
	Where(conds ...gen.Condition) IQeyKryWEwffilemodDo
	Order(conds ...field.Expr) IQeyKryWEwffilemodDo
	Distinct(cols ...field.Expr) IQeyKryWEwffilemodDo
	Omit(cols ...field.Expr) IQeyKryWEwffilemodDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilemodDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilemodDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilemodDo
	Group(cols ...field.Expr) IQeyKryWEwffilemodDo
	Having(conds ...gen.Condition) IQeyKryWEwffilemodDo
	Limit(limit int) IQeyKryWEwffilemodDo
	Offset(offset int) IQeyKryWEwffilemodDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwffilemodDo
	Unscoped() IQeyKryWEwffilemodDo
	Create(values ...*model.QeyKryWEwffilemod) error
	CreateInBatches(values []*model.QeyKryWEwffilemod, batchSize int) error
	Save(values ...*model.QeyKryWEwffilemod) error
	First() (*model.QeyKryWEwffilemod, error)
	Take() (*model.QeyKryWEwffilemod, error)
	Last() (*model.QeyKryWEwffilemod, error)
	Find() ([]*model.QeyKryWEwffilemod, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwffilemod, err error)
	FindInBatches(result *[]*model.QeyKryWEwffilemod, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwffilemod) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwffilemodDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwffilemodDo
	Joins(fields ...field.RelationField) IQeyKryWEwffilemodDo
	Preload(fields ...field.RelationField) IQeyKryWEwffilemodDo
	FirstOrInit() (*model.QeyKryWEwffilemod, error)
	FirstOrCreate() (*model.QeyKryWEwffilemod, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwffilemod, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwffilemodDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwffilemodDo) Debug() IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwffilemodDo) WithContext(ctx context.Context) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwffilemodDo) ReadDB() IQeyKryWEwffilemodDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwffilemodDo) WriteDB() IQeyKryWEwffilemodDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwffilemodDo) Session(config *gorm.Session) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwffilemodDo) Clauses(conds ...clause.Expression) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwffilemodDo) Returning(value interface{}, columns ...string) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwffilemodDo) Not(conds ...gen.Condition) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwffilemodDo) Or(conds ...gen.Condition) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwffilemodDo) Select(conds ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwffilemodDo) Where(conds ...gen.Condition) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwffilemodDo) Order(conds ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwffilemodDo) Distinct(cols ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwffilemodDo) Omit(cols ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwffilemodDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwffilemodDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwffilemodDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwffilemodDo) Group(cols ...field.Expr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwffilemodDo) Having(conds ...gen.Condition) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwffilemodDo) Limit(limit int) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwffilemodDo) Offset(offset int) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwffilemodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwffilemodDo) Unscoped() IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwffilemodDo) Create(values ...*model.QeyKryWEwffilemod) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwffilemodDo) CreateInBatches(values []*model.QeyKryWEwffilemod, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwffilemodDo) Save(values ...*model.QeyKryWEwffilemod) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwffilemodDo) First() (*model.QeyKryWEwffilemod, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilemod), nil
	}
}

func (q qeyKryWEwffilemodDo) Take() (*model.QeyKryWEwffilemod, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilemod), nil
	}
}

func (q qeyKryWEwffilemodDo) Last() (*model.QeyKryWEwffilemod, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilemod), nil
	}
}

func (q qeyKryWEwffilemodDo) Find() ([]*model.QeyKryWEwffilemod, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwffilemod), err
}

func (q qeyKryWEwffilemodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwffilemod, err error) {
	buf := make([]*model.QeyKryWEwffilemod, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwffilemodDo) FindInBatches(result *[]*model.QeyKryWEwffilemod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwffilemodDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwffilemodDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwffilemodDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwffilemodDo) Joins(fields ...field.RelationField) IQeyKryWEwffilemodDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwffilemodDo) Preload(fields ...field.RelationField) IQeyKryWEwffilemodDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwffilemodDo) FirstOrInit() (*model.QeyKryWEwffilemod, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilemod), nil
	}
}

func (q qeyKryWEwffilemodDo) FirstOrCreate() (*model.QeyKryWEwffilemod, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwffilemod), nil
	}
}

func (q qeyKryWEwffilemodDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwffilemod, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwffilemodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwffilemodDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwffilemodDo) Delete(models ...*model.QeyKryWEwffilemod) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwffilemodDo) withDO(do gen.Dao) *qeyKryWEwffilemodDo {
	q.DO = *do.(*gen.DO)
	return q
}
