// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfls2faSecret(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfls2faSecret {
	_qeyKryWEwfls2faSecret := qeyKryWEwfls2faSecret{}

	_qeyKryWEwfls2faSecret.qeyKryWEwfls2faSecretDo.UseDB(db, opts...)
	_qeyKryWEwfls2faSecret.qeyKryWEwfls2faSecretDo.UseModel(&model.QeyKryWEwfls2faSecret{})

	tableName := _qeyKryWEwfls2faSecret.qeyKryWEwfls2faSecretDo.TableName()
	_qeyKryWEwfls2faSecret.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfls2faSecret.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfls2faSecret.UserID = field.NewInt64(tableName, "user_id")
	_qeyKryWEwfls2faSecret.Secret = field.NewBytes(tableName, "secret")
	_qeyKryWEwfls2faSecret.Recovery = field.NewBytes(tableName, "recovery")
	_qeyKryWEwfls2faSecret.Ctime = field.NewInt32(tableName, "ctime")
	_qeyKryWEwfls2faSecret.Vtime = field.NewInt32(tableName, "vtime")
	_qeyKryWEwfls2faSecret.Mode = field.NewString(tableName, "mode")

	_qeyKryWEwfls2faSecret.fillFieldMap()

	return _qeyKryWEwfls2faSecret
}

type qeyKryWEwfls2faSecret struct {
	qeyKryWEwfls2faSecretDo

	ALL      field.Asterisk
	ID       field.Int32
	UserID   field.Int64
	Secret   field.Bytes
	Recovery field.Bytes
	Ctime    field.Int32
	Vtime    field.Int32
	Mode     field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfls2faSecret) Table(newTableName string) *qeyKryWEwfls2faSecret {
	q.qeyKryWEwfls2faSecretDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfls2faSecret) As(alias string) *qeyKryWEwfls2faSecret {
	q.qeyKryWEwfls2faSecretDo.DO = *(q.qeyKryWEwfls2faSecretDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfls2faSecret) updateTableName(table string) *qeyKryWEwfls2faSecret {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.UserID = field.NewInt64(table, "user_id")
	q.Secret = field.NewBytes(table, "secret")
	q.Recovery = field.NewBytes(table, "recovery")
	q.Ctime = field.NewInt32(table, "ctime")
	q.Vtime = field.NewInt32(table, "vtime")
	q.Mode = field.NewString(table, "mode")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfls2faSecret) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfls2faSecret) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["secret"] = q.Secret
	q.fieldMap["recovery"] = q.Recovery
	q.fieldMap["ctime"] = q.Ctime
	q.fieldMap["vtime"] = q.Vtime
	q.fieldMap["mode"] = q.Mode
}

func (q qeyKryWEwfls2faSecret) clone(db *gorm.DB) qeyKryWEwfls2faSecret {
	q.qeyKryWEwfls2faSecretDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfls2faSecret) replaceDB(db *gorm.DB) qeyKryWEwfls2faSecret {
	q.qeyKryWEwfls2faSecretDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfls2faSecretDo struct{ gen.DO }

type IQeyKryWEwfls2faSecretDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfls2faSecretDo
	WithContext(ctx context.Context) IQeyKryWEwfls2faSecretDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfls2faSecretDo
	WriteDB() IQeyKryWEwfls2faSecretDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfls2faSecretDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfls2faSecretDo
	Not(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo
	Or(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo
	Select(conds ...field.Expr) IQeyKryWEwfls2faSecretDo
	Where(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo
	Order(conds ...field.Expr) IQeyKryWEwfls2faSecretDo
	Distinct(cols ...field.Expr) IQeyKryWEwfls2faSecretDo
	Omit(cols ...field.Expr) IQeyKryWEwfls2faSecretDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfls2faSecretDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfls2faSecretDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfls2faSecretDo
	Group(cols ...field.Expr) IQeyKryWEwfls2faSecretDo
	Having(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo
	Limit(limit int) IQeyKryWEwfls2faSecretDo
	Offset(offset int) IQeyKryWEwfls2faSecretDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfls2faSecretDo
	Unscoped() IQeyKryWEwfls2faSecretDo
	Create(values ...*model.QeyKryWEwfls2faSecret) error
	CreateInBatches(values []*model.QeyKryWEwfls2faSecret, batchSize int) error
	Save(values ...*model.QeyKryWEwfls2faSecret) error
	First() (*model.QeyKryWEwfls2faSecret, error)
	Take() (*model.QeyKryWEwfls2faSecret, error)
	Last() (*model.QeyKryWEwfls2faSecret, error)
	Find() ([]*model.QeyKryWEwfls2faSecret, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfls2faSecret, err error)
	FindInBatches(result *[]*model.QeyKryWEwfls2faSecret, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfls2faSecret) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfls2faSecretDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfls2faSecretDo
	Joins(fields ...field.RelationField) IQeyKryWEwfls2faSecretDo
	Preload(fields ...field.RelationField) IQeyKryWEwfls2faSecretDo
	FirstOrInit() (*model.QeyKryWEwfls2faSecret, error)
	FirstOrCreate() (*model.QeyKryWEwfls2faSecret, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfls2faSecret, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfls2faSecretDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfls2faSecretDo) Debug() IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfls2faSecretDo) WithContext(ctx context.Context) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfls2faSecretDo) ReadDB() IQeyKryWEwfls2faSecretDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfls2faSecretDo) WriteDB() IQeyKryWEwfls2faSecretDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfls2faSecretDo) Session(config *gorm.Session) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfls2faSecretDo) Clauses(conds ...clause.Expression) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Returning(value interface{}, columns ...string) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfls2faSecretDo) Not(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Or(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Select(conds ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Where(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Order(conds ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Distinct(cols ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfls2faSecretDo) Omit(cols ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfls2faSecretDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfls2faSecretDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfls2faSecretDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfls2faSecretDo) Group(cols ...field.Expr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfls2faSecretDo) Having(conds ...gen.Condition) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfls2faSecretDo) Limit(limit int) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfls2faSecretDo) Offset(offset int) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfls2faSecretDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfls2faSecretDo) Unscoped() IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfls2faSecretDo) Create(values ...*model.QeyKryWEwfls2faSecret) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfls2faSecretDo) CreateInBatches(values []*model.QeyKryWEwfls2faSecret, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfls2faSecretDo) Save(values ...*model.QeyKryWEwfls2faSecret) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfls2faSecretDo) First() (*model.QeyKryWEwfls2faSecret, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfls2faSecret), nil
	}
}

func (q qeyKryWEwfls2faSecretDo) Take() (*model.QeyKryWEwfls2faSecret, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfls2faSecret), nil
	}
}

func (q qeyKryWEwfls2faSecretDo) Last() (*model.QeyKryWEwfls2faSecret, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfls2faSecret), nil
	}
}

func (q qeyKryWEwfls2faSecretDo) Find() ([]*model.QeyKryWEwfls2faSecret, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfls2faSecret), err
}

func (q qeyKryWEwfls2faSecretDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfls2faSecret, err error) {
	buf := make([]*model.QeyKryWEwfls2faSecret, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfls2faSecretDo) FindInBatches(result *[]*model.QeyKryWEwfls2faSecret, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfls2faSecretDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfls2faSecretDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfls2faSecretDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfls2faSecretDo) Joins(fields ...field.RelationField) IQeyKryWEwfls2faSecretDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfls2faSecretDo) Preload(fields ...field.RelationField) IQeyKryWEwfls2faSecretDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfls2faSecretDo) FirstOrInit() (*model.QeyKryWEwfls2faSecret, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfls2faSecret), nil
	}
}

func (q qeyKryWEwfls2faSecretDo) FirstOrCreate() (*model.QeyKryWEwfls2faSecret, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfls2faSecret), nil
	}
}

func (q qeyKryWEwfls2faSecretDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfls2faSecret, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfls2faSecretDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfls2faSecretDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfls2faSecretDo) Delete(models ...*model.QeyKryWEwfls2faSecret) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfls2faSecretDo) withDO(do gen.Dao) *qeyKryWEwfls2faSecretDo {
	q.DO = *do.(*gen.DO)
	return q
}
