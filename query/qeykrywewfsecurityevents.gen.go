// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfsecurityevent(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfsecurityevent {
	_qeyKryWEwfsecurityevent := qeyKryWEwfsecurityevent{}

	_qeyKryWEwfsecurityevent.qeyKryWEwfsecurityeventDo.UseDB(db, opts...)
	_qeyKryWEwfsecurityevent.qeyKryWEwfsecurityeventDo.UseModel(&model.QeyKryWEwfsecurityevent{})

	tableName := _qeyKryWEwfsecurityevent.qeyKryWEwfsecurityeventDo.TableName()
	_qeyKryWEwfsecurityevent.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfsecurityevent.ID = field.NewInt64(tableName, "id")
	_qeyKryWEwfsecurityevent.Type = field.NewString(tableName, "type")
	_qeyKryWEwfsecurityevent.Data = field.NewString(tableName, "data")
	_qeyKryWEwfsecurityevent.EventTime = field.NewFloat64(tableName, "event_time")
	_qeyKryWEwfsecurityevent.State = field.NewString(tableName, "state")
	_qeyKryWEwfsecurityevent.StateTimestamp = field.NewTime(tableName, "state_timestamp")

	_qeyKryWEwfsecurityevent.fillFieldMap()

	return _qeyKryWEwfsecurityevent
}

type qeyKryWEwfsecurityevent struct {
	qeyKryWEwfsecurityeventDo

	ALL            field.Asterisk
	ID             field.Int64
	Type           field.String
	Data           field.String
	EventTime      field.Float64
	State          field.String
	StateTimestamp field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfsecurityevent) Table(newTableName string) *qeyKryWEwfsecurityevent {
	q.qeyKryWEwfsecurityeventDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfsecurityevent) As(alias string) *qeyKryWEwfsecurityevent {
	q.qeyKryWEwfsecurityeventDo.DO = *(q.qeyKryWEwfsecurityeventDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfsecurityevent) updateTableName(table string) *qeyKryWEwfsecurityevent {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Type = field.NewString(table, "type")
	q.Data = field.NewString(table, "data")
	q.EventTime = field.NewFloat64(table, "event_time")
	q.State = field.NewString(table, "state")
	q.StateTimestamp = field.NewTime(table, "state_timestamp")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfsecurityevent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfsecurityevent) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["type"] = q.Type
	q.fieldMap["data"] = q.Data
	q.fieldMap["event_time"] = q.EventTime
	q.fieldMap["state"] = q.State
	q.fieldMap["state_timestamp"] = q.StateTimestamp
}

func (q qeyKryWEwfsecurityevent) clone(db *gorm.DB) qeyKryWEwfsecurityevent {
	q.qeyKryWEwfsecurityeventDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfsecurityevent) replaceDB(db *gorm.DB) qeyKryWEwfsecurityevent {
	q.qeyKryWEwfsecurityeventDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfsecurityeventDo struct{ gen.DO }

type IQeyKryWEwfsecurityeventDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfsecurityeventDo
	WithContext(ctx context.Context) IQeyKryWEwfsecurityeventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfsecurityeventDo
	WriteDB() IQeyKryWEwfsecurityeventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfsecurityeventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfsecurityeventDo
	Not(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo
	Or(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo
	Select(conds ...field.Expr) IQeyKryWEwfsecurityeventDo
	Where(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo
	Order(conds ...field.Expr) IQeyKryWEwfsecurityeventDo
	Distinct(cols ...field.Expr) IQeyKryWEwfsecurityeventDo
	Omit(cols ...field.Expr) IQeyKryWEwfsecurityeventDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsecurityeventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsecurityeventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsecurityeventDo
	Group(cols ...field.Expr) IQeyKryWEwfsecurityeventDo
	Having(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo
	Limit(limit int) IQeyKryWEwfsecurityeventDo
	Offset(offset int) IQeyKryWEwfsecurityeventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfsecurityeventDo
	Unscoped() IQeyKryWEwfsecurityeventDo
	Create(values ...*model.QeyKryWEwfsecurityevent) error
	CreateInBatches(values []*model.QeyKryWEwfsecurityevent, batchSize int) error
	Save(values ...*model.QeyKryWEwfsecurityevent) error
	First() (*model.QeyKryWEwfsecurityevent, error)
	Take() (*model.QeyKryWEwfsecurityevent, error)
	Last() (*model.QeyKryWEwfsecurityevent, error)
	Find() ([]*model.QeyKryWEwfsecurityevent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfsecurityevent, err error)
	FindInBatches(result *[]*model.QeyKryWEwfsecurityevent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfsecurityevent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfsecurityeventDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfsecurityeventDo
	Joins(fields ...field.RelationField) IQeyKryWEwfsecurityeventDo
	Preload(fields ...field.RelationField) IQeyKryWEwfsecurityeventDo
	FirstOrInit() (*model.QeyKryWEwfsecurityevent, error)
	FirstOrCreate() (*model.QeyKryWEwfsecurityevent, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfsecurityevent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfsecurityeventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfsecurityeventDo) Debug() IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfsecurityeventDo) WithContext(ctx context.Context) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfsecurityeventDo) ReadDB() IQeyKryWEwfsecurityeventDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfsecurityeventDo) WriteDB() IQeyKryWEwfsecurityeventDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfsecurityeventDo) Session(config *gorm.Session) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfsecurityeventDo) Clauses(conds ...clause.Expression) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Returning(value interface{}, columns ...string) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfsecurityeventDo) Not(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Or(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Select(conds ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Where(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Order(conds ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Distinct(cols ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfsecurityeventDo) Omit(cols ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfsecurityeventDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfsecurityeventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfsecurityeventDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfsecurityeventDo) Group(cols ...field.Expr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfsecurityeventDo) Having(conds ...gen.Condition) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfsecurityeventDo) Limit(limit int) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfsecurityeventDo) Offset(offset int) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfsecurityeventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfsecurityeventDo) Unscoped() IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfsecurityeventDo) Create(values ...*model.QeyKryWEwfsecurityevent) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfsecurityeventDo) CreateInBatches(values []*model.QeyKryWEwfsecurityevent, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfsecurityeventDo) Save(values ...*model.QeyKryWEwfsecurityevent) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfsecurityeventDo) First() (*model.QeyKryWEwfsecurityevent, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsecurityevent), nil
	}
}

func (q qeyKryWEwfsecurityeventDo) Take() (*model.QeyKryWEwfsecurityevent, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsecurityevent), nil
	}
}

func (q qeyKryWEwfsecurityeventDo) Last() (*model.QeyKryWEwfsecurityevent, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsecurityevent), nil
	}
}

func (q qeyKryWEwfsecurityeventDo) Find() ([]*model.QeyKryWEwfsecurityevent, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfsecurityevent), err
}

func (q qeyKryWEwfsecurityeventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfsecurityevent, err error) {
	buf := make([]*model.QeyKryWEwfsecurityevent, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfsecurityeventDo) FindInBatches(result *[]*model.QeyKryWEwfsecurityevent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfsecurityeventDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfsecurityeventDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfsecurityeventDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfsecurityeventDo) Joins(fields ...field.RelationField) IQeyKryWEwfsecurityeventDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfsecurityeventDo) Preload(fields ...field.RelationField) IQeyKryWEwfsecurityeventDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfsecurityeventDo) FirstOrInit() (*model.QeyKryWEwfsecurityevent, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsecurityevent), nil
	}
}

func (q qeyKryWEwfsecurityeventDo) FirstOrCreate() (*model.QeyKryWEwfsecurityevent, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsecurityevent), nil
	}
}

func (q qeyKryWEwfsecurityeventDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfsecurityevent, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfsecurityeventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfsecurityeventDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfsecurityeventDo) Delete(models ...*model.QeyKryWEwfsecurityevent) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfsecurityeventDo) withDO(do gen.Dao) *qeyKryWEwfsecurityeventDo {
	q.DO = *do.(*gen.DO)
	return q
}
