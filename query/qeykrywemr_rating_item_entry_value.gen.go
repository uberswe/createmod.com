// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEmrRatingItemEntryValue(db *gorm.DB, opts ...gen.DOOption) qeyKryWEmrRatingItemEntryValue {
	_qeyKryWEmrRatingItemEntryValue := qeyKryWEmrRatingItemEntryValue{}

	_qeyKryWEmrRatingItemEntryValue.qeyKryWEmrRatingItemEntryValueDo.UseDB(db, opts...)
	_qeyKryWEmrRatingItemEntryValue.qeyKryWEmrRatingItemEntryValueDo.UseModel(&model.QeyKryWEmrRatingItemEntryValue{})

	tableName := _qeyKryWEmrRatingItemEntryValue.qeyKryWEmrRatingItemEntryValueDo.TableName()
	_qeyKryWEmrRatingItemEntryValue.ALL = field.NewAsterisk(tableName)
	_qeyKryWEmrRatingItemEntryValue.RatingItemEntryValueID = field.NewInt64(tableName, "rating_item_entry_value_id")
	_qeyKryWEmrRatingItemEntryValue.RatingItemEntryID = field.NewInt64(tableName, "rating_item_entry_id")
	_qeyKryWEmrRatingItemEntryValue.RatingItemID = field.NewInt64(tableName, "rating_item_id")
	_qeyKryWEmrRatingItemEntryValue.Value = field.NewInt32(tableName, "value")

	_qeyKryWEmrRatingItemEntryValue.fillFieldMap()

	return _qeyKryWEmrRatingItemEntryValue
}

type qeyKryWEmrRatingItemEntryValue struct {
	qeyKryWEmrRatingItemEntryValueDo

	ALL                    field.Asterisk
	RatingItemEntryValueID field.Int64
	RatingItemEntryID      field.Int64
	RatingItemID           field.Int64
	Value                  field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEmrRatingItemEntryValue) Table(newTableName string) *qeyKryWEmrRatingItemEntryValue {
	q.qeyKryWEmrRatingItemEntryValueDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEmrRatingItemEntryValue) As(alias string) *qeyKryWEmrRatingItemEntryValue {
	q.qeyKryWEmrRatingItemEntryValueDo.DO = *(q.qeyKryWEmrRatingItemEntryValueDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEmrRatingItemEntryValue) updateTableName(table string) *qeyKryWEmrRatingItemEntryValue {
	q.ALL = field.NewAsterisk(table)
	q.RatingItemEntryValueID = field.NewInt64(table, "rating_item_entry_value_id")
	q.RatingItemEntryID = field.NewInt64(table, "rating_item_entry_id")
	q.RatingItemID = field.NewInt64(table, "rating_item_id")
	q.Value = field.NewInt32(table, "value")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEmrRatingItemEntryValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEmrRatingItemEntryValue) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["rating_item_entry_value_id"] = q.RatingItemEntryValueID
	q.fieldMap["rating_item_entry_id"] = q.RatingItemEntryID
	q.fieldMap["rating_item_id"] = q.RatingItemID
	q.fieldMap["value"] = q.Value
}

func (q qeyKryWEmrRatingItemEntryValue) clone(db *gorm.DB) qeyKryWEmrRatingItemEntryValue {
	q.qeyKryWEmrRatingItemEntryValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEmrRatingItemEntryValue) replaceDB(db *gorm.DB) qeyKryWEmrRatingItemEntryValue {
	q.qeyKryWEmrRatingItemEntryValueDo.ReplaceDB(db)
	return q
}

type qeyKryWEmrRatingItemEntryValueDo struct{ gen.DO }

type IQeyKryWEmrRatingItemEntryValueDo interface {
	gen.SubQuery
	Debug() IQeyKryWEmrRatingItemEntryValueDo
	WithContext(ctx context.Context) IQeyKryWEmrRatingItemEntryValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEmrRatingItemEntryValueDo
	WriteDB() IQeyKryWEmrRatingItemEntryValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEmrRatingItemEntryValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEmrRatingItemEntryValueDo
	Not(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo
	Or(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo
	Select(conds ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	Where(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo
	Order(conds ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	Distinct(cols ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	Omit(cols ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	Group(cols ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo
	Having(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo
	Limit(limit int) IQeyKryWEmrRatingItemEntryValueDo
	Offset(offset int) IQeyKryWEmrRatingItemEntryValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingItemEntryValueDo
	Unscoped() IQeyKryWEmrRatingItemEntryValueDo
	Create(values ...*model.QeyKryWEmrRatingItemEntryValue) error
	CreateInBatches(values []*model.QeyKryWEmrRatingItemEntryValue, batchSize int) error
	Save(values ...*model.QeyKryWEmrRatingItemEntryValue) error
	First() (*model.QeyKryWEmrRatingItemEntryValue, error)
	Take() (*model.QeyKryWEmrRatingItemEntryValue, error)
	Last() (*model.QeyKryWEmrRatingItemEntryValue, error)
	Find() ([]*model.QeyKryWEmrRatingItemEntryValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingItemEntryValue, err error)
	FindInBatches(result *[]*model.QeyKryWEmrRatingItemEntryValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEmrRatingItemEntryValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryValueDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryValueDo
	Joins(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryValueDo
	Preload(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryValueDo
	FirstOrInit() (*model.QeyKryWEmrRatingItemEntryValue, error)
	FirstOrCreate() (*model.QeyKryWEmrRatingItemEntryValue, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingItemEntryValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEmrRatingItemEntryValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEmrRatingItemEntryValueDo) Debug() IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEmrRatingItemEntryValueDo) WithContext(ctx context.Context) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEmrRatingItemEntryValueDo) ReadDB() IQeyKryWEmrRatingItemEntryValueDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEmrRatingItemEntryValueDo) WriteDB() IQeyKryWEmrRatingItemEntryValueDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEmrRatingItemEntryValueDo) Session(config *gorm.Session) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Clauses(conds ...clause.Expression) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Returning(value interface{}, columns ...string) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Not(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Or(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Select(conds ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Where(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Order(conds ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Distinct(cols ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Omit(cols ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Group(cols ...field.Expr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Having(conds ...gen.Condition) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Limit(limit int) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Offset(offset int) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Unscoped() IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEmrRatingItemEntryValueDo) Create(values ...*model.QeyKryWEmrRatingItemEntryValue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEmrRatingItemEntryValueDo) CreateInBatches(values []*model.QeyKryWEmrRatingItemEntryValue, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEmrRatingItemEntryValueDo) Save(values ...*model.QeyKryWEmrRatingItemEntryValue) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEmrRatingItemEntryValueDo) First() (*model.QeyKryWEmrRatingItemEntryValue, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntryValue), nil
	}
}

func (q qeyKryWEmrRatingItemEntryValueDo) Take() (*model.QeyKryWEmrRatingItemEntryValue, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntryValue), nil
	}
}

func (q qeyKryWEmrRatingItemEntryValueDo) Last() (*model.QeyKryWEmrRatingItemEntryValue, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntryValue), nil
	}
}

func (q qeyKryWEmrRatingItemEntryValueDo) Find() ([]*model.QeyKryWEmrRatingItemEntryValue, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEmrRatingItemEntryValue), err
}

func (q qeyKryWEmrRatingItemEntryValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingItemEntryValue, err error) {
	buf := make([]*model.QeyKryWEmrRatingItemEntryValue, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEmrRatingItemEntryValueDo) FindInBatches(result *[]*model.QeyKryWEmrRatingItemEntryValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEmrRatingItemEntryValueDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingItemEntryValueDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEmrRatingItemEntryValueDo) Joins(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryValueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingItemEntryValueDo) Preload(fields ...field.RelationField) IQeyKryWEmrRatingItemEntryValueDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingItemEntryValueDo) FirstOrInit() (*model.QeyKryWEmrRatingItemEntryValue, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntryValue), nil
	}
}

func (q qeyKryWEmrRatingItemEntryValueDo) FirstOrCreate() (*model.QeyKryWEmrRatingItemEntryValue, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingItemEntryValue), nil
	}
}

func (q qeyKryWEmrRatingItemEntryValueDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingItemEntryValue, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEmrRatingItemEntryValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEmrRatingItemEntryValueDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEmrRatingItemEntryValueDo) Delete(models ...*model.QeyKryWEmrRatingItemEntryValue) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEmrRatingItemEntryValueDo) withDO(do gen.Dao) *qeyKryWEmrRatingItemEntryValueDo {
	q.DO = *do.(*gen.DO)
	return q
}
