// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfknownfilelist(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfknownfilelist {
	_qeyKryWEwfknownfilelist := qeyKryWEwfknownfilelist{}

	_qeyKryWEwfknownfilelist.qeyKryWEwfknownfilelistDo.UseDB(db, opts...)
	_qeyKryWEwfknownfilelist.qeyKryWEwfknownfilelistDo.UseModel(&model.QeyKryWEwfknownfilelist{})

	tableName := _qeyKryWEwfknownfilelist.qeyKryWEwfknownfilelistDo.TableName()
	_qeyKryWEwfknownfilelist.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfknownfilelist.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfknownfilelist.Path = field.NewString(tableName, "path")
	_qeyKryWEwfknownfilelist.WordpressPath = field.NewString(tableName, "wordpress_path")

	_qeyKryWEwfknownfilelist.fillFieldMap()

	return _qeyKryWEwfknownfilelist
}

type qeyKryWEwfknownfilelist struct {
	qeyKryWEwfknownfilelistDo

	ALL           field.Asterisk
	ID            field.Int32
	Path          field.String
	WordpressPath field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfknownfilelist) Table(newTableName string) *qeyKryWEwfknownfilelist {
	q.qeyKryWEwfknownfilelistDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfknownfilelist) As(alias string) *qeyKryWEwfknownfilelist {
	q.qeyKryWEwfknownfilelistDo.DO = *(q.qeyKryWEwfknownfilelistDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfknownfilelist) updateTableName(table string) *qeyKryWEwfknownfilelist {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Path = field.NewString(table, "path")
	q.WordpressPath = field.NewString(table, "wordpress_path")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfknownfilelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfknownfilelist) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["id"] = q.ID
	q.fieldMap["path"] = q.Path
	q.fieldMap["wordpress_path"] = q.WordpressPath
}

func (q qeyKryWEwfknownfilelist) clone(db *gorm.DB) qeyKryWEwfknownfilelist {
	q.qeyKryWEwfknownfilelistDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfknownfilelist) replaceDB(db *gorm.DB) qeyKryWEwfknownfilelist {
	q.qeyKryWEwfknownfilelistDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfknownfilelistDo struct{ gen.DO }

type IQeyKryWEwfknownfilelistDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfknownfilelistDo
	WithContext(ctx context.Context) IQeyKryWEwfknownfilelistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfknownfilelistDo
	WriteDB() IQeyKryWEwfknownfilelistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfknownfilelistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfknownfilelistDo
	Not(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo
	Or(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo
	Select(conds ...field.Expr) IQeyKryWEwfknownfilelistDo
	Where(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo
	Order(conds ...field.Expr) IQeyKryWEwfknownfilelistDo
	Distinct(cols ...field.Expr) IQeyKryWEwfknownfilelistDo
	Omit(cols ...field.Expr) IQeyKryWEwfknownfilelistDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfknownfilelistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfknownfilelistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfknownfilelistDo
	Group(cols ...field.Expr) IQeyKryWEwfknownfilelistDo
	Having(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo
	Limit(limit int) IQeyKryWEwfknownfilelistDo
	Offset(offset int) IQeyKryWEwfknownfilelistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfknownfilelistDo
	Unscoped() IQeyKryWEwfknownfilelistDo
	Create(values ...*model.QeyKryWEwfknownfilelist) error
	CreateInBatches(values []*model.QeyKryWEwfknownfilelist, batchSize int) error
	Save(values ...*model.QeyKryWEwfknownfilelist) error
	First() (*model.QeyKryWEwfknownfilelist, error)
	Take() (*model.QeyKryWEwfknownfilelist, error)
	Last() (*model.QeyKryWEwfknownfilelist, error)
	Find() ([]*model.QeyKryWEwfknownfilelist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfknownfilelist, err error)
	FindInBatches(result *[]*model.QeyKryWEwfknownfilelist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfknownfilelist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfknownfilelistDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfknownfilelistDo
	Joins(fields ...field.RelationField) IQeyKryWEwfknownfilelistDo
	Preload(fields ...field.RelationField) IQeyKryWEwfknownfilelistDo
	FirstOrInit() (*model.QeyKryWEwfknownfilelist, error)
	FirstOrCreate() (*model.QeyKryWEwfknownfilelist, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfknownfilelist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfknownfilelistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfknownfilelistDo) Debug() IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfknownfilelistDo) WithContext(ctx context.Context) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfknownfilelistDo) ReadDB() IQeyKryWEwfknownfilelistDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfknownfilelistDo) WriteDB() IQeyKryWEwfknownfilelistDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfknownfilelistDo) Session(config *gorm.Session) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfknownfilelistDo) Clauses(conds ...clause.Expression) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Returning(value interface{}, columns ...string) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfknownfilelistDo) Not(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Or(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Select(conds ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Where(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Order(conds ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Distinct(cols ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfknownfilelistDo) Omit(cols ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfknownfilelistDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfknownfilelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfknownfilelistDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfknownfilelistDo) Group(cols ...field.Expr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfknownfilelistDo) Having(conds ...gen.Condition) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfknownfilelistDo) Limit(limit int) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfknownfilelistDo) Offset(offset int) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfknownfilelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfknownfilelistDo) Unscoped() IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfknownfilelistDo) Create(values ...*model.QeyKryWEwfknownfilelist) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfknownfilelistDo) CreateInBatches(values []*model.QeyKryWEwfknownfilelist, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfknownfilelistDo) Save(values ...*model.QeyKryWEwfknownfilelist) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfknownfilelistDo) First() (*model.QeyKryWEwfknownfilelist, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfknownfilelist), nil
	}
}

func (q qeyKryWEwfknownfilelistDo) Take() (*model.QeyKryWEwfknownfilelist, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfknownfilelist), nil
	}
}

func (q qeyKryWEwfknownfilelistDo) Last() (*model.QeyKryWEwfknownfilelist, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfknownfilelist), nil
	}
}

func (q qeyKryWEwfknownfilelistDo) Find() ([]*model.QeyKryWEwfknownfilelist, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfknownfilelist), err
}

func (q qeyKryWEwfknownfilelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfknownfilelist, err error) {
	buf := make([]*model.QeyKryWEwfknownfilelist, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfknownfilelistDo) FindInBatches(result *[]*model.QeyKryWEwfknownfilelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfknownfilelistDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfknownfilelistDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfknownfilelistDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfknownfilelistDo) Joins(fields ...field.RelationField) IQeyKryWEwfknownfilelistDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfknownfilelistDo) Preload(fields ...field.RelationField) IQeyKryWEwfknownfilelistDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfknownfilelistDo) FirstOrInit() (*model.QeyKryWEwfknownfilelist, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfknownfilelist), nil
	}
}

func (q qeyKryWEwfknownfilelistDo) FirstOrCreate() (*model.QeyKryWEwfknownfilelist, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfknownfilelist), nil
	}
}

func (q qeyKryWEwfknownfilelistDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfknownfilelist, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfknownfilelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfknownfilelistDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfknownfilelistDo) Delete(models ...*model.QeyKryWEwfknownfilelist) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfknownfilelistDo) withDO(do gen.Dao) *qeyKryWEwfknownfilelistDo {
	q.DO = *do.(*gen.DO)
	return q
}
