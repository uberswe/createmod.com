// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfsnipcache(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfsnipcache {
	_qeyKryWEwfsnipcache := qeyKryWEwfsnipcache{}

	_qeyKryWEwfsnipcache.qeyKryWEwfsnipcacheDo.UseDB(db, opts...)
	_qeyKryWEwfsnipcache.qeyKryWEwfsnipcacheDo.UseModel(&model.QeyKryWEwfsnipcache{})

	tableName := _qeyKryWEwfsnipcache.qeyKryWEwfsnipcacheDo.TableName()
	_qeyKryWEwfsnipcache.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfsnipcache.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfsnipcache.IP = field.NewString(tableName, "IP")
	_qeyKryWEwfsnipcache.Expiration = field.NewTime(tableName, "expiration")
	_qeyKryWEwfsnipcache.Body = field.NewString(tableName, "body")
	_qeyKryWEwfsnipcache.Count_ = field.NewInt32(tableName, "count")
	_qeyKryWEwfsnipcache.Type = field.NewInt32(tableName, "type")

	_qeyKryWEwfsnipcache.fillFieldMap()

	return _qeyKryWEwfsnipcache
}

type qeyKryWEwfsnipcache struct {
	qeyKryWEwfsnipcacheDo

	ALL        field.Asterisk
	ID         field.Int32
	IP         field.String
	Expiration field.Time
	Body       field.String
	Count_     field.Int32
	Type       field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfsnipcache) Table(newTableName string) *qeyKryWEwfsnipcache {
	q.qeyKryWEwfsnipcacheDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfsnipcache) As(alias string) *qeyKryWEwfsnipcache {
	q.qeyKryWEwfsnipcacheDo.DO = *(q.qeyKryWEwfsnipcacheDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfsnipcache) updateTableName(table string) *qeyKryWEwfsnipcache {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.IP = field.NewString(table, "IP")
	q.Expiration = field.NewTime(table, "expiration")
	q.Body = field.NewString(table, "body")
	q.Count_ = field.NewInt32(table, "count")
	q.Type = field.NewInt32(table, "type")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfsnipcache) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfsnipcache) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["IP"] = q.IP
	q.fieldMap["expiration"] = q.Expiration
	q.fieldMap["body"] = q.Body
	q.fieldMap["count"] = q.Count_
	q.fieldMap["type"] = q.Type
}

func (q qeyKryWEwfsnipcache) clone(db *gorm.DB) qeyKryWEwfsnipcache {
	q.qeyKryWEwfsnipcacheDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfsnipcache) replaceDB(db *gorm.DB) qeyKryWEwfsnipcache {
	q.qeyKryWEwfsnipcacheDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfsnipcacheDo struct{ gen.DO }

type IQeyKryWEwfsnipcacheDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfsnipcacheDo
	WithContext(ctx context.Context) IQeyKryWEwfsnipcacheDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfsnipcacheDo
	WriteDB() IQeyKryWEwfsnipcacheDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfsnipcacheDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfsnipcacheDo
	Not(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo
	Or(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo
	Select(conds ...field.Expr) IQeyKryWEwfsnipcacheDo
	Where(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo
	Order(conds ...field.Expr) IQeyKryWEwfsnipcacheDo
	Distinct(cols ...field.Expr) IQeyKryWEwfsnipcacheDo
	Omit(cols ...field.Expr) IQeyKryWEwfsnipcacheDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsnipcacheDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsnipcacheDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsnipcacheDo
	Group(cols ...field.Expr) IQeyKryWEwfsnipcacheDo
	Having(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo
	Limit(limit int) IQeyKryWEwfsnipcacheDo
	Offset(offset int) IQeyKryWEwfsnipcacheDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfsnipcacheDo
	Unscoped() IQeyKryWEwfsnipcacheDo
	Create(values ...*model.QeyKryWEwfsnipcache) error
	CreateInBatches(values []*model.QeyKryWEwfsnipcache, batchSize int) error
	Save(values ...*model.QeyKryWEwfsnipcache) error
	First() (*model.QeyKryWEwfsnipcache, error)
	Take() (*model.QeyKryWEwfsnipcache, error)
	Last() (*model.QeyKryWEwfsnipcache, error)
	Find() ([]*model.QeyKryWEwfsnipcache, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfsnipcache, err error)
	FindInBatches(result *[]*model.QeyKryWEwfsnipcache, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfsnipcache) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfsnipcacheDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfsnipcacheDo
	Joins(fields ...field.RelationField) IQeyKryWEwfsnipcacheDo
	Preload(fields ...field.RelationField) IQeyKryWEwfsnipcacheDo
	FirstOrInit() (*model.QeyKryWEwfsnipcache, error)
	FirstOrCreate() (*model.QeyKryWEwfsnipcache, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfsnipcache, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfsnipcacheDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfsnipcacheDo) Debug() IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfsnipcacheDo) WithContext(ctx context.Context) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfsnipcacheDo) ReadDB() IQeyKryWEwfsnipcacheDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfsnipcacheDo) WriteDB() IQeyKryWEwfsnipcacheDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfsnipcacheDo) Session(config *gorm.Session) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfsnipcacheDo) Clauses(conds ...clause.Expression) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Returning(value interface{}, columns ...string) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfsnipcacheDo) Not(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Or(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Select(conds ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Where(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Order(conds ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Distinct(cols ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfsnipcacheDo) Omit(cols ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfsnipcacheDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfsnipcacheDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfsnipcacheDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfsnipcacheDo) Group(cols ...field.Expr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfsnipcacheDo) Having(conds ...gen.Condition) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfsnipcacheDo) Limit(limit int) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfsnipcacheDo) Offset(offset int) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfsnipcacheDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfsnipcacheDo) Unscoped() IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfsnipcacheDo) Create(values ...*model.QeyKryWEwfsnipcache) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfsnipcacheDo) CreateInBatches(values []*model.QeyKryWEwfsnipcache, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfsnipcacheDo) Save(values ...*model.QeyKryWEwfsnipcache) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfsnipcacheDo) First() (*model.QeyKryWEwfsnipcache, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsnipcache), nil
	}
}

func (q qeyKryWEwfsnipcacheDo) Take() (*model.QeyKryWEwfsnipcache, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsnipcache), nil
	}
}

func (q qeyKryWEwfsnipcacheDo) Last() (*model.QeyKryWEwfsnipcache, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsnipcache), nil
	}
}

func (q qeyKryWEwfsnipcacheDo) Find() ([]*model.QeyKryWEwfsnipcache, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfsnipcache), err
}

func (q qeyKryWEwfsnipcacheDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfsnipcache, err error) {
	buf := make([]*model.QeyKryWEwfsnipcache, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfsnipcacheDo) FindInBatches(result *[]*model.QeyKryWEwfsnipcache, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfsnipcacheDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfsnipcacheDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfsnipcacheDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfsnipcacheDo) Joins(fields ...field.RelationField) IQeyKryWEwfsnipcacheDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfsnipcacheDo) Preload(fields ...field.RelationField) IQeyKryWEwfsnipcacheDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfsnipcacheDo) FirstOrInit() (*model.QeyKryWEwfsnipcache, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsnipcache), nil
	}
}

func (q qeyKryWEwfsnipcacheDo) FirstOrCreate() (*model.QeyKryWEwfsnipcache, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfsnipcache), nil
	}
}

func (q qeyKryWEwfsnipcacheDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfsnipcache, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfsnipcacheDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfsnipcacheDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfsnipcacheDo) Delete(models ...*model.QeyKryWEwfsnipcache) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfsnipcacheDo) withDO(do gen.Dao) *qeyKryWEwfsnipcacheDo {
	q.DO = *do.(*gen.DO)
	return q
}
