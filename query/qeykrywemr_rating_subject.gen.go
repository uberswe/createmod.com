// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEmrRatingSubject(db *gorm.DB, opts ...gen.DOOption) qeyKryWEmrRatingSubject {
	_qeyKryWEmrRatingSubject := qeyKryWEmrRatingSubject{}

	_qeyKryWEmrRatingSubject.qeyKryWEmrRatingSubjectDo.UseDB(db, opts...)
	_qeyKryWEmrRatingSubject.qeyKryWEmrRatingSubjectDo.UseModel(&model.QeyKryWEmrRatingSubject{})

	tableName := _qeyKryWEmrRatingSubject.qeyKryWEmrRatingSubjectDo.TableName()
	_qeyKryWEmrRatingSubject.ALL = field.NewAsterisk(tableName)
	_qeyKryWEmrRatingSubject.RatingID = field.NewInt64(tableName, "rating_id")
	_qeyKryWEmrRatingSubject.PostType = field.NewString(tableName, "post_type")

	_qeyKryWEmrRatingSubject.fillFieldMap()

	return _qeyKryWEmrRatingSubject
}

type qeyKryWEmrRatingSubject struct {
	qeyKryWEmrRatingSubjectDo

	ALL      field.Asterisk
	RatingID field.Int64
	PostType field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEmrRatingSubject) Table(newTableName string) *qeyKryWEmrRatingSubject {
	q.qeyKryWEmrRatingSubjectDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEmrRatingSubject) As(alias string) *qeyKryWEmrRatingSubject {
	q.qeyKryWEmrRatingSubjectDo.DO = *(q.qeyKryWEmrRatingSubjectDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEmrRatingSubject) updateTableName(table string) *qeyKryWEmrRatingSubject {
	q.ALL = field.NewAsterisk(table)
	q.RatingID = field.NewInt64(table, "rating_id")
	q.PostType = field.NewString(table, "post_type")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEmrRatingSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEmrRatingSubject) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["rating_id"] = q.RatingID
	q.fieldMap["post_type"] = q.PostType
}

func (q qeyKryWEmrRatingSubject) clone(db *gorm.DB) qeyKryWEmrRatingSubject {
	q.qeyKryWEmrRatingSubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEmrRatingSubject) replaceDB(db *gorm.DB) qeyKryWEmrRatingSubject {
	q.qeyKryWEmrRatingSubjectDo.ReplaceDB(db)
	return q
}

type qeyKryWEmrRatingSubjectDo struct{ gen.DO }

type IQeyKryWEmrRatingSubjectDo interface {
	gen.SubQuery
	Debug() IQeyKryWEmrRatingSubjectDo
	WithContext(ctx context.Context) IQeyKryWEmrRatingSubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEmrRatingSubjectDo
	WriteDB() IQeyKryWEmrRatingSubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEmrRatingSubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEmrRatingSubjectDo
	Not(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo
	Or(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo
	Select(conds ...field.Expr) IQeyKryWEmrRatingSubjectDo
	Where(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo
	Order(conds ...field.Expr) IQeyKryWEmrRatingSubjectDo
	Distinct(cols ...field.Expr) IQeyKryWEmrRatingSubjectDo
	Omit(cols ...field.Expr) IQeyKryWEmrRatingSubjectDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingSubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingSubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingSubjectDo
	Group(cols ...field.Expr) IQeyKryWEmrRatingSubjectDo
	Having(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo
	Limit(limit int) IQeyKryWEmrRatingSubjectDo
	Offset(offset int) IQeyKryWEmrRatingSubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingSubjectDo
	Unscoped() IQeyKryWEmrRatingSubjectDo
	Create(values ...*model.QeyKryWEmrRatingSubject) error
	CreateInBatches(values []*model.QeyKryWEmrRatingSubject, batchSize int) error
	Save(values ...*model.QeyKryWEmrRatingSubject) error
	First() (*model.QeyKryWEmrRatingSubject, error)
	Take() (*model.QeyKryWEmrRatingSubject, error)
	Last() (*model.QeyKryWEmrRatingSubject, error)
	Find() ([]*model.QeyKryWEmrRatingSubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingSubject, err error)
	FindInBatches(result *[]*model.QeyKryWEmrRatingSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEmrRatingSubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingSubjectDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingSubjectDo
	Joins(fields ...field.RelationField) IQeyKryWEmrRatingSubjectDo
	Preload(fields ...field.RelationField) IQeyKryWEmrRatingSubjectDo
	FirstOrInit() (*model.QeyKryWEmrRatingSubject, error)
	FirstOrCreate() (*model.QeyKryWEmrRatingSubject, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingSubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEmrRatingSubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEmrRatingSubjectDo) Debug() IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEmrRatingSubjectDo) WithContext(ctx context.Context) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEmrRatingSubjectDo) ReadDB() IQeyKryWEmrRatingSubjectDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEmrRatingSubjectDo) WriteDB() IQeyKryWEmrRatingSubjectDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEmrRatingSubjectDo) Session(config *gorm.Session) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEmrRatingSubjectDo) Clauses(conds ...clause.Expression) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Returning(value interface{}, columns ...string) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEmrRatingSubjectDo) Not(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Or(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Select(conds ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Where(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Order(conds ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Distinct(cols ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEmrRatingSubjectDo) Omit(cols ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEmrRatingSubjectDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEmrRatingSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEmrRatingSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEmrRatingSubjectDo) Group(cols ...field.Expr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEmrRatingSubjectDo) Having(conds ...gen.Condition) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEmrRatingSubjectDo) Limit(limit int) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEmrRatingSubjectDo) Offset(offset int) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEmrRatingSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEmrRatingSubjectDo) Unscoped() IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEmrRatingSubjectDo) Create(values ...*model.QeyKryWEmrRatingSubject) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEmrRatingSubjectDo) CreateInBatches(values []*model.QeyKryWEmrRatingSubject, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEmrRatingSubjectDo) Save(values ...*model.QeyKryWEmrRatingSubject) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEmrRatingSubjectDo) First() (*model.QeyKryWEmrRatingSubject, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingSubject), nil
	}
}

func (q qeyKryWEmrRatingSubjectDo) Take() (*model.QeyKryWEmrRatingSubject, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingSubject), nil
	}
}

func (q qeyKryWEmrRatingSubjectDo) Last() (*model.QeyKryWEmrRatingSubject, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingSubject), nil
	}
}

func (q qeyKryWEmrRatingSubjectDo) Find() ([]*model.QeyKryWEmrRatingSubject, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEmrRatingSubject), err
}

func (q qeyKryWEmrRatingSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEmrRatingSubject, err error) {
	buf := make([]*model.QeyKryWEmrRatingSubject, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEmrRatingSubjectDo) FindInBatches(result *[]*model.QeyKryWEmrRatingSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEmrRatingSubjectDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEmrRatingSubjectDo) Assign(attrs ...field.AssignExpr) IQeyKryWEmrRatingSubjectDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEmrRatingSubjectDo) Joins(fields ...field.RelationField) IQeyKryWEmrRatingSubjectDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingSubjectDo) Preload(fields ...field.RelationField) IQeyKryWEmrRatingSubjectDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEmrRatingSubjectDo) FirstOrInit() (*model.QeyKryWEmrRatingSubject, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingSubject), nil
	}
}

func (q qeyKryWEmrRatingSubjectDo) FirstOrCreate() (*model.QeyKryWEmrRatingSubject, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEmrRatingSubject), nil
	}
}

func (q qeyKryWEmrRatingSubjectDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEmrRatingSubject, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEmrRatingSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEmrRatingSubjectDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEmrRatingSubjectDo) Delete(models ...*model.QeyKryWEmrRatingSubject) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEmrRatingSubjectDo) withDO(do gen.Dao) *qeyKryWEmrRatingSubjectDo {
	q.DO = *do.(*gen.DO)
	return q
}
