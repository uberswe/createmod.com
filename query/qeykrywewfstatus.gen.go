// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfstatus(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfstatus {
	_qeyKryWEwfstatus := qeyKryWEwfstatus{}

	_qeyKryWEwfstatus.qeyKryWEwfstatusDo.UseDB(db, opts...)
	_qeyKryWEwfstatus.qeyKryWEwfstatusDo.UseModel(&model.QeyKryWEwfstatus{})

	tableName := _qeyKryWEwfstatus.qeyKryWEwfstatusDo.TableName()
	_qeyKryWEwfstatus.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfstatus.ID = field.NewInt64(tableName, "id")
	_qeyKryWEwfstatus.Ctime = field.NewFloat64(tableName, "ctime")
	_qeyKryWEwfstatus.Level = field.NewInt32(tableName, "level")
	_qeyKryWEwfstatus.Type = field.NewString(tableName, "type")
	_qeyKryWEwfstatus.Msg = field.NewString(tableName, "msg")

	_qeyKryWEwfstatus.fillFieldMap()

	return _qeyKryWEwfstatus
}

type qeyKryWEwfstatus struct {
	qeyKryWEwfstatusDo

	ALL   field.Asterisk
	ID    field.Int64
	Ctime field.Float64
	Level field.Int32
	Type  field.String
	Msg   field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfstatus) Table(newTableName string) *qeyKryWEwfstatus {
	q.qeyKryWEwfstatusDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfstatus) As(alias string) *qeyKryWEwfstatus {
	q.qeyKryWEwfstatusDo.DO = *(q.qeyKryWEwfstatusDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfstatus) updateTableName(table string) *qeyKryWEwfstatus {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Ctime = field.NewFloat64(table, "ctime")
	q.Level = field.NewInt32(table, "level")
	q.Type = field.NewString(table, "type")
	q.Msg = field.NewString(table, "msg")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfstatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfstatus) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["id"] = q.ID
	q.fieldMap["ctime"] = q.Ctime
	q.fieldMap["level"] = q.Level
	q.fieldMap["type"] = q.Type
	q.fieldMap["msg"] = q.Msg
}

func (q qeyKryWEwfstatus) clone(db *gorm.DB) qeyKryWEwfstatus {
	q.qeyKryWEwfstatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfstatus) replaceDB(db *gorm.DB) qeyKryWEwfstatus {
	q.qeyKryWEwfstatusDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfstatusDo struct{ gen.DO }

type IQeyKryWEwfstatusDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfstatusDo
	WithContext(ctx context.Context) IQeyKryWEwfstatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfstatusDo
	WriteDB() IQeyKryWEwfstatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfstatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfstatusDo
	Not(conds ...gen.Condition) IQeyKryWEwfstatusDo
	Or(conds ...gen.Condition) IQeyKryWEwfstatusDo
	Select(conds ...field.Expr) IQeyKryWEwfstatusDo
	Where(conds ...gen.Condition) IQeyKryWEwfstatusDo
	Order(conds ...field.Expr) IQeyKryWEwfstatusDo
	Distinct(cols ...field.Expr) IQeyKryWEwfstatusDo
	Omit(cols ...field.Expr) IQeyKryWEwfstatusDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfstatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfstatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfstatusDo
	Group(cols ...field.Expr) IQeyKryWEwfstatusDo
	Having(conds ...gen.Condition) IQeyKryWEwfstatusDo
	Limit(limit int) IQeyKryWEwfstatusDo
	Offset(offset int) IQeyKryWEwfstatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfstatusDo
	Unscoped() IQeyKryWEwfstatusDo
	Create(values ...*model.QeyKryWEwfstatus) error
	CreateInBatches(values []*model.QeyKryWEwfstatus, batchSize int) error
	Save(values ...*model.QeyKryWEwfstatus) error
	First() (*model.QeyKryWEwfstatus, error)
	Take() (*model.QeyKryWEwfstatus, error)
	Last() (*model.QeyKryWEwfstatus, error)
	Find() ([]*model.QeyKryWEwfstatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfstatus, err error)
	FindInBatches(result *[]*model.QeyKryWEwfstatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfstatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfstatusDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfstatusDo
	Joins(fields ...field.RelationField) IQeyKryWEwfstatusDo
	Preload(fields ...field.RelationField) IQeyKryWEwfstatusDo
	FirstOrInit() (*model.QeyKryWEwfstatus, error)
	FirstOrCreate() (*model.QeyKryWEwfstatus, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfstatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfstatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfstatusDo) Debug() IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfstatusDo) WithContext(ctx context.Context) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfstatusDo) ReadDB() IQeyKryWEwfstatusDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfstatusDo) WriteDB() IQeyKryWEwfstatusDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfstatusDo) Session(config *gorm.Session) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfstatusDo) Clauses(conds ...clause.Expression) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfstatusDo) Returning(value interface{}, columns ...string) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfstatusDo) Not(conds ...gen.Condition) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfstatusDo) Or(conds ...gen.Condition) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfstatusDo) Select(conds ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfstatusDo) Where(conds ...gen.Condition) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfstatusDo) Order(conds ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfstatusDo) Distinct(cols ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfstatusDo) Omit(cols ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfstatusDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfstatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfstatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfstatusDo) Group(cols ...field.Expr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfstatusDo) Having(conds ...gen.Condition) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfstatusDo) Limit(limit int) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfstatusDo) Offset(offset int) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfstatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfstatusDo) Unscoped() IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfstatusDo) Create(values ...*model.QeyKryWEwfstatus) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfstatusDo) CreateInBatches(values []*model.QeyKryWEwfstatus, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfstatusDo) Save(values ...*model.QeyKryWEwfstatus) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfstatusDo) First() (*model.QeyKryWEwfstatus, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfstatus), nil
	}
}

func (q qeyKryWEwfstatusDo) Take() (*model.QeyKryWEwfstatus, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfstatus), nil
	}
}

func (q qeyKryWEwfstatusDo) Last() (*model.QeyKryWEwfstatus, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfstatus), nil
	}
}

func (q qeyKryWEwfstatusDo) Find() ([]*model.QeyKryWEwfstatus, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfstatus), err
}

func (q qeyKryWEwfstatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfstatus, err error) {
	buf := make([]*model.QeyKryWEwfstatus, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfstatusDo) FindInBatches(result *[]*model.QeyKryWEwfstatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfstatusDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfstatusDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfstatusDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfstatusDo) Joins(fields ...field.RelationField) IQeyKryWEwfstatusDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfstatusDo) Preload(fields ...field.RelationField) IQeyKryWEwfstatusDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfstatusDo) FirstOrInit() (*model.QeyKryWEwfstatus, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfstatus), nil
	}
}

func (q qeyKryWEwfstatusDo) FirstOrCreate() (*model.QeyKryWEwfstatus, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfstatus), nil
	}
}

func (q qeyKryWEwfstatusDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfstatus, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfstatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfstatusDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfstatusDo) Delete(models ...*model.QeyKryWEwfstatus) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfstatusDo) withDO(do gen.Dao) *qeyKryWEwfstatusDo {
	q.DO = *do.(*gen.DO)
	return q
}
