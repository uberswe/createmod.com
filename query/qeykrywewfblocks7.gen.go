// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfblocks7(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfblocks7 {
	_qeyKryWEwfblocks7 := qeyKryWEwfblocks7{}

	_qeyKryWEwfblocks7.qeyKryWEwfblocks7Do.UseDB(db, opts...)
	_qeyKryWEwfblocks7.qeyKryWEwfblocks7Do.UseModel(&model.QeyKryWEwfblocks7{})

	tableName := _qeyKryWEwfblocks7.qeyKryWEwfblocks7Do.TableName()
	_qeyKryWEwfblocks7.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfblocks7.ID = field.NewInt64(tableName, "id")
	_qeyKryWEwfblocks7.Type = field.NewInt32(tableName, "type")
	_qeyKryWEwfblocks7.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwfblocks7.BlockedTime = field.NewInt64(tableName, "blockedTime")
	_qeyKryWEwfblocks7.Reason = field.NewString(tableName, "reason")
	_qeyKryWEwfblocks7.LastAttempt = field.NewInt32(tableName, "lastAttempt")
	_qeyKryWEwfblocks7.BlockedHits = field.NewInt32(tableName, "blockedHits")
	_qeyKryWEwfblocks7.Expiration = field.NewInt64(tableName, "expiration")
	_qeyKryWEwfblocks7.Parameters = field.NewString(tableName, "parameters")

	_qeyKryWEwfblocks7.fillFieldMap()

	return _qeyKryWEwfblocks7
}

type qeyKryWEwfblocks7 struct {
	qeyKryWEwfblocks7Do

	ALL         field.Asterisk
	ID          field.Int64
	Type        field.Int32
	IP          field.Bytes
	BlockedTime field.Int64
	Reason      field.String
	LastAttempt field.Int32
	BlockedHits field.Int32
	Expiration  field.Int64
	Parameters  field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfblocks7) Table(newTableName string) *qeyKryWEwfblocks7 {
	q.qeyKryWEwfblocks7Do.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfblocks7) As(alias string) *qeyKryWEwfblocks7 {
	q.qeyKryWEwfblocks7Do.DO = *(q.qeyKryWEwfblocks7Do.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfblocks7) updateTableName(table string) *qeyKryWEwfblocks7 {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Type = field.NewInt32(table, "type")
	q.IP = field.NewBytes(table, "IP")
	q.BlockedTime = field.NewInt64(table, "blockedTime")
	q.Reason = field.NewString(table, "reason")
	q.LastAttempt = field.NewInt32(table, "lastAttempt")
	q.BlockedHits = field.NewInt32(table, "blockedHits")
	q.Expiration = field.NewInt64(table, "expiration")
	q.Parameters = field.NewString(table, "parameters")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfblocks7) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfblocks7) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["id"] = q.ID
	q.fieldMap["type"] = q.Type
	q.fieldMap["IP"] = q.IP
	q.fieldMap["blockedTime"] = q.BlockedTime
	q.fieldMap["reason"] = q.Reason
	q.fieldMap["lastAttempt"] = q.LastAttempt
	q.fieldMap["blockedHits"] = q.BlockedHits
	q.fieldMap["expiration"] = q.Expiration
	q.fieldMap["parameters"] = q.Parameters
}

func (q qeyKryWEwfblocks7) clone(db *gorm.DB) qeyKryWEwfblocks7 {
	q.qeyKryWEwfblocks7Do.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfblocks7) replaceDB(db *gorm.DB) qeyKryWEwfblocks7 {
	q.qeyKryWEwfblocks7Do.ReplaceDB(db)
	return q
}

type qeyKryWEwfblocks7Do struct{ gen.DO }

type IQeyKryWEwfblocks7Do interface {
	gen.SubQuery
	Debug() IQeyKryWEwfblocks7Do
	WithContext(ctx context.Context) IQeyKryWEwfblocks7Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfblocks7Do
	WriteDB() IQeyKryWEwfblocks7Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfblocks7Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfblocks7Do
	Not(conds ...gen.Condition) IQeyKryWEwfblocks7Do
	Or(conds ...gen.Condition) IQeyKryWEwfblocks7Do
	Select(conds ...field.Expr) IQeyKryWEwfblocks7Do
	Where(conds ...gen.Condition) IQeyKryWEwfblocks7Do
	Order(conds ...field.Expr) IQeyKryWEwfblocks7Do
	Distinct(cols ...field.Expr) IQeyKryWEwfblocks7Do
	Omit(cols ...field.Expr) IQeyKryWEwfblocks7Do
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblocks7Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblocks7Do
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblocks7Do
	Group(cols ...field.Expr) IQeyKryWEwfblocks7Do
	Having(conds ...gen.Condition) IQeyKryWEwfblocks7Do
	Limit(limit int) IQeyKryWEwfblocks7Do
	Offset(offset int) IQeyKryWEwfblocks7Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfblocks7Do
	Unscoped() IQeyKryWEwfblocks7Do
	Create(values ...*model.QeyKryWEwfblocks7) error
	CreateInBatches(values []*model.QeyKryWEwfblocks7, batchSize int) error
	Save(values ...*model.QeyKryWEwfblocks7) error
	First() (*model.QeyKryWEwfblocks7, error)
	Take() (*model.QeyKryWEwfblocks7, error)
	Last() (*model.QeyKryWEwfblocks7, error)
	Find() ([]*model.QeyKryWEwfblocks7, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfblocks7, err error)
	FindInBatches(result *[]*model.QeyKryWEwfblocks7, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfblocks7) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfblocks7Do
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfblocks7Do
	Joins(fields ...field.RelationField) IQeyKryWEwfblocks7Do
	Preload(fields ...field.RelationField) IQeyKryWEwfblocks7Do
	FirstOrInit() (*model.QeyKryWEwfblocks7, error)
	FirstOrCreate() (*model.QeyKryWEwfblocks7, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfblocks7, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfblocks7Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfblocks7Do) Debug() IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfblocks7Do) WithContext(ctx context.Context) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfblocks7Do) ReadDB() IQeyKryWEwfblocks7Do {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfblocks7Do) WriteDB() IQeyKryWEwfblocks7Do {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfblocks7Do) Session(config *gorm.Session) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfblocks7Do) Clauses(conds ...clause.Expression) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfblocks7Do) Returning(value interface{}, columns ...string) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfblocks7Do) Not(conds ...gen.Condition) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfblocks7Do) Or(conds ...gen.Condition) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfblocks7Do) Select(conds ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfblocks7Do) Where(conds ...gen.Condition) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfblocks7Do) Order(conds ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfblocks7Do) Distinct(cols ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfblocks7Do) Omit(cols ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfblocks7Do) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfblocks7Do) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfblocks7Do) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfblocks7Do) Group(cols ...field.Expr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfblocks7Do) Having(conds ...gen.Condition) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfblocks7Do) Limit(limit int) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfblocks7Do) Offset(offset int) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfblocks7Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfblocks7Do) Unscoped() IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfblocks7Do) Create(values ...*model.QeyKryWEwfblocks7) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfblocks7Do) CreateInBatches(values []*model.QeyKryWEwfblocks7, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfblocks7Do) Save(values ...*model.QeyKryWEwfblocks7) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfblocks7Do) First() (*model.QeyKryWEwfblocks7, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblocks7), nil
	}
}

func (q qeyKryWEwfblocks7Do) Take() (*model.QeyKryWEwfblocks7, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblocks7), nil
	}
}

func (q qeyKryWEwfblocks7Do) Last() (*model.QeyKryWEwfblocks7, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblocks7), nil
	}
}

func (q qeyKryWEwfblocks7Do) Find() ([]*model.QeyKryWEwfblocks7, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfblocks7), err
}

func (q qeyKryWEwfblocks7Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfblocks7, err error) {
	buf := make([]*model.QeyKryWEwfblocks7, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfblocks7Do) FindInBatches(result *[]*model.QeyKryWEwfblocks7, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfblocks7Do) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfblocks7Do) Assign(attrs ...field.AssignExpr) IQeyKryWEwfblocks7Do {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfblocks7Do) Joins(fields ...field.RelationField) IQeyKryWEwfblocks7Do {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfblocks7Do) Preload(fields ...field.RelationField) IQeyKryWEwfblocks7Do {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfblocks7Do) FirstOrInit() (*model.QeyKryWEwfblocks7, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblocks7), nil
	}
}

func (q qeyKryWEwfblocks7Do) FirstOrCreate() (*model.QeyKryWEwfblocks7, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblocks7), nil
	}
}

func (q qeyKryWEwfblocks7Do) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfblocks7, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfblocks7Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfblocks7Do) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfblocks7Do) Delete(models ...*model.QeyKryWEwfblocks7) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfblocks7Do) withDO(do gen.Dao) *qeyKryWEwfblocks7Do {
	q.DO = *do.(*gen.DO)
	return q
}
