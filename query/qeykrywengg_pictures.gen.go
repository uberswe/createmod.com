// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEnggPicture(db *gorm.DB, opts ...gen.DOOption) qeyKryWEnggPicture {
	_qeyKryWEnggPicture := qeyKryWEnggPicture{}

	_qeyKryWEnggPicture.qeyKryWEnggPictureDo.UseDB(db, opts...)
	_qeyKryWEnggPicture.qeyKryWEnggPictureDo.UseModel(&model.QeyKryWEnggPicture{})

	tableName := _qeyKryWEnggPicture.qeyKryWEnggPictureDo.TableName()
	_qeyKryWEnggPicture.ALL = field.NewAsterisk(tableName)
	_qeyKryWEnggPicture.Pid = field.NewInt64(tableName, "pid")
	_qeyKryWEnggPicture.ImageSlug = field.NewString(tableName, "image_slug")
	_qeyKryWEnggPicture.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEnggPicture.Galleryid = field.NewInt64(tableName, "galleryid")
	_qeyKryWEnggPicture.Filename = field.NewString(tableName, "filename")
	_qeyKryWEnggPicture.Description = field.NewString(tableName, "description")
	_qeyKryWEnggPicture.Alttext = field.NewString(tableName, "alttext")
	_qeyKryWEnggPicture.Imagedate = field.NewTime(tableName, "imagedate")
	_qeyKryWEnggPicture.Exclude = field.NewInt32(tableName, "exclude")
	_qeyKryWEnggPicture.Sortorder = field.NewInt64(tableName, "sortorder")
	_qeyKryWEnggPicture.MetaData = field.NewString(tableName, "meta_data")
	_qeyKryWEnggPicture.ExtrasPostID = field.NewInt64(tableName, "extras_post_id")
	_qeyKryWEnggPicture.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_qeyKryWEnggPicture.fillFieldMap()

	return _qeyKryWEnggPicture
}

type qeyKryWEnggPicture struct {
	qeyKryWEnggPictureDo

	ALL          field.Asterisk
	Pid          field.Int64
	ImageSlug    field.String
	PostID       field.Int64
	Galleryid    field.Int64
	Filename     field.String
	Description  field.String
	Alttext      field.String
	Imagedate    field.Time
	Exclude      field.Int32
	Sortorder    field.Int64
	MetaData     field.String
	ExtrasPostID field.Int64
	UpdatedAt    field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEnggPicture) Table(newTableName string) *qeyKryWEnggPicture {
	q.qeyKryWEnggPictureDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEnggPicture) As(alias string) *qeyKryWEnggPicture {
	q.qeyKryWEnggPictureDo.DO = *(q.qeyKryWEnggPictureDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEnggPicture) updateTableName(table string) *qeyKryWEnggPicture {
	q.ALL = field.NewAsterisk(table)
	q.Pid = field.NewInt64(table, "pid")
	q.ImageSlug = field.NewString(table, "image_slug")
	q.PostID = field.NewInt64(table, "post_id")
	q.Galleryid = field.NewInt64(table, "galleryid")
	q.Filename = field.NewString(table, "filename")
	q.Description = field.NewString(table, "description")
	q.Alttext = field.NewString(table, "alttext")
	q.Imagedate = field.NewTime(table, "imagedate")
	q.Exclude = field.NewInt32(table, "exclude")
	q.Sortorder = field.NewInt64(table, "sortorder")
	q.MetaData = field.NewString(table, "meta_data")
	q.ExtrasPostID = field.NewInt64(table, "extras_post_id")
	q.UpdatedAt = field.NewInt64(table, "updated_at")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEnggPicture) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEnggPicture) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 13)
	q.fieldMap["pid"] = q.Pid
	q.fieldMap["image_slug"] = q.ImageSlug
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["galleryid"] = q.Galleryid
	q.fieldMap["filename"] = q.Filename
	q.fieldMap["description"] = q.Description
	q.fieldMap["alttext"] = q.Alttext
	q.fieldMap["imagedate"] = q.Imagedate
	q.fieldMap["exclude"] = q.Exclude
	q.fieldMap["sortorder"] = q.Sortorder
	q.fieldMap["meta_data"] = q.MetaData
	q.fieldMap["extras_post_id"] = q.ExtrasPostID
	q.fieldMap["updated_at"] = q.UpdatedAt
}

func (q qeyKryWEnggPicture) clone(db *gorm.DB) qeyKryWEnggPicture {
	q.qeyKryWEnggPictureDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEnggPicture) replaceDB(db *gorm.DB) qeyKryWEnggPicture {
	q.qeyKryWEnggPictureDo.ReplaceDB(db)
	return q
}

type qeyKryWEnggPictureDo struct{ gen.DO }

type IQeyKryWEnggPictureDo interface {
	gen.SubQuery
	Debug() IQeyKryWEnggPictureDo
	WithContext(ctx context.Context) IQeyKryWEnggPictureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEnggPictureDo
	WriteDB() IQeyKryWEnggPictureDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEnggPictureDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEnggPictureDo
	Not(conds ...gen.Condition) IQeyKryWEnggPictureDo
	Or(conds ...gen.Condition) IQeyKryWEnggPictureDo
	Select(conds ...field.Expr) IQeyKryWEnggPictureDo
	Where(conds ...gen.Condition) IQeyKryWEnggPictureDo
	Order(conds ...field.Expr) IQeyKryWEnggPictureDo
	Distinct(cols ...field.Expr) IQeyKryWEnggPictureDo
	Omit(cols ...field.Expr) IQeyKryWEnggPictureDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEnggPictureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggPictureDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggPictureDo
	Group(cols ...field.Expr) IQeyKryWEnggPictureDo
	Having(conds ...gen.Condition) IQeyKryWEnggPictureDo
	Limit(limit int) IQeyKryWEnggPictureDo
	Offset(offset int) IQeyKryWEnggPictureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEnggPictureDo
	Unscoped() IQeyKryWEnggPictureDo
	Create(values ...*model.QeyKryWEnggPicture) error
	CreateInBatches(values []*model.QeyKryWEnggPicture, batchSize int) error
	Save(values ...*model.QeyKryWEnggPicture) error
	First() (*model.QeyKryWEnggPicture, error)
	Take() (*model.QeyKryWEnggPicture, error)
	Last() (*model.QeyKryWEnggPicture, error)
	Find() ([]*model.QeyKryWEnggPicture, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEnggPicture, err error)
	FindInBatches(result *[]*model.QeyKryWEnggPicture, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEnggPicture) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEnggPictureDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEnggPictureDo
	Joins(fields ...field.RelationField) IQeyKryWEnggPictureDo
	Preload(fields ...field.RelationField) IQeyKryWEnggPictureDo
	FirstOrInit() (*model.QeyKryWEnggPicture, error)
	FirstOrCreate() (*model.QeyKryWEnggPicture, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEnggPicture, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEnggPictureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEnggPictureDo) Debug() IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEnggPictureDo) WithContext(ctx context.Context) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEnggPictureDo) ReadDB() IQeyKryWEnggPictureDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEnggPictureDo) WriteDB() IQeyKryWEnggPictureDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEnggPictureDo) Session(config *gorm.Session) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEnggPictureDo) Clauses(conds ...clause.Expression) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEnggPictureDo) Returning(value interface{}, columns ...string) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEnggPictureDo) Not(conds ...gen.Condition) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEnggPictureDo) Or(conds ...gen.Condition) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEnggPictureDo) Select(conds ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEnggPictureDo) Where(conds ...gen.Condition) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEnggPictureDo) Order(conds ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEnggPictureDo) Distinct(cols ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEnggPictureDo) Omit(cols ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEnggPictureDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEnggPictureDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEnggPictureDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEnggPictureDo) Group(cols ...field.Expr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEnggPictureDo) Having(conds ...gen.Condition) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEnggPictureDo) Limit(limit int) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEnggPictureDo) Offset(offset int) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEnggPictureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEnggPictureDo) Unscoped() IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEnggPictureDo) Create(values ...*model.QeyKryWEnggPicture) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEnggPictureDo) CreateInBatches(values []*model.QeyKryWEnggPicture, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEnggPictureDo) Save(values ...*model.QeyKryWEnggPicture) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEnggPictureDo) First() (*model.QeyKryWEnggPicture, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggPicture), nil
	}
}

func (q qeyKryWEnggPictureDo) Take() (*model.QeyKryWEnggPicture, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggPicture), nil
	}
}

func (q qeyKryWEnggPictureDo) Last() (*model.QeyKryWEnggPicture, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggPicture), nil
	}
}

func (q qeyKryWEnggPictureDo) Find() ([]*model.QeyKryWEnggPicture, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEnggPicture), err
}

func (q qeyKryWEnggPictureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEnggPicture, err error) {
	buf := make([]*model.QeyKryWEnggPicture, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEnggPictureDo) FindInBatches(result *[]*model.QeyKryWEnggPicture, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEnggPictureDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEnggPictureDo) Assign(attrs ...field.AssignExpr) IQeyKryWEnggPictureDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEnggPictureDo) Joins(fields ...field.RelationField) IQeyKryWEnggPictureDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEnggPictureDo) Preload(fields ...field.RelationField) IQeyKryWEnggPictureDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEnggPictureDo) FirstOrInit() (*model.QeyKryWEnggPicture, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggPicture), nil
	}
}

func (q qeyKryWEnggPictureDo) FirstOrCreate() (*model.QeyKryWEnggPicture, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggPicture), nil
	}
}

func (q qeyKryWEnggPictureDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEnggPicture, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEnggPictureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEnggPictureDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEnggPictureDo) Delete(models ...*model.QeyKryWEnggPicture) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEnggPictureDo) withDO(do gen.Dao) *qeyKryWEnggPictureDo {
	q.DO = *do.(*gen.DO)
	return q
}
