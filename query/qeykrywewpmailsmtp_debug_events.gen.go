// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwpmailsmtpDebugEvent(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwpmailsmtpDebugEvent {
	_qeyKryWEwpmailsmtpDebugEvent := qeyKryWEwpmailsmtpDebugEvent{}

	_qeyKryWEwpmailsmtpDebugEvent.qeyKryWEwpmailsmtpDebugEventDo.UseDB(db, opts...)
	_qeyKryWEwpmailsmtpDebugEvent.qeyKryWEwpmailsmtpDebugEventDo.UseModel(&model.QeyKryWEwpmailsmtpDebugEvent{})

	tableName := _qeyKryWEwpmailsmtpDebugEvent.qeyKryWEwpmailsmtpDebugEventDo.TableName()
	_qeyKryWEwpmailsmtpDebugEvent.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwpmailsmtpDebugEvent.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwpmailsmtpDebugEvent.Content = field.NewString(tableName, "content")
	_qeyKryWEwpmailsmtpDebugEvent.Initiator = field.NewString(tableName, "initiator")
	_qeyKryWEwpmailsmtpDebugEvent.EventType = field.NewInt32(tableName, "event_type")
	_qeyKryWEwpmailsmtpDebugEvent.CreatedAt = field.NewTime(tableName, "created_at")

	_qeyKryWEwpmailsmtpDebugEvent.fillFieldMap()

	return _qeyKryWEwpmailsmtpDebugEvent
}

type qeyKryWEwpmailsmtpDebugEvent struct {
	qeyKryWEwpmailsmtpDebugEventDo

	ALL       field.Asterisk
	ID        field.Int32
	Content   field.String
	Initiator field.String
	EventType field.Int32
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwpmailsmtpDebugEvent) Table(newTableName string) *qeyKryWEwpmailsmtpDebugEvent {
	q.qeyKryWEwpmailsmtpDebugEventDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwpmailsmtpDebugEvent) As(alias string) *qeyKryWEwpmailsmtpDebugEvent {
	q.qeyKryWEwpmailsmtpDebugEventDo.DO = *(q.qeyKryWEwpmailsmtpDebugEventDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwpmailsmtpDebugEvent) updateTableName(table string) *qeyKryWEwpmailsmtpDebugEvent {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Content = field.NewString(table, "content")
	q.Initiator = field.NewString(table, "initiator")
	q.EventType = field.NewInt32(table, "event_type")
	q.CreatedAt = field.NewTime(table, "created_at")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwpmailsmtpDebugEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwpmailsmtpDebugEvent) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["id"] = q.ID
	q.fieldMap["content"] = q.Content
	q.fieldMap["initiator"] = q.Initiator
	q.fieldMap["event_type"] = q.EventType
	q.fieldMap["created_at"] = q.CreatedAt
}

func (q qeyKryWEwpmailsmtpDebugEvent) clone(db *gorm.DB) qeyKryWEwpmailsmtpDebugEvent {
	q.qeyKryWEwpmailsmtpDebugEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwpmailsmtpDebugEvent) replaceDB(db *gorm.DB) qeyKryWEwpmailsmtpDebugEvent {
	q.qeyKryWEwpmailsmtpDebugEventDo.ReplaceDB(db)
	return q
}

type qeyKryWEwpmailsmtpDebugEventDo struct{ gen.DO }

type IQeyKryWEwpmailsmtpDebugEventDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwpmailsmtpDebugEventDo
	WithContext(ctx context.Context) IQeyKryWEwpmailsmtpDebugEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwpmailsmtpDebugEventDo
	WriteDB() IQeyKryWEwpmailsmtpDebugEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwpmailsmtpDebugEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwpmailsmtpDebugEventDo
	Not(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo
	Or(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo
	Select(conds ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	Where(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo
	Order(conds ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	Distinct(cols ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	Omit(cols ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	Group(cols ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo
	Having(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo
	Limit(limit int) IQeyKryWEwpmailsmtpDebugEventDo
	Offset(offset int) IQeyKryWEwpmailsmtpDebugEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpmailsmtpDebugEventDo
	Unscoped() IQeyKryWEwpmailsmtpDebugEventDo
	Create(values ...*model.QeyKryWEwpmailsmtpDebugEvent) error
	CreateInBatches(values []*model.QeyKryWEwpmailsmtpDebugEvent, batchSize int) error
	Save(values ...*model.QeyKryWEwpmailsmtpDebugEvent) error
	First() (*model.QeyKryWEwpmailsmtpDebugEvent, error)
	Take() (*model.QeyKryWEwpmailsmtpDebugEvent, error)
	Last() (*model.QeyKryWEwpmailsmtpDebugEvent, error)
	Find() ([]*model.QeyKryWEwpmailsmtpDebugEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpmailsmtpDebugEvent, err error)
	FindInBatches(result *[]*model.QeyKryWEwpmailsmtpDebugEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwpmailsmtpDebugEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwpmailsmtpDebugEventDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwpmailsmtpDebugEventDo
	Joins(fields ...field.RelationField) IQeyKryWEwpmailsmtpDebugEventDo
	Preload(fields ...field.RelationField) IQeyKryWEwpmailsmtpDebugEventDo
	FirstOrInit() (*model.QeyKryWEwpmailsmtpDebugEvent, error)
	FirstOrCreate() (*model.QeyKryWEwpmailsmtpDebugEvent, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwpmailsmtpDebugEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwpmailsmtpDebugEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Debug() IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwpmailsmtpDebugEventDo) WithContext(ctx context.Context) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) ReadDB() IQeyKryWEwpmailsmtpDebugEventDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwpmailsmtpDebugEventDo) WriteDB() IQeyKryWEwpmailsmtpDebugEventDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Session(config *gorm.Session) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Clauses(conds ...clause.Expression) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Returning(value interface{}, columns ...string) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Not(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Or(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Select(conds ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Where(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Order(conds ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Distinct(cols ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Omit(cols ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Group(cols ...field.Expr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Having(conds ...gen.Condition) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Limit(limit int) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Offset(offset int) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Unscoped() IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Create(values ...*model.QeyKryWEwpmailsmtpDebugEvent) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwpmailsmtpDebugEventDo) CreateInBatches(values []*model.QeyKryWEwpmailsmtpDebugEvent, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwpmailsmtpDebugEventDo) Save(values ...*model.QeyKryWEwpmailsmtpDebugEvent) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwpmailsmtpDebugEventDo) First() (*model.QeyKryWEwpmailsmtpDebugEvent, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpmailsmtpDebugEvent), nil
	}
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Take() (*model.QeyKryWEwpmailsmtpDebugEvent, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpmailsmtpDebugEvent), nil
	}
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Last() (*model.QeyKryWEwpmailsmtpDebugEvent, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpmailsmtpDebugEvent), nil
	}
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Find() ([]*model.QeyKryWEwpmailsmtpDebugEvent, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwpmailsmtpDebugEvent), err
}

func (q qeyKryWEwpmailsmtpDebugEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpmailsmtpDebugEvent, err error) {
	buf := make([]*model.QeyKryWEwpmailsmtpDebugEvent, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwpmailsmtpDebugEventDo) FindInBatches(result *[]*model.QeyKryWEwpmailsmtpDebugEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwpmailsmtpDebugEventDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Joins(fields ...field.RelationField) IQeyKryWEwpmailsmtpDebugEventDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Preload(fields ...field.RelationField) IQeyKryWEwpmailsmtpDebugEventDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwpmailsmtpDebugEventDo) FirstOrInit() (*model.QeyKryWEwpmailsmtpDebugEvent, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpmailsmtpDebugEvent), nil
	}
}

func (q qeyKryWEwpmailsmtpDebugEventDo) FirstOrCreate() (*model.QeyKryWEwpmailsmtpDebugEvent, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpmailsmtpDebugEvent), nil
	}
}

func (q qeyKryWEwpmailsmtpDebugEventDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwpmailsmtpDebugEvent, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwpmailsmtpDebugEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwpmailsmtpDebugEventDo) Delete(models ...*model.QeyKryWEwpmailsmtpDebugEvent) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwpmailsmtpDebugEventDo) withDO(do gen.Dao) *qeyKryWEwpmailsmtpDebugEventDo {
	q.DO = *do.(*gen.DO)
	return q
}
