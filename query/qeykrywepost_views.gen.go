// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEpostView(db *gorm.DB, opts ...gen.DOOption) qeyKryWEpostView {
	_qeyKryWEpostView := qeyKryWEpostView{}

	_qeyKryWEpostView.qeyKryWEpostViewDo.UseDB(db, opts...)
	_qeyKryWEpostView.qeyKryWEpostViewDo.UseModel(&model.QeyKryWEpostView{})

	tableName := _qeyKryWEpostView.qeyKryWEpostViewDo.TableName()
	_qeyKryWEpostView.ALL = field.NewAsterisk(tableName)
	_qeyKryWEpostView.ID = field.NewInt64(tableName, "id")
	_qeyKryWEpostView.Type = field.NewInt32(tableName, "type")
	_qeyKryWEpostView.Period = field.NewString(tableName, "period")
	_qeyKryWEpostView.Count_ = field.NewInt64(tableName, "count")

	_qeyKryWEpostView.fillFieldMap()

	return _qeyKryWEpostView
}

type qeyKryWEpostView struct {
	qeyKryWEpostViewDo

	ALL    field.Asterisk
	ID     field.Int64
	Type   field.Int32
	Period field.String
	Count_ field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEpostView) Table(newTableName string) *qeyKryWEpostView {
	q.qeyKryWEpostViewDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEpostView) As(alias string) *qeyKryWEpostView {
	q.qeyKryWEpostViewDo.DO = *(q.qeyKryWEpostViewDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEpostView) updateTableName(table string) *qeyKryWEpostView {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Type = field.NewInt32(table, "type")
	q.Period = field.NewString(table, "period")
	q.Count_ = field.NewInt64(table, "count")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEpostView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEpostView) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["id"] = q.ID
	q.fieldMap["type"] = q.Type
	q.fieldMap["period"] = q.Period
	q.fieldMap["count"] = q.Count_
}

func (q qeyKryWEpostView) clone(db *gorm.DB) qeyKryWEpostView {
	q.qeyKryWEpostViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEpostView) replaceDB(db *gorm.DB) qeyKryWEpostView {
	q.qeyKryWEpostViewDo.ReplaceDB(db)
	return q
}

type qeyKryWEpostViewDo struct{ gen.DO }

type IQeyKryWEpostViewDo interface {
	gen.SubQuery
	Debug() IQeyKryWEpostViewDo
	WithContext(ctx context.Context) IQeyKryWEpostViewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEpostViewDo
	WriteDB() IQeyKryWEpostViewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEpostViewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEpostViewDo
	Not(conds ...gen.Condition) IQeyKryWEpostViewDo
	Or(conds ...gen.Condition) IQeyKryWEpostViewDo
	Select(conds ...field.Expr) IQeyKryWEpostViewDo
	Where(conds ...gen.Condition) IQeyKryWEpostViewDo
	Order(conds ...field.Expr) IQeyKryWEpostViewDo
	Distinct(cols ...field.Expr) IQeyKryWEpostViewDo
	Omit(cols ...field.Expr) IQeyKryWEpostViewDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEpostViewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostViewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostViewDo
	Group(cols ...field.Expr) IQeyKryWEpostViewDo
	Having(conds ...gen.Condition) IQeyKryWEpostViewDo
	Limit(limit int) IQeyKryWEpostViewDo
	Offset(offset int) IQeyKryWEpostViewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEpostViewDo
	Unscoped() IQeyKryWEpostViewDo
	Create(values ...*model.QeyKryWEpostView) error
	CreateInBatches(values []*model.QeyKryWEpostView, batchSize int) error
	Save(values ...*model.QeyKryWEpostView) error
	First() (*model.QeyKryWEpostView, error)
	Take() (*model.QeyKryWEpostView, error)
	Last() (*model.QeyKryWEpostView, error)
	Find() ([]*model.QeyKryWEpostView, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEpostView, err error)
	FindInBatches(result *[]*model.QeyKryWEpostView, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEpostView) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEpostViewDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEpostViewDo
	Joins(fields ...field.RelationField) IQeyKryWEpostViewDo
	Preload(fields ...field.RelationField) IQeyKryWEpostViewDo
	FirstOrInit() (*model.QeyKryWEpostView, error)
	FirstOrCreate() (*model.QeyKryWEpostView, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEpostView, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEpostViewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEpostViewDo) Debug() IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEpostViewDo) WithContext(ctx context.Context) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEpostViewDo) ReadDB() IQeyKryWEpostViewDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEpostViewDo) WriteDB() IQeyKryWEpostViewDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEpostViewDo) Session(config *gorm.Session) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEpostViewDo) Clauses(conds ...clause.Expression) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEpostViewDo) Returning(value interface{}, columns ...string) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEpostViewDo) Not(conds ...gen.Condition) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEpostViewDo) Or(conds ...gen.Condition) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEpostViewDo) Select(conds ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEpostViewDo) Where(conds ...gen.Condition) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEpostViewDo) Order(conds ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEpostViewDo) Distinct(cols ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEpostViewDo) Omit(cols ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEpostViewDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEpostViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEpostViewDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEpostViewDo) Group(cols ...field.Expr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEpostViewDo) Having(conds ...gen.Condition) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEpostViewDo) Limit(limit int) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEpostViewDo) Offset(offset int) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEpostViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEpostViewDo) Unscoped() IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEpostViewDo) Create(values ...*model.QeyKryWEpostView) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEpostViewDo) CreateInBatches(values []*model.QeyKryWEpostView, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEpostViewDo) Save(values ...*model.QeyKryWEpostView) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEpostViewDo) First() (*model.QeyKryWEpostView, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostView), nil
	}
}

func (q qeyKryWEpostViewDo) Take() (*model.QeyKryWEpostView, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostView), nil
	}
}

func (q qeyKryWEpostViewDo) Last() (*model.QeyKryWEpostView, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostView), nil
	}
}

func (q qeyKryWEpostViewDo) Find() ([]*model.QeyKryWEpostView, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEpostView), err
}

func (q qeyKryWEpostViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEpostView, err error) {
	buf := make([]*model.QeyKryWEpostView, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEpostViewDo) FindInBatches(result *[]*model.QeyKryWEpostView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEpostViewDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEpostViewDo) Assign(attrs ...field.AssignExpr) IQeyKryWEpostViewDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEpostViewDo) Joins(fields ...field.RelationField) IQeyKryWEpostViewDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEpostViewDo) Preload(fields ...field.RelationField) IQeyKryWEpostViewDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEpostViewDo) FirstOrInit() (*model.QeyKryWEpostView, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostView), nil
	}
}

func (q qeyKryWEpostViewDo) FirstOrCreate() (*model.QeyKryWEpostView, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpostView), nil
	}
}

func (q qeyKryWEpostViewDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEpostView, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEpostViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEpostViewDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEpostViewDo) Delete(models ...*model.QeyKryWEpostView) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEpostViewDo) withDO(do gen.Dao) *qeyKryWEpostViewDo {
	q.DO = *do.(*gen.DO)
	return q
}
