// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEjetpackWafBlocklog(db *gorm.DB, opts ...gen.DOOption) qeyKryWEjetpackWafBlocklog {
	_qeyKryWEjetpackWafBlocklog := qeyKryWEjetpackWafBlocklog{}

	_qeyKryWEjetpackWafBlocklog.qeyKryWEjetpackWafBlocklogDo.UseDB(db, opts...)
	_qeyKryWEjetpackWafBlocklog.qeyKryWEjetpackWafBlocklogDo.UseModel(&model.QeyKryWEjetpackWafBlocklog{})

	tableName := _qeyKryWEjetpackWafBlocklog.qeyKryWEjetpackWafBlocklogDo.TableName()
	_qeyKryWEjetpackWafBlocklog.ALL = field.NewAsterisk(tableName)
	_qeyKryWEjetpackWafBlocklog.LogID = field.NewInt64(tableName, "log_id")
	_qeyKryWEjetpackWafBlocklog.Timestamp = field.NewTime(tableName, "timestamp")
	_qeyKryWEjetpackWafBlocklog.RuleID = field.NewInt64(tableName, "rule_id")
	_qeyKryWEjetpackWafBlocklog.Reason = field.NewString(tableName, "reason")

	_qeyKryWEjetpackWafBlocklog.fillFieldMap()

	return _qeyKryWEjetpackWafBlocklog
}

type qeyKryWEjetpackWafBlocklog struct {
	qeyKryWEjetpackWafBlocklogDo

	ALL       field.Asterisk
	LogID     field.Int64
	Timestamp field.Time
	RuleID    field.Int64
	Reason    field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEjetpackWafBlocklog) Table(newTableName string) *qeyKryWEjetpackWafBlocklog {
	q.qeyKryWEjetpackWafBlocklogDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEjetpackWafBlocklog) As(alias string) *qeyKryWEjetpackWafBlocklog {
	q.qeyKryWEjetpackWafBlocklogDo.DO = *(q.qeyKryWEjetpackWafBlocklogDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEjetpackWafBlocklog) updateTableName(table string) *qeyKryWEjetpackWafBlocklog {
	q.ALL = field.NewAsterisk(table)
	q.LogID = field.NewInt64(table, "log_id")
	q.Timestamp = field.NewTime(table, "timestamp")
	q.RuleID = field.NewInt64(table, "rule_id")
	q.Reason = field.NewString(table, "reason")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEjetpackWafBlocklog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEjetpackWafBlocklog) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["log_id"] = q.LogID
	q.fieldMap["timestamp"] = q.Timestamp
	q.fieldMap["rule_id"] = q.RuleID
	q.fieldMap["reason"] = q.Reason
}

func (q qeyKryWEjetpackWafBlocklog) clone(db *gorm.DB) qeyKryWEjetpackWafBlocklog {
	q.qeyKryWEjetpackWafBlocklogDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEjetpackWafBlocklog) replaceDB(db *gorm.DB) qeyKryWEjetpackWafBlocklog {
	q.qeyKryWEjetpackWafBlocklogDo.ReplaceDB(db)
	return q
}

type qeyKryWEjetpackWafBlocklogDo struct{ gen.DO }

type IQeyKryWEjetpackWafBlocklogDo interface {
	gen.SubQuery
	Debug() IQeyKryWEjetpackWafBlocklogDo
	WithContext(ctx context.Context) IQeyKryWEjetpackWafBlocklogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEjetpackWafBlocklogDo
	WriteDB() IQeyKryWEjetpackWafBlocklogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEjetpackWafBlocklogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEjetpackWafBlocklogDo
	Not(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo
	Or(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo
	Select(conds ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	Where(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo
	Order(conds ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	Distinct(cols ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	Omit(cols ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	Group(cols ...field.Expr) IQeyKryWEjetpackWafBlocklogDo
	Having(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo
	Limit(limit int) IQeyKryWEjetpackWafBlocklogDo
	Offset(offset int) IQeyKryWEjetpackWafBlocklogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEjetpackWafBlocklogDo
	Unscoped() IQeyKryWEjetpackWafBlocklogDo
	Create(values ...*model.QeyKryWEjetpackWafBlocklog) error
	CreateInBatches(values []*model.QeyKryWEjetpackWafBlocklog, batchSize int) error
	Save(values ...*model.QeyKryWEjetpackWafBlocklog) error
	First() (*model.QeyKryWEjetpackWafBlocklog, error)
	Take() (*model.QeyKryWEjetpackWafBlocklog, error)
	Last() (*model.QeyKryWEjetpackWafBlocklog, error)
	Find() ([]*model.QeyKryWEjetpackWafBlocklog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEjetpackWafBlocklog, err error)
	FindInBatches(result *[]*model.QeyKryWEjetpackWafBlocklog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEjetpackWafBlocklog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEjetpackWafBlocklogDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEjetpackWafBlocklogDo
	Joins(fields ...field.RelationField) IQeyKryWEjetpackWafBlocklogDo
	Preload(fields ...field.RelationField) IQeyKryWEjetpackWafBlocklogDo
	FirstOrInit() (*model.QeyKryWEjetpackWafBlocklog, error)
	FirstOrCreate() (*model.QeyKryWEjetpackWafBlocklog, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEjetpackWafBlocklog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEjetpackWafBlocklogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEjetpackWafBlocklogDo) Debug() IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEjetpackWafBlocklogDo) WithContext(ctx context.Context) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEjetpackWafBlocklogDo) ReadDB() IQeyKryWEjetpackWafBlocklogDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEjetpackWafBlocklogDo) WriteDB() IQeyKryWEjetpackWafBlocklogDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEjetpackWafBlocklogDo) Session(config *gorm.Session) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEjetpackWafBlocklogDo) Clauses(conds ...clause.Expression) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Returning(value interface{}, columns ...string) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Not(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Or(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Select(conds ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Where(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Order(conds ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Distinct(cols ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Omit(cols ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEjetpackWafBlocklogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEjetpackWafBlocklogDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Group(cols ...field.Expr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Having(conds ...gen.Condition) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Limit(limit int) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEjetpackWafBlocklogDo) Offset(offset int) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEjetpackWafBlocklogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Unscoped() IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEjetpackWafBlocklogDo) Create(values ...*model.QeyKryWEjetpackWafBlocklog) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEjetpackWafBlocklogDo) CreateInBatches(values []*model.QeyKryWEjetpackWafBlocklog, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEjetpackWafBlocklogDo) Save(values ...*model.QeyKryWEjetpackWafBlocklog) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEjetpackWafBlocklogDo) First() (*model.QeyKryWEjetpackWafBlocklog, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEjetpackWafBlocklog), nil
	}
}

func (q qeyKryWEjetpackWafBlocklogDo) Take() (*model.QeyKryWEjetpackWafBlocklog, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEjetpackWafBlocklog), nil
	}
}

func (q qeyKryWEjetpackWafBlocklogDo) Last() (*model.QeyKryWEjetpackWafBlocklog, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEjetpackWafBlocklog), nil
	}
}

func (q qeyKryWEjetpackWafBlocklogDo) Find() ([]*model.QeyKryWEjetpackWafBlocklog, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEjetpackWafBlocklog), err
}

func (q qeyKryWEjetpackWafBlocklogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEjetpackWafBlocklog, err error) {
	buf := make([]*model.QeyKryWEjetpackWafBlocklog, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEjetpackWafBlocklogDo) FindInBatches(result *[]*model.QeyKryWEjetpackWafBlocklog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEjetpackWafBlocklogDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Assign(attrs ...field.AssignExpr) IQeyKryWEjetpackWafBlocklogDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEjetpackWafBlocklogDo) Joins(fields ...field.RelationField) IQeyKryWEjetpackWafBlocklogDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEjetpackWafBlocklogDo) Preload(fields ...field.RelationField) IQeyKryWEjetpackWafBlocklogDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEjetpackWafBlocklogDo) FirstOrInit() (*model.QeyKryWEjetpackWafBlocklog, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEjetpackWafBlocklog), nil
	}
}

func (q qeyKryWEjetpackWafBlocklogDo) FirstOrCreate() (*model.QeyKryWEjetpackWafBlocklog, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEjetpackWafBlocklog), nil
	}
}

func (q qeyKryWEjetpackWafBlocklogDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEjetpackWafBlocklog, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEjetpackWafBlocklogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEjetpackWafBlocklogDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEjetpackWafBlocklogDo) Delete(models ...*model.QeyKryWEjetpackWafBlocklog) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEjetpackWafBlocklogDo) withDO(do gen.Dao) *qeyKryWEjetpackWafBlocklogDo {
	q.DO = *do.(*gen.DO)
	return q
}
