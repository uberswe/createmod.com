// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwftrafficrate(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwftrafficrate {
	_qeyKryWEwftrafficrate := qeyKryWEwftrafficrate{}

	_qeyKryWEwftrafficrate.qeyKryWEwftrafficrateDo.UseDB(db, opts...)
	_qeyKryWEwftrafficrate.qeyKryWEwftrafficrateDo.UseModel(&model.QeyKryWEwftrafficrate{})

	tableName := _qeyKryWEwftrafficrate.qeyKryWEwftrafficrateDo.TableName()
	_qeyKryWEwftrafficrate.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwftrafficrate.EMin = field.NewInt32(tableName, "eMin")
	_qeyKryWEwftrafficrate.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwftrafficrate.HitType = field.NewString(tableName, "hitType")
	_qeyKryWEwftrafficrate.Hits = field.NewInt32(tableName, "hits")

	_qeyKryWEwftrafficrate.fillFieldMap()

	return _qeyKryWEwftrafficrate
}

type qeyKryWEwftrafficrate struct {
	qeyKryWEwftrafficrateDo

	ALL     field.Asterisk
	EMin    field.Int32
	IP      field.Bytes
	HitType field.String
	Hits    field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwftrafficrate) Table(newTableName string) *qeyKryWEwftrafficrate {
	q.qeyKryWEwftrafficrateDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwftrafficrate) As(alias string) *qeyKryWEwftrafficrate {
	q.qeyKryWEwftrafficrateDo.DO = *(q.qeyKryWEwftrafficrateDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwftrafficrate) updateTableName(table string) *qeyKryWEwftrafficrate {
	q.ALL = field.NewAsterisk(table)
	q.EMin = field.NewInt32(table, "eMin")
	q.IP = field.NewBytes(table, "IP")
	q.HitType = field.NewString(table, "hitType")
	q.Hits = field.NewInt32(table, "hits")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwftrafficrate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwftrafficrate) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["eMin"] = q.EMin
	q.fieldMap["IP"] = q.IP
	q.fieldMap["hitType"] = q.HitType
	q.fieldMap["hits"] = q.Hits
}

func (q qeyKryWEwftrafficrate) clone(db *gorm.DB) qeyKryWEwftrafficrate {
	q.qeyKryWEwftrafficrateDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwftrafficrate) replaceDB(db *gorm.DB) qeyKryWEwftrafficrate {
	q.qeyKryWEwftrafficrateDo.ReplaceDB(db)
	return q
}

type qeyKryWEwftrafficrateDo struct{ gen.DO }

type IQeyKryWEwftrafficrateDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwftrafficrateDo
	WithContext(ctx context.Context) IQeyKryWEwftrafficrateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwftrafficrateDo
	WriteDB() IQeyKryWEwftrafficrateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwftrafficrateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwftrafficrateDo
	Not(conds ...gen.Condition) IQeyKryWEwftrafficrateDo
	Or(conds ...gen.Condition) IQeyKryWEwftrafficrateDo
	Select(conds ...field.Expr) IQeyKryWEwftrafficrateDo
	Where(conds ...gen.Condition) IQeyKryWEwftrafficrateDo
	Order(conds ...field.Expr) IQeyKryWEwftrafficrateDo
	Distinct(cols ...field.Expr) IQeyKryWEwftrafficrateDo
	Omit(cols ...field.Expr) IQeyKryWEwftrafficrateDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwftrafficrateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwftrafficrateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwftrafficrateDo
	Group(cols ...field.Expr) IQeyKryWEwftrafficrateDo
	Having(conds ...gen.Condition) IQeyKryWEwftrafficrateDo
	Limit(limit int) IQeyKryWEwftrafficrateDo
	Offset(offset int) IQeyKryWEwftrafficrateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwftrafficrateDo
	Unscoped() IQeyKryWEwftrafficrateDo
	Create(values ...*model.QeyKryWEwftrafficrate) error
	CreateInBatches(values []*model.QeyKryWEwftrafficrate, batchSize int) error
	Save(values ...*model.QeyKryWEwftrafficrate) error
	First() (*model.QeyKryWEwftrafficrate, error)
	Take() (*model.QeyKryWEwftrafficrate, error)
	Last() (*model.QeyKryWEwftrafficrate, error)
	Find() ([]*model.QeyKryWEwftrafficrate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwftrafficrate, err error)
	FindInBatches(result *[]*model.QeyKryWEwftrafficrate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwftrafficrate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwftrafficrateDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwftrafficrateDo
	Joins(fields ...field.RelationField) IQeyKryWEwftrafficrateDo
	Preload(fields ...field.RelationField) IQeyKryWEwftrafficrateDo
	FirstOrInit() (*model.QeyKryWEwftrafficrate, error)
	FirstOrCreate() (*model.QeyKryWEwftrafficrate, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwftrafficrate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwftrafficrateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwftrafficrateDo) Debug() IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwftrafficrateDo) WithContext(ctx context.Context) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwftrafficrateDo) ReadDB() IQeyKryWEwftrafficrateDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwftrafficrateDo) WriteDB() IQeyKryWEwftrafficrateDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwftrafficrateDo) Session(config *gorm.Session) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwftrafficrateDo) Clauses(conds ...clause.Expression) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwftrafficrateDo) Returning(value interface{}, columns ...string) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwftrafficrateDo) Not(conds ...gen.Condition) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwftrafficrateDo) Or(conds ...gen.Condition) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwftrafficrateDo) Select(conds ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwftrafficrateDo) Where(conds ...gen.Condition) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwftrafficrateDo) Order(conds ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwftrafficrateDo) Distinct(cols ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwftrafficrateDo) Omit(cols ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwftrafficrateDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwftrafficrateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwftrafficrateDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwftrafficrateDo) Group(cols ...field.Expr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwftrafficrateDo) Having(conds ...gen.Condition) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwftrafficrateDo) Limit(limit int) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwftrafficrateDo) Offset(offset int) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwftrafficrateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwftrafficrateDo) Unscoped() IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwftrafficrateDo) Create(values ...*model.QeyKryWEwftrafficrate) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwftrafficrateDo) CreateInBatches(values []*model.QeyKryWEwftrafficrate, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwftrafficrateDo) Save(values ...*model.QeyKryWEwftrafficrate) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwftrafficrateDo) First() (*model.QeyKryWEwftrafficrate, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwftrafficrate), nil
	}
}

func (q qeyKryWEwftrafficrateDo) Take() (*model.QeyKryWEwftrafficrate, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwftrafficrate), nil
	}
}

func (q qeyKryWEwftrafficrateDo) Last() (*model.QeyKryWEwftrafficrate, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwftrafficrate), nil
	}
}

func (q qeyKryWEwftrafficrateDo) Find() ([]*model.QeyKryWEwftrafficrate, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwftrafficrate), err
}

func (q qeyKryWEwftrafficrateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwftrafficrate, err error) {
	buf := make([]*model.QeyKryWEwftrafficrate, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwftrafficrateDo) FindInBatches(result *[]*model.QeyKryWEwftrafficrate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwftrafficrateDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwftrafficrateDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwftrafficrateDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwftrafficrateDo) Joins(fields ...field.RelationField) IQeyKryWEwftrafficrateDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwftrafficrateDo) Preload(fields ...field.RelationField) IQeyKryWEwftrafficrateDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwftrafficrateDo) FirstOrInit() (*model.QeyKryWEwftrafficrate, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwftrafficrate), nil
	}
}

func (q qeyKryWEwftrafficrateDo) FirstOrCreate() (*model.QeyKryWEwftrafficrate, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwftrafficrate), nil
	}
}

func (q qeyKryWEwftrafficrateDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwftrafficrate, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwftrafficrateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwftrafficrateDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwftrafficrateDo) Delete(models ...*model.QeyKryWEwftrafficrate) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwftrafficrateDo) withDO(do gen.Dao) *qeyKryWEwftrafficrateDo {
	q.DO = *do.(*gen.DO)
	return q
}
