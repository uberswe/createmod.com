// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEsmushDirImage(db *gorm.DB, opts ...gen.DOOption) qeyKryWEsmushDirImage {
	_qeyKryWEsmushDirImage := qeyKryWEsmushDirImage{}

	_qeyKryWEsmushDirImage.qeyKryWEsmushDirImageDo.UseDB(db, opts...)
	_qeyKryWEsmushDirImage.qeyKryWEsmushDirImageDo.UseModel(&model.QeyKryWEsmushDirImage{})

	tableName := _qeyKryWEsmushDirImage.qeyKryWEsmushDirImageDo.TableName()
	_qeyKryWEsmushDirImage.ALL = field.NewAsterisk(tableName)
	_qeyKryWEsmushDirImage.ID = field.NewInt32(tableName, "id")
	_qeyKryWEsmushDirImage.Path = field.NewString(tableName, "path")
	_qeyKryWEsmushDirImage.PathHash = field.NewString(tableName, "path_hash")
	_qeyKryWEsmushDirImage.Resize = field.NewString(tableName, "resize")
	_qeyKryWEsmushDirImage.Lossy = field.NewString(tableName, "lossy")
	_qeyKryWEsmushDirImage.Error = field.NewString(tableName, "error")
	_qeyKryWEsmushDirImage.ImageSize = field.NewInt32(tableName, "image_size")
	_qeyKryWEsmushDirImage.OrigSize = field.NewInt32(tableName, "orig_size")
	_qeyKryWEsmushDirImage.FileTime = field.NewInt32(tableName, "file_time")
	_qeyKryWEsmushDirImage.LastScan = field.NewTime(tableName, "last_scan")
	_qeyKryWEsmushDirImage.Meta = field.NewString(tableName, "meta")

	_qeyKryWEsmushDirImage.fillFieldMap()

	return _qeyKryWEsmushDirImage
}

type qeyKryWEsmushDirImage struct {
	qeyKryWEsmushDirImageDo

	ALL       field.Asterisk
	ID        field.Int32
	Path      field.String
	PathHash  field.String
	Resize    field.String
	Lossy     field.String
	Error     field.String
	ImageSize field.Int32
	OrigSize  field.Int32
	FileTime  field.Int32
	LastScan  field.Time
	Meta      field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEsmushDirImage) Table(newTableName string) *qeyKryWEsmushDirImage {
	q.qeyKryWEsmushDirImageDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEsmushDirImage) As(alias string) *qeyKryWEsmushDirImage {
	q.qeyKryWEsmushDirImageDo.DO = *(q.qeyKryWEsmushDirImageDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEsmushDirImage) updateTableName(table string) *qeyKryWEsmushDirImage {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Path = field.NewString(table, "path")
	q.PathHash = field.NewString(table, "path_hash")
	q.Resize = field.NewString(table, "resize")
	q.Lossy = field.NewString(table, "lossy")
	q.Error = field.NewString(table, "error")
	q.ImageSize = field.NewInt32(table, "image_size")
	q.OrigSize = field.NewInt32(table, "orig_size")
	q.FileTime = field.NewInt32(table, "file_time")
	q.LastScan = field.NewTime(table, "last_scan")
	q.Meta = field.NewString(table, "meta")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEsmushDirImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEsmushDirImage) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 11)
	q.fieldMap["id"] = q.ID
	q.fieldMap["path"] = q.Path
	q.fieldMap["path_hash"] = q.PathHash
	q.fieldMap["resize"] = q.Resize
	q.fieldMap["lossy"] = q.Lossy
	q.fieldMap["error"] = q.Error
	q.fieldMap["image_size"] = q.ImageSize
	q.fieldMap["orig_size"] = q.OrigSize
	q.fieldMap["file_time"] = q.FileTime
	q.fieldMap["last_scan"] = q.LastScan
	q.fieldMap["meta"] = q.Meta
}

func (q qeyKryWEsmushDirImage) clone(db *gorm.DB) qeyKryWEsmushDirImage {
	q.qeyKryWEsmushDirImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEsmushDirImage) replaceDB(db *gorm.DB) qeyKryWEsmushDirImage {
	q.qeyKryWEsmushDirImageDo.ReplaceDB(db)
	return q
}

type qeyKryWEsmushDirImageDo struct{ gen.DO }

type IQeyKryWEsmushDirImageDo interface {
	gen.SubQuery
	Debug() IQeyKryWEsmushDirImageDo
	WithContext(ctx context.Context) IQeyKryWEsmushDirImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEsmushDirImageDo
	WriteDB() IQeyKryWEsmushDirImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEsmushDirImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEsmushDirImageDo
	Not(conds ...gen.Condition) IQeyKryWEsmushDirImageDo
	Or(conds ...gen.Condition) IQeyKryWEsmushDirImageDo
	Select(conds ...field.Expr) IQeyKryWEsmushDirImageDo
	Where(conds ...gen.Condition) IQeyKryWEsmushDirImageDo
	Order(conds ...field.Expr) IQeyKryWEsmushDirImageDo
	Distinct(cols ...field.Expr) IQeyKryWEsmushDirImageDo
	Omit(cols ...field.Expr) IQeyKryWEsmushDirImageDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEsmushDirImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEsmushDirImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEsmushDirImageDo
	Group(cols ...field.Expr) IQeyKryWEsmushDirImageDo
	Having(conds ...gen.Condition) IQeyKryWEsmushDirImageDo
	Limit(limit int) IQeyKryWEsmushDirImageDo
	Offset(offset int) IQeyKryWEsmushDirImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEsmushDirImageDo
	Unscoped() IQeyKryWEsmushDirImageDo
	Create(values ...*model.QeyKryWEsmushDirImage) error
	CreateInBatches(values []*model.QeyKryWEsmushDirImage, batchSize int) error
	Save(values ...*model.QeyKryWEsmushDirImage) error
	First() (*model.QeyKryWEsmushDirImage, error)
	Take() (*model.QeyKryWEsmushDirImage, error)
	Last() (*model.QeyKryWEsmushDirImage, error)
	Find() ([]*model.QeyKryWEsmushDirImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEsmushDirImage, err error)
	FindInBatches(result *[]*model.QeyKryWEsmushDirImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEsmushDirImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEsmushDirImageDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEsmushDirImageDo
	Joins(fields ...field.RelationField) IQeyKryWEsmushDirImageDo
	Preload(fields ...field.RelationField) IQeyKryWEsmushDirImageDo
	FirstOrInit() (*model.QeyKryWEsmushDirImage, error)
	FirstOrCreate() (*model.QeyKryWEsmushDirImage, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEsmushDirImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEsmushDirImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEsmushDirImageDo) Debug() IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEsmushDirImageDo) WithContext(ctx context.Context) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEsmushDirImageDo) ReadDB() IQeyKryWEsmushDirImageDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEsmushDirImageDo) WriteDB() IQeyKryWEsmushDirImageDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEsmushDirImageDo) Session(config *gorm.Session) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEsmushDirImageDo) Clauses(conds ...clause.Expression) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEsmushDirImageDo) Returning(value interface{}, columns ...string) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEsmushDirImageDo) Not(conds ...gen.Condition) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEsmushDirImageDo) Or(conds ...gen.Condition) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEsmushDirImageDo) Select(conds ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEsmushDirImageDo) Where(conds ...gen.Condition) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEsmushDirImageDo) Order(conds ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEsmushDirImageDo) Distinct(cols ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEsmushDirImageDo) Omit(cols ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEsmushDirImageDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEsmushDirImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEsmushDirImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEsmushDirImageDo) Group(cols ...field.Expr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEsmushDirImageDo) Having(conds ...gen.Condition) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEsmushDirImageDo) Limit(limit int) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEsmushDirImageDo) Offset(offset int) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEsmushDirImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEsmushDirImageDo) Unscoped() IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEsmushDirImageDo) Create(values ...*model.QeyKryWEsmushDirImage) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEsmushDirImageDo) CreateInBatches(values []*model.QeyKryWEsmushDirImage, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEsmushDirImageDo) Save(values ...*model.QeyKryWEsmushDirImage) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEsmushDirImageDo) First() (*model.QeyKryWEsmushDirImage, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEsmushDirImage), nil
	}
}

func (q qeyKryWEsmushDirImageDo) Take() (*model.QeyKryWEsmushDirImage, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEsmushDirImage), nil
	}
}

func (q qeyKryWEsmushDirImageDo) Last() (*model.QeyKryWEsmushDirImage, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEsmushDirImage), nil
	}
}

func (q qeyKryWEsmushDirImageDo) Find() ([]*model.QeyKryWEsmushDirImage, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEsmushDirImage), err
}

func (q qeyKryWEsmushDirImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEsmushDirImage, err error) {
	buf := make([]*model.QeyKryWEsmushDirImage, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEsmushDirImageDo) FindInBatches(result *[]*model.QeyKryWEsmushDirImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEsmushDirImageDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEsmushDirImageDo) Assign(attrs ...field.AssignExpr) IQeyKryWEsmushDirImageDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEsmushDirImageDo) Joins(fields ...field.RelationField) IQeyKryWEsmushDirImageDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEsmushDirImageDo) Preload(fields ...field.RelationField) IQeyKryWEsmushDirImageDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEsmushDirImageDo) FirstOrInit() (*model.QeyKryWEsmushDirImage, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEsmushDirImage), nil
	}
}

func (q qeyKryWEsmushDirImageDo) FirstOrCreate() (*model.QeyKryWEsmushDirImage, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEsmushDirImage), nil
	}
}

func (q qeyKryWEsmushDirImageDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEsmushDirImage, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEsmushDirImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEsmushDirImageDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEsmushDirImageDo) Delete(models ...*model.QeyKryWEsmushDirImage) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEsmushDirImageDo) withDO(do gen.Dao) *qeyKryWEsmushDirImageDo {
	q.DO = *do.(*gen.DO)
	return q
}
