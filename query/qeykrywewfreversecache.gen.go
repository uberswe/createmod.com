// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfreversecache(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfreversecache {
	_qeyKryWEwfreversecache := qeyKryWEwfreversecache{}

	_qeyKryWEwfreversecache.qeyKryWEwfreversecacheDo.UseDB(db, opts...)
	_qeyKryWEwfreversecache.qeyKryWEwfreversecacheDo.UseModel(&model.QeyKryWEwfreversecache{})

	tableName := _qeyKryWEwfreversecache.qeyKryWEwfreversecacheDo.TableName()
	_qeyKryWEwfreversecache.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfreversecache.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwfreversecache.Host = field.NewString(tableName, "host")
	_qeyKryWEwfreversecache.LastUpdate = field.NewInt32(tableName, "lastUpdate")

	_qeyKryWEwfreversecache.fillFieldMap()

	return _qeyKryWEwfreversecache
}

type qeyKryWEwfreversecache struct {
	qeyKryWEwfreversecacheDo

	ALL        field.Asterisk
	IP         field.Bytes
	Host       field.String
	LastUpdate field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfreversecache) Table(newTableName string) *qeyKryWEwfreversecache {
	q.qeyKryWEwfreversecacheDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfreversecache) As(alias string) *qeyKryWEwfreversecache {
	q.qeyKryWEwfreversecacheDo.DO = *(q.qeyKryWEwfreversecacheDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfreversecache) updateTableName(table string) *qeyKryWEwfreversecache {
	q.ALL = field.NewAsterisk(table)
	q.IP = field.NewBytes(table, "IP")
	q.Host = field.NewString(table, "host")
	q.LastUpdate = field.NewInt32(table, "lastUpdate")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfreversecache) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfreversecache) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["IP"] = q.IP
	q.fieldMap["host"] = q.Host
	q.fieldMap["lastUpdate"] = q.LastUpdate
}

func (q qeyKryWEwfreversecache) clone(db *gorm.DB) qeyKryWEwfreversecache {
	q.qeyKryWEwfreversecacheDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfreversecache) replaceDB(db *gorm.DB) qeyKryWEwfreversecache {
	q.qeyKryWEwfreversecacheDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfreversecacheDo struct{ gen.DO }

type IQeyKryWEwfreversecacheDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfreversecacheDo
	WithContext(ctx context.Context) IQeyKryWEwfreversecacheDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfreversecacheDo
	WriteDB() IQeyKryWEwfreversecacheDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfreversecacheDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfreversecacheDo
	Not(conds ...gen.Condition) IQeyKryWEwfreversecacheDo
	Or(conds ...gen.Condition) IQeyKryWEwfreversecacheDo
	Select(conds ...field.Expr) IQeyKryWEwfreversecacheDo
	Where(conds ...gen.Condition) IQeyKryWEwfreversecacheDo
	Order(conds ...field.Expr) IQeyKryWEwfreversecacheDo
	Distinct(cols ...field.Expr) IQeyKryWEwfreversecacheDo
	Omit(cols ...field.Expr) IQeyKryWEwfreversecacheDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfreversecacheDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfreversecacheDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfreversecacheDo
	Group(cols ...field.Expr) IQeyKryWEwfreversecacheDo
	Having(conds ...gen.Condition) IQeyKryWEwfreversecacheDo
	Limit(limit int) IQeyKryWEwfreversecacheDo
	Offset(offset int) IQeyKryWEwfreversecacheDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfreversecacheDo
	Unscoped() IQeyKryWEwfreversecacheDo
	Create(values ...*model.QeyKryWEwfreversecache) error
	CreateInBatches(values []*model.QeyKryWEwfreversecache, batchSize int) error
	Save(values ...*model.QeyKryWEwfreversecache) error
	First() (*model.QeyKryWEwfreversecache, error)
	Take() (*model.QeyKryWEwfreversecache, error)
	Last() (*model.QeyKryWEwfreversecache, error)
	Find() ([]*model.QeyKryWEwfreversecache, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfreversecache, err error)
	FindInBatches(result *[]*model.QeyKryWEwfreversecache, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfreversecache) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfreversecacheDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfreversecacheDo
	Joins(fields ...field.RelationField) IQeyKryWEwfreversecacheDo
	Preload(fields ...field.RelationField) IQeyKryWEwfreversecacheDo
	FirstOrInit() (*model.QeyKryWEwfreversecache, error)
	FirstOrCreate() (*model.QeyKryWEwfreversecache, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfreversecache, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfreversecacheDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfreversecacheDo) Debug() IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfreversecacheDo) WithContext(ctx context.Context) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfreversecacheDo) ReadDB() IQeyKryWEwfreversecacheDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfreversecacheDo) WriteDB() IQeyKryWEwfreversecacheDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfreversecacheDo) Session(config *gorm.Session) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfreversecacheDo) Clauses(conds ...clause.Expression) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfreversecacheDo) Returning(value interface{}, columns ...string) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfreversecacheDo) Not(conds ...gen.Condition) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfreversecacheDo) Or(conds ...gen.Condition) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfreversecacheDo) Select(conds ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfreversecacheDo) Where(conds ...gen.Condition) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfreversecacheDo) Order(conds ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfreversecacheDo) Distinct(cols ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfreversecacheDo) Omit(cols ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfreversecacheDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfreversecacheDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfreversecacheDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfreversecacheDo) Group(cols ...field.Expr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfreversecacheDo) Having(conds ...gen.Condition) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfreversecacheDo) Limit(limit int) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfreversecacheDo) Offset(offset int) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfreversecacheDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfreversecacheDo) Unscoped() IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfreversecacheDo) Create(values ...*model.QeyKryWEwfreversecache) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfreversecacheDo) CreateInBatches(values []*model.QeyKryWEwfreversecache, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfreversecacheDo) Save(values ...*model.QeyKryWEwfreversecache) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfreversecacheDo) First() (*model.QeyKryWEwfreversecache, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfreversecache), nil
	}
}

func (q qeyKryWEwfreversecacheDo) Take() (*model.QeyKryWEwfreversecache, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfreversecache), nil
	}
}

func (q qeyKryWEwfreversecacheDo) Last() (*model.QeyKryWEwfreversecache, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfreversecache), nil
	}
}

func (q qeyKryWEwfreversecacheDo) Find() ([]*model.QeyKryWEwfreversecache, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfreversecache), err
}

func (q qeyKryWEwfreversecacheDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfreversecache, err error) {
	buf := make([]*model.QeyKryWEwfreversecache, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfreversecacheDo) FindInBatches(result *[]*model.QeyKryWEwfreversecache, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfreversecacheDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfreversecacheDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfreversecacheDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfreversecacheDo) Joins(fields ...field.RelationField) IQeyKryWEwfreversecacheDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfreversecacheDo) Preload(fields ...field.RelationField) IQeyKryWEwfreversecacheDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfreversecacheDo) FirstOrInit() (*model.QeyKryWEwfreversecache, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfreversecache), nil
	}
}

func (q qeyKryWEwfreversecacheDo) FirstOrCreate() (*model.QeyKryWEwfreversecache, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfreversecache), nil
	}
}

func (q qeyKryWEwfreversecacheDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfreversecache, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfreversecacheDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfreversecacheDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfreversecacheDo) Delete(models ...*model.QeyKryWEwfreversecache) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfreversecacheDo) withDO(do gen.Dao) *qeyKryWEwfreversecacheDo {
	q.DO = *do.(*gen.DO)
	return q
}
