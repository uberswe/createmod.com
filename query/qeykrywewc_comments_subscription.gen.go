// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwcCommentsSubscription(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwcCommentsSubscription {
	_qeyKryWEwcCommentsSubscription := qeyKryWEwcCommentsSubscription{}

	_qeyKryWEwcCommentsSubscription.qeyKryWEwcCommentsSubscriptionDo.UseDB(db, opts...)
	_qeyKryWEwcCommentsSubscription.qeyKryWEwcCommentsSubscriptionDo.UseModel(&model.QeyKryWEwcCommentsSubscription{})

	tableName := _qeyKryWEwcCommentsSubscription.qeyKryWEwcCommentsSubscriptionDo.TableName()
	_qeyKryWEwcCommentsSubscription.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwcCommentsSubscription.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwcCommentsSubscription.Email = field.NewString(tableName, "email")
	_qeyKryWEwcCommentsSubscription.SubscribtionID = field.NewInt32(tableName, "subscribtion_id")
	_qeyKryWEwcCommentsSubscription.PostID = field.NewInt32(tableName, "post_id")
	_qeyKryWEwcCommentsSubscription.SubscribtionType = field.NewString(tableName, "subscribtion_type")
	_qeyKryWEwcCommentsSubscription.ActivationKey = field.NewString(tableName, "activation_key")
	_qeyKryWEwcCommentsSubscription.Confirm = field.NewInt32(tableName, "confirm")
	_qeyKryWEwcCommentsSubscription.SubscriptionDate = field.NewTime(tableName, "subscription_date")
	_qeyKryWEwcCommentsSubscription.ImportedFrom = field.NewString(tableName, "imported_from")

	_qeyKryWEwcCommentsSubscription.fillFieldMap()

	return _qeyKryWEwcCommentsSubscription
}

type qeyKryWEwcCommentsSubscription struct {
	qeyKryWEwcCommentsSubscriptionDo

	ALL              field.Asterisk
	ID               field.Int32
	Email            field.String
	SubscribtionID   field.Int32
	PostID           field.Int32
	SubscribtionType field.String
	ActivationKey    field.String
	Confirm          field.Int32
	SubscriptionDate field.Time
	ImportedFrom     field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwcCommentsSubscription) Table(newTableName string) *qeyKryWEwcCommentsSubscription {
	q.qeyKryWEwcCommentsSubscriptionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwcCommentsSubscription) As(alias string) *qeyKryWEwcCommentsSubscription {
	q.qeyKryWEwcCommentsSubscriptionDo.DO = *(q.qeyKryWEwcCommentsSubscriptionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwcCommentsSubscription) updateTableName(table string) *qeyKryWEwcCommentsSubscription {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Email = field.NewString(table, "email")
	q.SubscribtionID = field.NewInt32(table, "subscribtion_id")
	q.PostID = field.NewInt32(table, "post_id")
	q.SubscribtionType = field.NewString(table, "subscribtion_type")
	q.ActivationKey = field.NewString(table, "activation_key")
	q.Confirm = field.NewInt32(table, "confirm")
	q.SubscriptionDate = field.NewTime(table, "subscription_date")
	q.ImportedFrom = field.NewString(table, "imported_from")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwcCommentsSubscription) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwcCommentsSubscription) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["id"] = q.ID
	q.fieldMap["email"] = q.Email
	q.fieldMap["subscribtion_id"] = q.SubscribtionID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["subscribtion_type"] = q.SubscribtionType
	q.fieldMap["activation_key"] = q.ActivationKey
	q.fieldMap["confirm"] = q.Confirm
	q.fieldMap["subscription_date"] = q.SubscriptionDate
	q.fieldMap["imported_from"] = q.ImportedFrom
}

func (q qeyKryWEwcCommentsSubscription) clone(db *gorm.DB) qeyKryWEwcCommentsSubscription {
	q.qeyKryWEwcCommentsSubscriptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwcCommentsSubscription) replaceDB(db *gorm.DB) qeyKryWEwcCommentsSubscription {
	q.qeyKryWEwcCommentsSubscriptionDo.ReplaceDB(db)
	return q
}

type qeyKryWEwcCommentsSubscriptionDo struct{ gen.DO }

type IQeyKryWEwcCommentsSubscriptionDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwcCommentsSubscriptionDo
	WithContext(ctx context.Context) IQeyKryWEwcCommentsSubscriptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwcCommentsSubscriptionDo
	WriteDB() IQeyKryWEwcCommentsSubscriptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwcCommentsSubscriptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwcCommentsSubscriptionDo
	Not(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo
	Or(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo
	Select(conds ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	Where(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo
	Order(conds ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	Distinct(cols ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	Omit(cols ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	Group(cols ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo
	Having(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo
	Limit(limit int) IQeyKryWEwcCommentsSubscriptionDo
	Offset(offset int) IQeyKryWEwcCommentsSubscriptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcCommentsSubscriptionDo
	Unscoped() IQeyKryWEwcCommentsSubscriptionDo
	Create(values ...*model.QeyKryWEwcCommentsSubscription) error
	CreateInBatches(values []*model.QeyKryWEwcCommentsSubscription, batchSize int) error
	Save(values ...*model.QeyKryWEwcCommentsSubscription) error
	First() (*model.QeyKryWEwcCommentsSubscription, error)
	Take() (*model.QeyKryWEwcCommentsSubscription, error)
	Last() (*model.QeyKryWEwcCommentsSubscription, error)
	Find() ([]*model.QeyKryWEwcCommentsSubscription, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcCommentsSubscription, err error)
	FindInBatches(result *[]*model.QeyKryWEwcCommentsSubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwcCommentsSubscription) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwcCommentsSubscriptionDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwcCommentsSubscriptionDo
	Joins(fields ...field.RelationField) IQeyKryWEwcCommentsSubscriptionDo
	Preload(fields ...field.RelationField) IQeyKryWEwcCommentsSubscriptionDo
	FirstOrInit() (*model.QeyKryWEwcCommentsSubscription, error)
	FirstOrCreate() (*model.QeyKryWEwcCommentsSubscription, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwcCommentsSubscription, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwcCommentsSubscriptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwcCommentsSubscriptionDo) Debug() IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwcCommentsSubscriptionDo) WithContext(ctx context.Context) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwcCommentsSubscriptionDo) ReadDB() IQeyKryWEwcCommentsSubscriptionDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwcCommentsSubscriptionDo) WriteDB() IQeyKryWEwcCommentsSubscriptionDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwcCommentsSubscriptionDo) Session(config *gorm.Session) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Clauses(conds ...clause.Expression) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Returning(value interface{}, columns ...string) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Not(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Or(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Select(conds ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Where(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Order(conds ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Distinct(cols ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Omit(cols ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Group(cols ...field.Expr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Having(conds ...gen.Condition) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Limit(limit int) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Offset(offset int) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Unscoped() IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwcCommentsSubscriptionDo) Create(values ...*model.QeyKryWEwcCommentsSubscription) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwcCommentsSubscriptionDo) CreateInBatches(values []*model.QeyKryWEwcCommentsSubscription, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwcCommentsSubscriptionDo) Save(values ...*model.QeyKryWEwcCommentsSubscription) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwcCommentsSubscriptionDo) First() (*model.QeyKryWEwcCommentsSubscription, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcCommentsSubscription), nil
	}
}

func (q qeyKryWEwcCommentsSubscriptionDo) Take() (*model.QeyKryWEwcCommentsSubscription, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcCommentsSubscription), nil
	}
}

func (q qeyKryWEwcCommentsSubscriptionDo) Last() (*model.QeyKryWEwcCommentsSubscription, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcCommentsSubscription), nil
	}
}

func (q qeyKryWEwcCommentsSubscriptionDo) Find() ([]*model.QeyKryWEwcCommentsSubscription, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwcCommentsSubscription), err
}

func (q qeyKryWEwcCommentsSubscriptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcCommentsSubscription, err error) {
	buf := make([]*model.QeyKryWEwcCommentsSubscription, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwcCommentsSubscriptionDo) FindInBatches(result *[]*model.QeyKryWEwcCommentsSubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwcCommentsSubscriptionDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwcCommentsSubscriptionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwcCommentsSubscriptionDo) Joins(fields ...field.RelationField) IQeyKryWEwcCommentsSubscriptionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwcCommentsSubscriptionDo) Preload(fields ...field.RelationField) IQeyKryWEwcCommentsSubscriptionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwcCommentsSubscriptionDo) FirstOrInit() (*model.QeyKryWEwcCommentsSubscription, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcCommentsSubscription), nil
	}
}

func (q qeyKryWEwcCommentsSubscriptionDo) FirstOrCreate() (*model.QeyKryWEwcCommentsSubscription, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcCommentsSubscription), nil
	}
}

func (q qeyKryWEwcCommentsSubscriptionDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwcCommentsSubscription, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwcCommentsSubscriptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwcCommentsSubscriptionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwcCommentsSubscriptionDo) Delete(models ...*model.QeyKryWEwcCommentsSubscription) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwcCommentsSubscriptionDo) withDO(do gen.Dao) *qeyKryWEwcCommentsSubscriptionDo {
	q.DO = *do.(*gen.DO)
	return q
}
