// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEyoastSeoLink(db *gorm.DB, opts ...gen.DOOption) qeyKryWEyoastSeoLink {
	_qeyKryWEyoastSeoLink := qeyKryWEyoastSeoLink{}

	_qeyKryWEyoastSeoLink.qeyKryWEyoastSeoLinkDo.UseDB(db, opts...)
	_qeyKryWEyoastSeoLink.qeyKryWEyoastSeoLinkDo.UseModel(&model.QeyKryWEyoastSeoLink{})

	tableName := _qeyKryWEyoastSeoLink.qeyKryWEyoastSeoLinkDo.TableName()
	_qeyKryWEyoastSeoLink.ALL = field.NewAsterisk(tableName)
	_qeyKryWEyoastSeoLink.ID = field.NewInt64(tableName, "id")
	_qeyKryWEyoastSeoLink.URL = field.NewString(tableName, "url")
	_qeyKryWEyoastSeoLink.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEyoastSeoLink.TargetPostID = field.NewInt64(tableName, "target_post_id")
	_qeyKryWEyoastSeoLink.Type = field.NewString(tableName, "type")
	_qeyKryWEyoastSeoLink.IndexableID = field.NewInt32(tableName, "indexable_id")
	_qeyKryWEyoastSeoLink.TargetIndexableID = field.NewInt32(tableName, "target_indexable_id")
	_qeyKryWEyoastSeoLink.Height = field.NewInt32(tableName, "height")
	_qeyKryWEyoastSeoLink.Width = field.NewInt32(tableName, "width")
	_qeyKryWEyoastSeoLink.Size = field.NewInt32(tableName, "size")
	_qeyKryWEyoastSeoLink.Language = field.NewString(tableName, "language")
	_qeyKryWEyoastSeoLink.Region = field.NewString(tableName, "region")

	_qeyKryWEyoastSeoLink.fillFieldMap()

	return _qeyKryWEyoastSeoLink
}

type qeyKryWEyoastSeoLink struct {
	qeyKryWEyoastSeoLinkDo

	ALL               field.Asterisk
	ID                field.Int64
	URL               field.String
	PostID            field.Int64
	TargetPostID      field.Int64
	Type              field.String
	IndexableID       field.Int32
	TargetIndexableID field.Int32
	Height            field.Int32
	Width             field.Int32
	Size              field.Int32
	Language          field.String
	Region            field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEyoastSeoLink) Table(newTableName string) *qeyKryWEyoastSeoLink {
	q.qeyKryWEyoastSeoLinkDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEyoastSeoLink) As(alias string) *qeyKryWEyoastSeoLink {
	q.qeyKryWEyoastSeoLinkDo.DO = *(q.qeyKryWEyoastSeoLinkDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEyoastSeoLink) updateTableName(table string) *qeyKryWEyoastSeoLink {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.URL = field.NewString(table, "url")
	q.PostID = field.NewInt64(table, "post_id")
	q.TargetPostID = field.NewInt64(table, "target_post_id")
	q.Type = field.NewString(table, "type")
	q.IndexableID = field.NewInt32(table, "indexable_id")
	q.TargetIndexableID = field.NewInt32(table, "target_indexable_id")
	q.Height = field.NewInt32(table, "height")
	q.Width = field.NewInt32(table, "width")
	q.Size = field.NewInt32(table, "size")
	q.Language = field.NewString(table, "language")
	q.Region = field.NewString(table, "region")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEyoastSeoLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEyoastSeoLink) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 12)
	q.fieldMap["id"] = q.ID
	q.fieldMap["url"] = q.URL
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["target_post_id"] = q.TargetPostID
	q.fieldMap["type"] = q.Type
	q.fieldMap["indexable_id"] = q.IndexableID
	q.fieldMap["target_indexable_id"] = q.TargetIndexableID
	q.fieldMap["height"] = q.Height
	q.fieldMap["width"] = q.Width
	q.fieldMap["size"] = q.Size
	q.fieldMap["language"] = q.Language
	q.fieldMap["region"] = q.Region
}

func (q qeyKryWEyoastSeoLink) clone(db *gorm.DB) qeyKryWEyoastSeoLink {
	q.qeyKryWEyoastSeoLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEyoastSeoLink) replaceDB(db *gorm.DB) qeyKryWEyoastSeoLink {
	q.qeyKryWEyoastSeoLinkDo.ReplaceDB(db)
	return q
}

type qeyKryWEyoastSeoLinkDo struct{ gen.DO }

type IQeyKryWEyoastSeoLinkDo interface {
	gen.SubQuery
	Debug() IQeyKryWEyoastSeoLinkDo
	WithContext(ctx context.Context) IQeyKryWEyoastSeoLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEyoastSeoLinkDo
	WriteDB() IQeyKryWEyoastSeoLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEyoastSeoLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEyoastSeoLinkDo
	Not(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo
	Or(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo
	Select(conds ...field.Expr) IQeyKryWEyoastSeoLinkDo
	Where(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo
	Order(conds ...field.Expr) IQeyKryWEyoastSeoLinkDo
	Distinct(cols ...field.Expr) IQeyKryWEyoastSeoLinkDo
	Omit(cols ...field.Expr) IQeyKryWEyoastSeoLinkDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastSeoLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastSeoLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastSeoLinkDo
	Group(cols ...field.Expr) IQeyKryWEyoastSeoLinkDo
	Having(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo
	Limit(limit int) IQeyKryWEyoastSeoLinkDo
	Offset(offset int) IQeyKryWEyoastSeoLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastSeoLinkDo
	Unscoped() IQeyKryWEyoastSeoLinkDo
	Create(values ...*model.QeyKryWEyoastSeoLink) error
	CreateInBatches(values []*model.QeyKryWEyoastSeoLink, batchSize int) error
	Save(values ...*model.QeyKryWEyoastSeoLink) error
	First() (*model.QeyKryWEyoastSeoLink, error)
	Take() (*model.QeyKryWEyoastSeoLink, error)
	Last() (*model.QeyKryWEyoastSeoLink, error)
	Find() ([]*model.QeyKryWEyoastSeoLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastSeoLink, err error)
	FindInBatches(result *[]*model.QeyKryWEyoastSeoLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEyoastSeoLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastSeoLinkDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEyoastSeoLinkDo
	Joins(fields ...field.RelationField) IQeyKryWEyoastSeoLinkDo
	Preload(fields ...field.RelationField) IQeyKryWEyoastSeoLinkDo
	FirstOrInit() (*model.QeyKryWEyoastSeoLink, error)
	FirstOrCreate() (*model.QeyKryWEyoastSeoLink, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastSeoLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEyoastSeoLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEyoastSeoLinkDo) Debug() IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEyoastSeoLinkDo) WithContext(ctx context.Context) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEyoastSeoLinkDo) ReadDB() IQeyKryWEyoastSeoLinkDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEyoastSeoLinkDo) WriteDB() IQeyKryWEyoastSeoLinkDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEyoastSeoLinkDo) Session(config *gorm.Session) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEyoastSeoLinkDo) Clauses(conds ...clause.Expression) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Returning(value interface{}, columns ...string) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEyoastSeoLinkDo) Not(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Or(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Select(conds ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Where(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Order(conds ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Distinct(cols ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEyoastSeoLinkDo) Omit(cols ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEyoastSeoLinkDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEyoastSeoLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEyoastSeoLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEyoastSeoLinkDo) Group(cols ...field.Expr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEyoastSeoLinkDo) Having(conds ...gen.Condition) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEyoastSeoLinkDo) Limit(limit int) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEyoastSeoLinkDo) Offset(offset int) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEyoastSeoLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEyoastSeoLinkDo) Unscoped() IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEyoastSeoLinkDo) Create(values ...*model.QeyKryWEyoastSeoLink) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEyoastSeoLinkDo) CreateInBatches(values []*model.QeyKryWEyoastSeoLink, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEyoastSeoLinkDo) Save(values ...*model.QeyKryWEyoastSeoLink) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEyoastSeoLinkDo) First() (*model.QeyKryWEyoastSeoLink, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastSeoLink), nil
	}
}

func (q qeyKryWEyoastSeoLinkDo) Take() (*model.QeyKryWEyoastSeoLink, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastSeoLink), nil
	}
}

func (q qeyKryWEyoastSeoLinkDo) Last() (*model.QeyKryWEyoastSeoLink, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastSeoLink), nil
	}
}

func (q qeyKryWEyoastSeoLinkDo) Find() ([]*model.QeyKryWEyoastSeoLink, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEyoastSeoLink), err
}

func (q qeyKryWEyoastSeoLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastSeoLink, err error) {
	buf := make([]*model.QeyKryWEyoastSeoLink, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEyoastSeoLinkDo) FindInBatches(result *[]*model.QeyKryWEyoastSeoLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEyoastSeoLinkDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEyoastSeoLinkDo) Assign(attrs ...field.AssignExpr) IQeyKryWEyoastSeoLinkDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEyoastSeoLinkDo) Joins(fields ...field.RelationField) IQeyKryWEyoastSeoLinkDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEyoastSeoLinkDo) Preload(fields ...field.RelationField) IQeyKryWEyoastSeoLinkDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEyoastSeoLinkDo) FirstOrInit() (*model.QeyKryWEyoastSeoLink, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastSeoLink), nil
	}
}

func (q qeyKryWEyoastSeoLinkDo) FirstOrCreate() (*model.QeyKryWEyoastSeoLink, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastSeoLink), nil
	}
}

func (q qeyKryWEyoastSeoLinkDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastSeoLink, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEyoastSeoLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEyoastSeoLinkDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEyoastSeoLinkDo) Delete(models ...*model.QeyKryWEyoastSeoLink) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEyoastSeoLinkDo) withDO(do gen.Dao) *qeyKryWEyoastSeoLinkDo {
	q.DO = *do.(*gen.DO)
	return q
}
