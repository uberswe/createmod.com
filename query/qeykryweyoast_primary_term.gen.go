// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEyoastPrimaryTerm(db *gorm.DB, opts ...gen.DOOption) qeyKryWEyoastPrimaryTerm {
	_qeyKryWEyoastPrimaryTerm := qeyKryWEyoastPrimaryTerm{}

	_qeyKryWEyoastPrimaryTerm.qeyKryWEyoastPrimaryTermDo.UseDB(db, opts...)
	_qeyKryWEyoastPrimaryTerm.qeyKryWEyoastPrimaryTermDo.UseModel(&model.QeyKryWEyoastPrimaryTerm{})

	tableName := _qeyKryWEyoastPrimaryTerm.qeyKryWEyoastPrimaryTermDo.TableName()
	_qeyKryWEyoastPrimaryTerm.ALL = field.NewAsterisk(tableName)
	_qeyKryWEyoastPrimaryTerm.ID = field.NewInt32(tableName, "id")
	_qeyKryWEyoastPrimaryTerm.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEyoastPrimaryTerm.TermID = field.NewInt64(tableName, "term_id")
	_qeyKryWEyoastPrimaryTerm.Taxonomy = field.NewString(tableName, "taxonomy")
	_qeyKryWEyoastPrimaryTerm.CreatedAt = field.NewTime(tableName, "created_at")
	_qeyKryWEyoastPrimaryTerm.UpdatedAt = field.NewTime(tableName, "updated_at")
	_qeyKryWEyoastPrimaryTerm.BlogID = field.NewInt64(tableName, "blog_id")

	_qeyKryWEyoastPrimaryTerm.fillFieldMap()

	return _qeyKryWEyoastPrimaryTerm
}

type qeyKryWEyoastPrimaryTerm struct {
	qeyKryWEyoastPrimaryTermDo

	ALL       field.Asterisk
	ID        field.Int32
	PostID    field.Int64
	TermID    field.Int64
	Taxonomy  field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	BlogID    field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEyoastPrimaryTerm) Table(newTableName string) *qeyKryWEyoastPrimaryTerm {
	q.qeyKryWEyoastPrimaryTermDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEyoastPrimaryTerm) As(alias string) *qeyKryWEyoastPrimaryTerm {
	q.qeyKryWEyoastPrimaryTermDo.DO = *(q.qeyKryWEyoastPrimaryTermDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEyoastPrimaryTerm) updateTableName(table string) *qeyKryWEyoastPrimaryTerm {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.PostID = field.NewInt64(table, "post_id")
	q.TermID = field.NewInt64(table, "term_id")
	q.Taxonomy = field.NewString(table, "taxonomy")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.BlogID = field.NewInt64(table, "blog_id")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEyoastPrimaryTerm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEyoastPrimaryTerm) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["term_id"] = q.TermID
	q.fieldMap["taxonomy"] = q.Taxonomy
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["blog_id"] = q.BlogID
}

func (q qeyKryWEyoastPrimaryTerm) clone(db *gorm.DB) qeyKryWEyoastPrimaryTerm {
	q.qeyKryWEyoastPrimaryTermDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEyoastPrimaryTerm) replaceDB(db *gorm.DB) qeyKryWEyoastPrimaryTerm {
	q.qeyKryWEyoastPrimaryTermDo.ReplaceDB(db)
	return q
}

type qeyKryWEyoastPrimaryTermDo struct{ gen.DO }

type IQeyKryWEyoastPrimaryTermDo interface {
	gen.SubQuery
	Debug() IQeyKryWEyoastPrimaryTermDo
	WithContext(ctx context.Context) IQeyKryWEyoastPrimaryTermDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEyoastPrimaryTermDo
	WriteDB() IQeyKryWEyoastPrimaryTermDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEyoastPrimaryTermDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEyoastPrimaryTermDo
	Not(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo
	Or(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo
	Select(conds ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	Where(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo
	Order(conds ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	Distinct(cols ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	Omit(cols ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	Group(cols ...field.Expr) IQeyKryWEyoastPrimaryTermDo
	Having(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo
	Limit(limit int) IQeyKryWEyoastPrimaryTermDo
	Offset(offset int) IQeyKryWEyoastPrimaryTermDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastPrimaryTermDo
	Unscoped() IQeyKryWEyoastPrimaryTermDo
	Create(values ...*model.QeyKryWEyoastPrimaryTerm) error
	CreateInBatches(values []*model.QeyKryWEyoastPrimaryTerm, batchSize int) error
	Save(values ...*model.QeyKryWEyoastPrimaryTerm) error
	First() (*model.QeyKryWEyoastPrimaryTerm, error)
	Take() (*model.QeyKryWEyoastPrimaryTerm, error)
	Last() (*model.QeyKryWEyoastPrimaryTerm, error)
	Find() ([]*model.QeyKryWEyoastPrimaryTerm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastPrimaryTerm, err error)
	FindInBatches(result *[]*model.QeyKryWEyoastPrimaryTerm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEyoastPrimaryTerm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastPrimaryTermDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEyoastPrimaryTermDo
	Joins(fields ...field.RelationField) IQeyKryWEyoastPrimaryTermDo
	Preload(fields ...field.RelationField) IQeyKryWEyoastPrimaryTermDo
	FirstOrInit() (*model.QeyKryWEyoastPrimaryTerm, error)
	FirstOrCreate() (*model.QeyKryWEyoastPrimaryTerm, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastPrimaryTerm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEyoastPrimaryTermDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEyoastPrimaryTermDo) Debug() IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEyoastPrimaryTermDo) WithContext(ctx context.Context) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEyoastPrimaryTermDo) ReadDB() IQeyKryWEyoastPrimaryTermDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEyoastPrimaryTermDo) WriteDB() IQeyKryWEyoastPrimaryTermDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEyoastPrimaryTermDo) Session(config *gorm.Session) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEyoastPrimaryTermDo) Clauses(conds ...clause.Expression) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Returning(value interface{}, columns ...string) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEyoastPrimaryTermDo) Not(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Or(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Select(conds ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Where(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Order(conds ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Distinct(cols ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEyoastPrimaryTermDo) Omit(cols ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEyoastPrimaryTermDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEyoastPrimaryTermDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEyoastPrimaryTermDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEyoastPrimaryTermDo) Group(cols ...field.Expr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEyoastPrimaryTermDo) Having(conds ...gen.Condition) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEyoastPrimaryTermDo) Limit(limit int) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEyoastPrimaryTermDo) Offset(offset int) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEyoastPrimaryTermDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEyoastPrimaryTermDo) Unscoped() IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEyoastPrimaryTermDo) Create(values ...*model.QeyKryWEyoastPrimaryTerm) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEyoastPrimaryTermDo) CreateInBatches(values []*model.QeyKryWEyoastPrimaryTerm, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEyoastPrimaryTermDo) Save(values ...*model.QeyKryWEyoastPrimaryTerm) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEyoastPrimaryTermDo) First() (*model.QeyKryWEyoastPrimaryTerm, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastPrimaryTerm), nil
	}
}

func (q qeyKryWEyoastPrimaryTermDo) Take() (*model.QeyKryWEyoastPrimaryTerm, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastPrimaryTerm), nil
	}
}

func (q qeyKryWEyoastPrimaryTermDo) Last() (*model.QeyKryWEyoastPrimaryTerm, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastPrimaryTerm), nil
	}
}

func (q qeyKryWEyoastPrimaryTermDo) Find() ([]*model.QeyKryWEyoastPrimaryTerm, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEyoastPrimaryTerm), err
}

func (q qeyKryWEyoastPrimaryTermDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEyoastPrimaryTerm, err error) {
	buf := make([]*model.QeyKryWEyoastPrimaryTerm, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEyoastPrimaryTermDo) FindInBatches(result *[]*model.QeyKryWEyoastPrimaryTerm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEyoastPrimaryTermDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEyoastPrimaryTermDo) Assign(attrs ...field.AssignExpr) IQeyKryWEyoastPrimaryTermDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEyoastPrimaryTermDo) Joins(fields ...field.RelationField) IQeyKryWEyoastPrimaryTermDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEyoastPrimaryTermDo) Preload(fields ...field.RelationField) IQeyKryWEyoastPrimaryTermDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEyoastPrimaryTermDo) FirstOrInit() (*model.QeyKryWEyoastPrimaryTerm, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastPrimaryTerm), nil
	}
}

func (q qeyKryWEyoastPrimaryTermDo) FirstOrCreate() (*model.QeyKryWEyoastPrimaryTerm, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEyoastPrimaryTerm), nil
	}
}

func (q qeyKryWEyoastPrimaryTermDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEyoastPrimaryTerm, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEyoastPrimaryTermDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEyoastPrimaryTermDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEyoastPrimaryTermDo) Delete(models ...*model.QeyKryWEyoastPrimaryTerm) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEyoastPrimaryTermDo) withDO(do gen.Dao) *qeyKryWEyoastPrimaryTermDo {
	q.DO = *do.(*gen.DO)
	return q
}
