// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEactionschedulerGroup(db *gorm.DB, opts ...gen.DOOption) qeyKryWEactionschedulerGroup {
	_qeyKryWEactionschedulerGroup := qeyKryWEactionschedulerGroup{}

	_qeyKryWEactionschedulerGroup.qeyKryWEactionschedulerGroupDo.UseDB(db, opts...)
	_qeyKryWEactionschedulerGroup.qeyKryWEactionschedulerGroupDo.UseModel(&model.QeyKryWEactionschedulerGroup{})

	tableName := _qeyKryWEactionschedulerGroup.qeyKryWEactionschedulerGroupDo.TableName()
	_qeyKryWEactionschedulerGroup.ALL = field.NewAsterisk(tableName)
	_qeyKryWEactionschedulerGroup.GroupID = field.NewInt64(tableName, "group_id")
	_qeyKryWEactionschedulerGroup.Slug = field.NewString(tableName, "slug")

	_qeyKryWEactionschedulerGroup.fillFieldMap()

	return _qeyKryWEactionschedulerGroup
}

type qeyKryWEactionschedulerGroup struct {
	qeyKryWEactionschedulerGroupDo

	ALL     field.Asterisk
	GroupID field.Int64
	Slug    field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEactionschedulerGroup) Table(newTableName string) *qeyKryWEactionschedulerGroup {
	q.qeyKryWEactionschedulerGroupDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEactionschedulerGroup) As(alias string) *qeyKryWEactionschedulerGroup {
	q.qeyKryWEactionschedulerGroupDo.DO = *(q.qeyKryWEactionschedulerGroupDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEactionschedulerGroup) updateTableName(table string) *qeyKryWEactionschedulerGroup {
	q.ALL = field.NewAsterisk(table)
	q.GroupID = field.NewInt64(table, "group_id")
	q.Slug = field.NewString(table, "slug")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEactionschedulerGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEactionschedulerGroup) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["group_id"] = q.GroupID
	q.fieldMap["slug"] = q.Slug
}

func (q qeyKryWEactionschedulerGroup) clone(db *gorm.DB) qeyKryWEactionschedulerGroup {
	q.qeyKryWEactionschedulerGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEactionschedulerGroup) replaceDB(db *gorm.DB) qeyKryWEactionschedulerGroup {
	q.qeyKryWEactionschedulerGroupDo.ReplaceDB(db)
	return q
}

type qeyKryWEactionschedulerGroupDo struct{ gen.DO }

type IQeyKryWEactionschedulerGroupDo interface {
	gen.SubQuery
	Debug() IQeyKryWEactionschedulerGroupDo
	WithContext(ctx context.Context) IQeyKryWEactionschedulerGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEactionschedulerGroupDo
	WriteDB() IQeyKryWEactionschedulerGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEactionschedulerGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerGroupDo
	Not(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo
	Or(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo
	Select(conds ...field.Expr) IQeyKryWEactionschedulerGroupDo
	Where(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo
	Order(conds ...field.Expr) IQeyKryWEactionschedulerGroupDo
	Distinct(cols ...field.Expr) IQeyKryWEactionschedulerGroupDo
	Omit(cols ...field.Expr) IQeyKryWEactionschedulerGroupDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerGroupDo
	Group(cols ...field.Expr) IQeyKryWEactionschedulerGroupDo
	Having(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo
	Limit(limit int) IQeyKryWEactionschedulerGroupDo
	Offset(offset int) IQeyKryWEactionschedulerGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerGroupDo
	Unscoped() IQeyKryWEactionschedulerGroupDo
	Create(values ...*model.QeyKryWEactionschedulerGroup) error
	CreateInBatches(values []*model.QeyKryWEactionschedulerGroup, batchSize int) error
	Save(values ...*model.QeyKryWEactionschedulerGroup) error
	First() (*model.QeyKryWEactionschedulerGroup, error)
	Take() (*model.QeyKryWEactionschedulerGroup, error)
	Last() (*model.QeyKryWEactionschedulerGroup, error)
	Find() ([]*model.QeyKryWEactionschedulerGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerGroup, err error)
	FindInBatches(result *[]*model.QeyKryWEactionschedulerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEactionschedulerGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerGroupDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerGroupDo
	Joins(fields ...field.RelationField) IQeyKryWEactionschedulerGroupDo
	Preload(fields ...field.RelationField) IQeyKryWEactionschedulerGroupDo
	FirstOrInit() (*model.QeyKryWEactionschedulerGroup, error)
	FirstOrCreate() (*model.QeyKryWEactionschedulerGroup, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEactionschedulerGroupDo) Debug() IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEactionschedulerGroupDo) WithContext(ctx context.Context) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEactionschedulerGroupDo) ReadDB() IQeyKryWEactionschedulerGroupDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEactionschedulerGroupDo) WriteDB() IQeyKryWEactionschedulerGroupDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEactionschedulerGroupDo) Session(config *gorm.Session) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEactionschedulerGroupDo) Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEactionschedulerGroupDo) Not(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Or(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Select(conds ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Where(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Order(conds ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Distinct(cols ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEactionschedulerGroupDo) Omit(cols ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEactionschedulerGroupDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEactionschedulerGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEactionschedulerGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEactionschedulerGroupDo) Group(cols ...field.Expr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEactionschedulerGroupDo) Having(conds ...gen.Condition) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEactionschedulerGroupDo) Limit(limit int) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEactionschedulerGroupDo) Offset(offset int) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEactionschedulerGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEactionschedulerGroupDo) Unscoped() IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEactionschedulerGroupDo) Create(values ...*model.QeyKryWEactionschedulerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEactionschedulerGroupDo) CreateInBatches(values []*model.QeyKryWEactionschedulerGroup, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEactionschedulerGroupDo) Save(values ...*model.QeyKryWEactionschedulerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEactionschedulerGroupDo) First() (*model.QeyKryWEactionschedulerGroup, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerGroup), nil
	}
}

func (q qeyKryWEactionschedulerGroupDo) Take() (*model.QeyKryWEactionschedulerGroup, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerGroup), nil
	}
}

func (q qeyKryWEactionschedulerGroupDo) Last() (*model.QeyKryWEactionschedulerGroup, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerGroup), nil
	}
}

func (q qeyKryWEactionschedulerGroupDo) Find() ([]*model.QeyKryWEactionschedulerGroup, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEactionschedulerGroup), err
}

func (q qeyKryWEactionschedulerGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerGroup, err error) {
	buf := make([]*model.QeyKryWEactionschedulerGroup, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEactionschedulerGroupDo) FindInBatches(result *[]*model.QeyKryWEactionschedulerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEactionschedulerGroupDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEactionschedulerGroupDo) Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerGroupDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEactionschedulerGroupDo) Joins(fields ...field.RelationField) IQeyKryWEactionschedulerGroupDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerGroupDo) Preload(fields ...field.RelationField) IQeyKryWEactionschedulerGroupDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerGroupDo) FirstOrInit() (*model.QeyKryWEactionschedulerGroup, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerGroup), nil
	}
}

func (q qeyKryWEactionschedulerGroupDo) FirstOrCreate() (*model.QeyKryWEactionschedulerGroup, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerGroup), nil
	}
}

func (q qeyKryWEactionschedulerGroupDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerGroup, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEactionschedulerGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEactionschedulerGroupDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEactionschedulerGroupDo) Delete(models ...*model.QeyKryWEactionschedulerGroup) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEactionschedulerGroupDo) withDO(do gen.Dao) *qeyKryWEactionschedulerGroupDo {
	q.DO = *do.(*gen.DO)
	return q
}
