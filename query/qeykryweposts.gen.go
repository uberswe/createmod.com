// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEpost(db *gorm.DB, opts ...gen.DOOption) qeyKryWEpost {
	_qeyKryWEpost := qeyKryWEpost{}

	_qeyKryWEpost.qeyKryWEpostDo.UseDB(db, opts...)
	_qeyKryWEpost.qeyKryWEpostDo.UseModel(&model.QeyKryWEpost{})

	tableName := _qeyKryWEpost.qeyKryWEpostDo.TableName()
	_qeyKryWEpost.ALL = field.NewAsterisk(tableName)
	_qeyKryWEpost.ID = field.NewInt64(tableName, "ID")
	_qeyKryWEpost.PostAuthor = field.NewInt64(tableName, "post_author")
	_qeyKryWEpost.PostDate = field.NewTime(tableName, "post_date")
	_qeyKryWEpost.PostDateGmt = field.NewTime(tableName, "post_date_gmt")
	_qeyKryWEpost.PostContent = field.NewString(tableName, "post_content")
	_qeyKryWEpost.PostTitle = field.NewString(tableName, "post_title")
	_qeyKryWEpost.PostExcerpt = field.NewString(tableName, "post_excerpt")
	_qeyKryWEpost.PostStatus = field.NewString(tableName, "post_status")
	_qeyKryWEpost.CommentStatus = field.NewString(tableName, "comment_status")
	_qeyKryWEpost.PingStatus = field.NewString(tableName, "ping_status")
	_qeyKryWEpost.PostPassword = field.NewString(tableName, "post_password")
	_qeyKryWEpost.PostName = field.NewString(tableName, "post_name")
	_qeyKryWEpost.ToPing = field.NewString(tableName, "to_ping")
	_qeyKryWEpost.Pinged = field.NewString(tableName, "pinged")
	_qeyKryWEpost.PostModified = field.NewTime(tableName, "post_modified")
	_qeyKryWEpost.PostModifiedGmt = field.NewTime(tableName, "post_modified_gmt")
	_qeyKryWEpost.PostContentFiltered = field.NewString(tableName, "post_content_filtered")
	_qeyKryWEpost.PostParent = field.NewInt64(tableName, "post_parent")
	_qeyKryWEpost.GUID = field.NewString(tableName, "guid")
	_qeyKryWEpost.MenuOrder = field.NewInt32(tableName, "menu_order")
	_qeyKryWEpost.PostType = field.NewString(tableName, "post_type")
	_qeyKryWEpost.PostMimeType = field.NewString(tableName, "post_mime_type")
	_qeyKryWEpost.CommentCount = field.NewInt64(tableName, "comment_count")

	_qeyKryWEpost.fillFieldMap()

	return _qeyKryWEpost
}

type qeyKryWEpost struct {
	qeyKryWEpostDo

	ALL                 field.Asterisk
	ID                  field.Int64
	PostAuthor          field.Int64
	PostDate            field.Time
	PostDateGmt         field.Time
	PostContent         field.String
	PostTitle           field.String
	PostExcerpt         field.String
	PostStatus          field.String
	CommentStatus       field.String
	PingStatus          field.String
	PostPassword        field.String
	PostName            field.String
	ToPing              field.String
	Pinged              field.String
	PostModified        field.Time
	PostModifiedGmt     field.Time
	PostContentFiltered field.String
	PostParent          field.Int64
	GUID                field.String
	MenuOrder           field.Int32
	PostType            field.String
	PostMimeType        field.String
	CommentCount        field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEpost) Table(newTableName string) *qeyKryWEpost {
	q.qeyKryWEpostDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEpost) As(alias string) *qeyKryWEpost {
	q.qeyKryWEpostDo.DO = *(q.qeyKryWEpostDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEpost) updateTableName(table string) *qeyKryWEpost {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "ID")
	q.PostAuthor = field.NewInt64(table, "post_author")
	q.PostDate = field.NewTime(table, "post_date")
	q.PostDateGmt = field.NewTime(table, "post_date_gmt")
	q.PostContent = field.NewString(table, "post_content")
	q.PostTitle = field.NewString(table, "post_title")
	q.PostExcerpt = field.NewString(table, "post_excerpt")
	q.PostStatus = field.NewString(table, "post_status")
	q.CommentStatus = field.NewString(table, "comment_status")
	q.PingStatus = field.NewString(table, "ping_status")
	q.PostPassword = field.NewString(table, "post_password")
	q.PostName = field.NewString(table, "post_name")
	q.ToPing = field.NewString(table, "to_ping")
	q.Pinged = field.NewString(table, "pinged")
	q.PostModified = field.NewTime(table, "post_modified")
	q.PostModifiedGmt = field.NewTime(table, "post_modified_gmt")
	q.PostContentFiltered = field.NewString(table, "post_content_filtered")
	q.PostParent = field.NewInt64(table, "post_parent")
	q.GUID = field.NewString(table, "guid")
	q.MenuOrder = field.NewInt32(table, "menu_order")
	q.PostType = field.NewString(table, "post_type")
	q.PostMimeType = field.NewString(table, "post_mime_type")
	q.CommentCount = field.NewInt64(table, "comment_count")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEpost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEpost) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 23)
	q.fieldMap["ID"] = q.ID
	q.fieldMap["post_author"] = q.PostAuthor
	q.fieldMap["post_date"] = q.PostDate
	q.fieldMap["post_date_gmt"] = q.PostDateGmt
	q.fieldMap["post_content"] = q.PostContent
	q.fieldMap["post_title"] = q.PostTitle
	q.fieldMap["post_excerpt"] = q.PostExcerpt
	q.fieldMap["post_status"] = q.PostStatus
	q.fieldMap["comment_status"] = q.CommentStatus
	q.fieldMap["ping_status"] = q.PingStatus
	q.fieldMap["post_password"] = q.PostPassword
	q.fieldMap["post_name"] = q.PostName
	q.fieldMap["to_ping"] = q.ToPing
	q.fieldMap["pinged"] = q.Pinged
	q.fieldMap["post_modified"] = q.PostModified
	q.fieldMap["post_modified_gmt"] = q.PostModifiedGmt
	q.fieldMap["post_content_filtered"] = q.PostContentFiltered
	q.fieldMap["post_parent"] = q.PostParent
	q.fieldMap["guid"] = q.GUID
	q.fieldMap["menu_order"] = q.MenuOrder
	q.fieldMap["post_type"] = q.PostType
	q.fieldMap["post_mime_type"] = q.PostMimeType
	q.fieldMap["comment_count"] = q.CommentCount
}

func (q qeyKryWEpost) clone(db *gorm.DB) qeyKryWEpost {
	q.qeyKryWEpostDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEpost) replaceDB(db *gorm.DB) qeyKryWEpost {
	q.qeyKryWEpostDo.ReplaceDB(db)
	return q
}

type qeyKryWEpostDo struct{ gen.DO }

type IQeyKryWEpostDo interface {
	gen.SubQuery
	Debug() IQeyKryWEpostDo
	WithContext(ctx context.Context) IQeyKryWEpostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEpostDo
	WriteDB() IQeyKryWEpostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEpostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEpostDo
	Not(conds ...gen.Condition) IQeyKryWEpostDo
	Or(conds ...gen.Condition) IQeyKryWEpostDo
	Select(conds ...field.Expr) IQeyKryWEpostDo
	Where(conds ...gen.Condition) IQeyKryWEpostDo
	Order(conds ...field.Expr) IQeyKryWEpostDo
	Distinct(cols ...field.Expr) IQeyKryWEpostDo
	Omit(cols ...field.Expr) IQeyKryWEpostDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEpostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostDo
	Group(cols ...field.Expr) IQeyKryWEpostDo
	Having(conds ...gen.Condition) IQeyKryWEpostDo
	Limit(limit int) IQeyKryWEpostDo
	Offset(offset int) IQeyKryWEpostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEpostDo
	Unscoped() IQeyKryWEpostDo
	Create(values ...*model.QeyKryWEpost) error
	CreateInBatches(values []*model.QeyKryWEpost, batchSize int) error
	Save(values ...*model.QeyKryWEpost) error
	First() (*model.QeyKryWEpost, error)
	Take() (*model.QeyKryWEpost, error)
	Last() (*model.QeyKryWEpost, error)
	Find() ([]*model.QeyKryWEpost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEpost, err error)
	FindInBatches(result *[]*model.QeyKryWEpost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEpost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEpostDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEpostDo
	Joins(fields ...field.RelationField) IQeyKryWEpostDo
	Preload(fields ...field.RelationField) IQeyKryWEpostDo
	FirstOrInit() (*model.QeyKryWEpost, error)
	FirstOrCreate() (*model.QeyKryWEpost, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEpost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEpostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEpostDo) Debug() IQeyKryWEpostDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEpostDo) WithContext(ctx context.Context) IQeyKryWEpostDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEpostDo) ReadDB() IQeyKryWEpostDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEpostDo) WriteDB() IQeyKryWEpostDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEpostDo) Session(config *gorm.Session) IQeyKryWEpostDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEpostDo) Clauses(conds ...clause.Expression) IQeyKryWEpostDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEpostDo) Returning(value interface{}, columns ...string) IQeyKryWEpostDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEpostDo) Not(conds ...gen.Condition) IQeyKryWEpostDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEpostDo) Or(conds ...gen.Condition) IQeyKryWEpostDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEpostDo) Select(conds ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEpostDo) Where(conds ...gen.Condition) IQeyKryWEpostDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEpostDo) Order(conds ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEpostDo) Distinct(cols ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEpostDo) Omit(cols ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEpostDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEpostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEpostDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEpostDo) Group(cols ...field.Expr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEpostDo) Having(conds ...gen.Condition) IQeyKryWEpostDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEpostDo) Limit(limit int) IQeyKryWEpostDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEpostDo) Offset(offset int) IQeyKryWEpostDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEpostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEpostDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEpostDo) Unscoped() IQeyKryWEpostDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEpostDo) Create(values ...*model.QeyKryWEpost) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEpostDo) CreateInBatches(values []*model.QeyKryWEpost, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEpostDo) Save(values ...*model.QeyKryWEpost) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEpostDo) First() (*model.QeyKryWEpost, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpost), nil
	}
}

func (q qeyKryWEpostDo) Take() (*model.QeyKryWEpost, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpost), nil
	}
}

func (q qeyKryWEpostDo) Last() (*model.QeyKryWEpost, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpost), nil
	}
}

func (q qeyKryWEpostDo) Find() ([]*model.QeyKryWEpost, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEpost), err
}

func (q qeyKryWEpostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEpost, err error) {
	buf := make([]*model.QeyKryWEpost, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEpostDo) FindInBatches(result *[]*model.QeyKryWEpost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEpostDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEpostDo) Assign(attrs ...field.AssignExpr) IQeyKryWEpostDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEpostDo) Joins(fields ...field.RelationField) IQeyKryWEpostDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEpostDo) Preload(fields ...field.RelationField) IQeyKryWEpostDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEpostDo) FirstOrInit() (*model.QeyKryWEpost, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpost), nil
	}
}

func (q qeyKryWEpostDo) FirstOrCreate() (*model.QeyKryWEpost, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEpost), nil
	}
}

func (q qeyKryWEpostDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEpost, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEpostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEpostDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEpostDo) Delete(models ...*model.QeyKryWEpost) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEpostDo) withDO(do gen.Dao) *qeyKryWEpostDo {
	q.DO = *do.(*gen.DO)
	return q
}
