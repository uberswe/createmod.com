// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEuserRegistrationSession(db *gorm.DB, opts ...gen.DOOption) qeyKryWEuserRegistrationSession {
	_qeyKryWEuserRegistrationSession := qeyKryWEuserRegistrationSession{}

	_qeyKryWEuserRegistrationSession.qeyKryWEuserRegistrationSessionDo.UseDB(db, opts...)
	_qeyKryWEuserRegistrationSession.qeyKryWEuserRegistrationSessionDo.UseModel(&model.QeyKryWEuserRegistrationSession{})

	tableName := _qeyKryWEuserRegistrationSession.qeyKryWEuserRegistrationSessionDo.TableName()
	_qeyKryWEuserRegistrationSession.ALL = field.NewAsterisk(tableName)
	_qeyKryWEuserRegistrationSession.SessionID = field.NewInt64(tableName, "session_id")
	_qeyKryWEuserRegistrationSession.SessionKey = field.NewString(tableName, "session_key")
	_qeyKryWEuserRegistrationSession.SessionValue = field.NewString(tableName, "session_value")
	_qeyKryWEuserRegistrationSession.SessionExpiry = field.NewInt64(tableName, "session_expiry")

	_qeyKryWEuserRegistrationSession.fillFieldMap()

	return _qeyKryWEuserRegistrationSession
}

type qeyKryWEuserRegistrationSession struct {
	qeyKryWEuserRegistrationSessionDo

	ALL           field.Asterisk
	SessionID     field.Int64
	SessionKey    field.String
	SessionValue  field.String
	SessionExpiry field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEuserRegistrationSession) Table(newTableName string) *qeyKryWEuserRegistrationSession {
	q.qeyKryWEuserRegistrationSessionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEuserRegistrationSession) As(alias string) *qeyKryWEuserRegistrationSession {
	q.qeyKryWEuserRegistrationSessionDo.DO = *(q.qeyKryWEuserRegistrationSessionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEuserRegistrationSession) updateTableName(table string) *qeyKryWEuserRegistrationSession {
	q.ALL = field.NewAsterisk(table)
	q.SessionID = field.NewInt64(table, "session_id")
	q.SessionKey = field.NewString(table, "session_key")
	q.SessionValue = field.NewString(table, "session_value")
	q.SessionExpiry = field.NewInt64(table, "session_expiry")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEuserRegistrationSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEuserRegistrationSession) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["session_id"] = q.SessionID
	q.fieldMap["session_key"] = q.SessionKey
	q.fieldMap["session_value"] = q.SessionValue
	q.fieldMap["session_expiry"] = q.SessionExpiry
}

func (q qeyKryWEuserRegistrationSession) clone(db *gorm.DB) qeyKryWEuserRegistrationSession {
	q.qeyKryWEuserRegistrationSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEuserRegistrationSession) replaceDB(db *gorm.DB) qeyKryWEuserRegistrationSession {
	q.qeyKryWEuserRegistrationSessionDo.ReplaceDB(db)
	return q
}

type qeyKryWEuserRegistrationSessionDo struct{ gen.DO }

type IQeyKryWEuserRegistrationSessionDo interface {
	gen.SubQuery
	Debug() IQeyKryWEuserRegistrationSessionDo
	WithContext(ctx context.Context) IQeyKryWEuserRegistrationSessionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEuserRegistrationSessionDo
	WriteDB() IQeyKryWEuserRegistrationSessionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEuserRegistrationSessionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEuserRegistrationSessionDo
	Not(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo
	Or(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo
	Select(conds ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	Where(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo
	Order(conds ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	Distinct(cols ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	Omit(cols ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	Group(cols ...field.Expr) IQeyKryWEuserRegistrationSessionDo
	Having(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo
	Limit(limit int) IQeyKryWEuserRegistrationSessionDo
	Offset(offset int) IQeyKryWEuserRegistrationSessionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEuserRegistrationSessionDo
	Unscoped() IQeyKryWEuserRegistrationSessionDo
	Create(values ...*model.QeyKryWEuserRegistrationSession) error
	CreateInBatches(values []*model.QeyKryWEuserRegistrationSession, batchSize int) error
	Save(values ...*model.QeyKryWEuserRegistrationSession) error
	First() (*model.QeyKryWEuserRegistrationSession, error)
	Take() (*model.QeyKryWEuserRegistrationSession, error)
	Last() (*model.QeyKryWEuserRegistrationSession, error)
	Find() ([]*model.QeyKryWEuserRegistrationSession, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEuserRegistrationSession, err error)
	FindInBatches(result *[]*model.QeyKryWEuserRegistrationSession, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEuserRegistrationSession) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEuserRegistrationSessionDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEuserRegistrationSessionDo
	Joins(fields ...field.RelationField) IQeyKryWEuserRegistrationSessionDo
	Preload(fields ...field.RelationField) IQeyKryWEuserRegistrationSessionDo
	FirstOrInit() (*model.QeyKryWEuserRegistrationSession, error)
	FirstOrCreate() (*model.QeyKryWEuserRegistrationSession, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEuserRegistrationSession, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEuserRegistrationSessionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEuserRegistrationSessionDo) Debug() IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEuserRegistrationSessionDo) WithContext(ctx context.Context) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEuserRegistrationSessionDo) ReadDB() IQeyKryWEuserRegistrationSessionDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEuserRegistrationSessionDo) WriteDB() IQeyKryWEuserRegistrationSessionDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEuserRegistrationSessionDo) Session(config *gorm.Session) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEuserRegistrationSessionDo) Clauses(conds ...clause.Expression) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Returning(value interface{}, columns ...string) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEuserRegistrationSessionDo) Not(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Or(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Select(conds ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Where(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Order(conds ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Distinct(cols ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEuserRegistrationSessionDo) Omit(cols ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEuserRegistrationSessionDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEuserRegistrationSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEuserRegistrationSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEuserRegistrationSessionDo) Group(cols ...field.Expr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEuserRegistrationSessionDo) Having(conds ...gen.Condition) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEuserRegistrationSessionDo) Limit(limit int) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEuserRegistrationSessionDo) Offset(offset int) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEuserRegistrationSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEuserRegistrationSessionDo) Unscoped() IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEuserRegistrationSessionDo) Create(values ...*model.QeyKryWEuserRegistrationSession) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEuserRegistrationSessionDo) CreateInBatches(values []*model.QeyKryWEuserRegistrationSession, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEuserRegistrationSessionDo) Save(values ...*model.QeyKryWEuserRegistrationSession) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEuserRegistrationSessionDo) First() (*model.QeyKryWEuserRegistrationSession, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuserRegistrationSession), nil
	}
}

func (q qeyKryWEuserRegistrationSessionDo) Take() (*model.QeyKryWEuserRegistrationSession, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuserRegistrationSession), nil
	}
}

func (q qeyKryWEuserRegistrationSessionDo) Last() (*model.QeyKryWEuserRegistrationSession, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuserRegistrationSession), nil
	}
}

func (q qeyKryWEuserRegistrationSessionDo) Find() ([]*model.QeyKryWEuserRegistrationSession, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEuserRegistrationSession), err
}

func (q qeyKryWEuserRegistrationSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEuserRegistrationSession, err error) {
	buf := make([]*model.QeyKryWEuserRegistrationSession, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEuserRegistrationSessionDo) FindInBatches(result *[]*model.QeyKryWEuserRegistrationSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEuserRegistrationSessionDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEuserRegistrationSessionDo) Assign(attrs ...field.AssignExpr) IQeyKryWEuserRegistrationSessionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEuserRegistrationSessionDo) Joins(fields ...field.RelationField) IQeyKryWEuserRegistrationSessionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEuserRegistrationSessionDo) Preload(fields ...field.RelationField) IQeyKryWEuserRegistrationSessionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEuserRegistrationSessionDo) FirstOrInit() (*model.QeyKryWEuserRegistrationSession, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuserRegistrationSession), nil
	}
}

func (q qeyKryWEuserRegistrationSessionDo) FirstOrCreate() (*model.QeyKryWEuserRegistrationSession, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEuserRegistrationSession), nil
	}
}

func (q qeyKryWEuserRegistrationSessionDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEuserRegistrationSession, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEuserRegistrationSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEuserRegistrationSessionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEuserRegistrationSessionDo) Delete(models ...*model.QeyKryWEuserRegistrationSession) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEuserRegistrationSessionDo) withDO(do gen.Dao) *qeyKryWEuserRegistrationSessionDo {
	q.DO = *do.(*gen.DO)
	return q
}
