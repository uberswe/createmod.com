// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwpacLikeSystem(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwpacLikeSystem {
	_qeyKryWEwpacLikeSystem := qeyKryWEwpacLikeSystem{}

	_qeyKryWEwpacLikeSystem.qeyKryWEwpacLikeSystemDo.UseDB(db, opts...)
	_qeyKryWEwpacLikeSystem.qeyKryWEwpacLikeSystemDo.UseModel(&model.QeyKryWEwpacLikeSystem{})

	tableName := _qeyKryWEwpacLikeSystem.qeyKryWEwpacLikeSystemDo.TableName()
	_qeyKryWEwpacLikeSystem.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwpacLikeSystem.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwpacLikeSystem.UserID = field.NewInt32(tableName, "user_id")
	_qeyKryWEwpacLikeSystem.PostID = field.NewInt32(tableName, "post_id")
	_qeyKryWEwpacLikeSystem.LikeCount = field.NewInt32(tableName, "like_count")
	_qeyKryWEwpacLikeSystem.DislikeCount = field.NewInt32(tableName, "dislike_count")
	_qeyKryWEwpacLikeSystem.CookieID = field.NewInt32(tableName, "cookie_id")
	_qeyKryWEwpacLikeSystem.UserIP = field.NewString(tableName, "user_ip")
	_qeyKryWEwpacLikeSystem.Time = field.NewTime(tableName, "time")

	_qeyKryWEwpacLikeSystem.fillFieldMap()

	return _qeyKryWEwpacLikeSystem
}

type qeyKryWEwpacLikeSystem struct {
	qeyKryWEwpacLikeSystemDo

	ALL          field.Asterisk
	ID           field.Int32
	UserID       field.Int32
	PostID       field.Int32
	LikeCount    field.Int32
	DislikeCount field.Int32
	CookieID     field.Int32
	UserIP       field.String
	Time         field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwpacLikeSystem) Table(newTableName string) *qeyKryWEwpacLikeSystem {
	q.qeyKryWEwpacLikeSystemDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwpacLikeSystem) As(alias string) *qeyKryWEwpacLikeSystem {
	q.qeyKryWEwpacLikeSystemDo.DO = *(q.qeyKryWEwpacLikeSystemDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwpacLikeSystem) updateTableName(table string) *qeyKryWEwpacLikeSystem {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.UserID = field.NewInt32(table, "user_id")
	q.PostID = field.NewInt32(table, "post_id")
	q.LikeCount = field.NewInt32(table, "like_count")
	q.DislikeCount = field.NewInt32(table, "dislike_count")
	q.CookieID = field.NewInt32(table, "cookie_id")
	q.UserIP = field.NewString(table, "user_ip")
	q.Time = field.NewTime(table, "time")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwpacLikeSystem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwpacLikeSystem) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 8)
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["like_count"] = q.LikeCount
	q.fieldMap["dislike_count"] = q.DislikeCount
	q.fieldMap["cookie_id"] = q.CookieID
	q.fieldMap["user_ip"] = q.UserIP
	q.fieldMap["time"] = q.Time
}

func (q qeyKryWEwpacLikeSystem) clone(db *gorm.DB) qeyKryWEwpacLikeSystem {
	q.qeyKryWEwpacLikeSystemDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwpacLikeSystem) replaceDB(db *gorm.DB) qeyKryWEwpacLikeSystem {
	q.qeyKryWEwpacLikeSystemDo.ReplaceDB(db)
	return q
}

type qeyKryWEwpacLikeSystemDo struct{ gen.DO }

type IQeyKryWEwpacLikeSystemDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwpacLikeSystemDo
	WithContext(ctx context.Context) IQeyKryWEwpacLikeSystemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwpacLikeSystemDo
	WriteDB() IQeyKryWEwpacLikeSystemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwpacLikeSystemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwpacLikeSystemDo
	Not(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo
	Or(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo
	Select(conds ...field.Expr) IQeyKryWEwpacLikeSystemDo
	Where(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo
	Order(conds ...field.Expr) IQeyKryWEwpacLikeSystemDo
	Distinct(cols ...field.Expr) IQeyKryWEwpacLikeSystemDo
	Omit(cols ...field.Expr) IQeyKryWEwpacLikeSystemDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacLikeSystemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacLikeSystemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacLikeSystemDo
	Group(cols ...field.Expr) IQeyKryWEwpacLikeSystemDo
	Having(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo
	Limit(limit int) IQeyKryWEwpacLikeSystemDo
	Offset(offset int) IQeyKryWEwpacLikeSystemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpacLikeSystemDo
	Unscoped() IQeyKryWEwpacLikeSystemDo
	Create(values ...*model.QeyKryWEwpacLikeSystem) error
	CreateInBatches(values []*model.QeyKryWEwpacLikeSystem, batchSize int) error
	Save(values ...*model.QeyKryWEwpacLikeSystem) error
	First() (*model.QeyKryWEwpacLikeSystem, error)
	Take() (*model.QeyKryWEwpacLikeSystem, error)
	Last() (*model.QeyKryWEwpacLikeSystem, error)
	Find() ([]*model.QeyKryWEwpacLikeSystem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpacLikeSystem, err error)
	FindInBatches(result *[]*model.QeyKryWEwpacLikeSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwpacLikeSystem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwpacLikeSystemDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwpacLikeSystemDo
	Joins(fields ...field.RelationField) IQeyKryWEwpacLikeSystemDo
	Preload(fields ...field.RelationField) IQeyKryWEwpacLikeSystemDo
	FirstOrInit() (*model.QeyKryWEwpacLikeSystem, error)
	FirstOrCreate() (*model.QeyKryWEwpacLikeSystem, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwpacLikeSystem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwpacLikeSystemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwpacLikeSystemDo) Debug() IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwpacLikeSystemDo) WithContext(ctx context.Context) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwpacLikeSystemDo) ReadDB() IQeyKryWEwpacLikeSystemDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwpacLikeSystemDo) WriteDB() IQeyKryWEwpacLikeSystemDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwpacLikeSystemDo) Session(config *gorm.Session) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwpacLikeSystemDo) Clauses(conds ...clause.Expression) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Returning(value interface{}, columns ...string) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwpacLikeSystemDo) Not(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Or(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Select(conds ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Where(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Order(conds ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Distinct(cols ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwpacLikeSystemDo) Omit(cols ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwpacLikeSystemDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwpacLikeSystemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwpacLikeSystemDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwpacLikeSystemDo) Group(cols ...field.Expr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwpacLikeSystemDo) Having(conds ...gen.Condition) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwpacLikeSystemDo) Limit(limit int) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwpacLikeSystemDo) Offset(offset int) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwpacLikeSystemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwpacLikeSystemDo) Unscoped() IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwpacLikeSystemDo) Create(values ...*model.QeyKryWEwpacLikeSystem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwpacLikeSystemDo) CreateInBatches(values []*model.QeyKryWEwpacLikeSystem, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwpacLikeSystemDo) Save(values ...*model.QeyKryWEwpacLikeSystem) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwpacLikeSystemDo) First() (*model.QeyKryWEwpacLikeSystem, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacLikeSystem), nil
	}
}

func (q qeyKryWEwpacLikeSystemDo) Take() (*model.QeyKryWEwpacLikeSystem, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacLikeSystem), nil
	}
}

func (q qeyKryWEwpacLikeSystemDo) Last() (*model.QeyKryWEwpacLikeSystem, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacLikeSystem), nil
	}
}

func (q qeyKryWEwpacLikeSystemDo) Find() ([]*model.QeyKryWEwpacLikeSystem, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwpacLikeSystem), err
}

func (q qeyKryWEwpacLikeSystemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwpacLikeSystem, err error) {
	buf := make([]*model.QeyKryWEwpacLikeSystem, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwpacLikeSystemDo) FindInBatches(result *[]*model.QeyKryWEwpacLikeSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwpacLikeSystemDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwpacLikeSystemDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwpacLikeSystemDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwpacLikeSystemDo) Joins(fields ...field.RelationField) IQeyKryWEwpacLikeSystemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwpacLikeSystemDo) Preload(fields ...field.RelationField) IQeyKryWEwpacLikeSystemDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwpacLikeSystemDo) FirstOrInit() (*model.QeyKryWEwpacLikeSystem, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacLikeSystem), nil
	}
}

func (q qeyKryWEwpacLikeSystemDo) FirstOrCreate() (*model.QeyKryWEwpacLikeSystem, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwpacLikeSystem), nil
	}
}

func (q qeyKryWEwpacLikeSystemDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwpacLikeSystem, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwpacLikeSystemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwpacLikeSystemDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwpacLikeSystemDo) Delete(models ...*model.QeyKryWEwpacLikeSystem) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwpacLikeSystemDo) withDO(do gen.Dao) *qeyKryWEwpacLikeSystemDo {
	q.DO = *do.(*gen.DO)
	return q
}
