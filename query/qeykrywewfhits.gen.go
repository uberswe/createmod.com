// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfhit(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfhit {
	_qeyKryWEwfhit := qeyKryWEwfhit{}

	_qeyKryWEwfhit.qeyKryWEwfhitDo.UseDB(db, opts...)
	_qeyKryWEwfhit.qeyKryWEwfhitDo.UseModel(&model.QeyKryWEwfhit{})

	tableName := _qeyKryWEwfhit.qeyKryWEwfhitDo.TableName()
	_qeyKryWEwfhit.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfhit.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfhit.AttackLogTime = field.NewFloat64(tableName, "attackLogTime")
	_qeyKryWEwfhit.Ctime = field.NewFloat64(tableName, "ctime")
	_qeyKryWEwfhit.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwfhit.JsRun = field.NewInt32(tableName, "jsRun")
	_qeyKryWEwfhit.StatusCode = field.NewInt32(tableName, "statusCode")
	_qeyKryWEwfhit.IsGoogle = field.NewInt32(tableName, "isGoogle")
	_qeyKryWEwfhit.UserID = field.NewInt32(tableName, "userID")
	_qeyKryWEwfhit.NewVisit = field.NewInt32(tableName, "newVisit")
	_qeyKryWEwfhit.URL = field.NewString(tableName, "URL")
	_qeyKryWEwfhit.Referer = field.NewString(tableName, "referer")
	_qeyKryWEwfhit.UA = field.NewString(tableName, "UA")
	_qeyKryWEwfhit.Action = field.NewString(tableName, "action")
	_qeyKryWEwfhit.ActionDescription = field.NewString(tableName, "actionDescription")
	_qeyKryWEwfhit.ActionData = field.NewString(tableName, "actionData")

	_qeyKryWEwfhit.fillFieldMap()

	return _qeyKryWEwfhit
}

type qeyKryWEwfhit struct {
	qeyKryWEwfhitDo

	ALL               field.Asterisk
	ID                field.Int32
	AttackLogTime     field.Float64
	Ctime             field.Float64
	IP                field.Bytes
	JsRun             field.Int32
	StatusCode        field.Int32
	IsGoogle          field.Int32
	UserID            field.Int32
	NewVisit          field.Int32
	URL               field.String
	Referer           field.String
	UA                field.String
	Action            field.String
	ActionDescription field.String
	ActionData        field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfhit) Table(newTableName string) *qeyKryWEwfhit {
	q.qeyKryWEwfhitDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfhit) As(alias string) *qeyKryWEwfhit {
	q.qeyKryWEwfhitDo.DO = *(q.qeyKryWEwfhitDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfhit) updateTableName(table string) *qeyKryWEwfhit {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.AttackLogTime = field.NewFloat64(table, "attackLogTime")
	q.Ctime = field.NewFloat64(table, "ctime")
	q.IP = field.NewBytes(table, "IP")
	q.JsRun = field.NewInt32(table, "jsRun")
	q.StatusCode = field.NewInt32(table, "statusCode")
	q.IsGoogle = field.NewInt32(table, "isGoogle")
	q.UserID = field.NewInt32(table, "userID")
	q.NewVisit = field.NewInt32(table, "newVisit")
	q.URL = field.NewString(table, "URL")
	q.Referer = field.NewString(table, "referer")
	q.UA = field.NewString(table, "UA")
	q.Action = field.NewString(table, "action")
	q.ActionDescription = field.NewString(table, "actionDescription")
	q.ActionData = field.NewString(table, "actionData")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfhit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfhit) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 15)
	q.fieldMap["id"] = q.ID
	q.fieldMap["attackLogTime"] = q.AttackLogTime
	q.fieldMap["ctime"] = q.Ctime
	q.fieldMap["IP"] = q.IP
	q.fieldMap["jsRun"] = q.JsRun
	q.fieldMap["statusCode"] = q.StatusCode
	q.fieldMap["isGoogle"] = q.IsGoogle
	q.fieldMap["userID"] = q.UserID
	q.fieldMap["newVisit"] = q.NewVisit
	q.fieldMap["URL"] = q.URL
	q.fieldMap["referer"] = q.Referer
	q.fieldMap["UA"] = q.UA
	q.fieldMap["action"] = q.Action
	q.fieldMap["actionDescription"] = q.ActionDescription
	q.fieldMap["actionData"] = q.ActionData
}

func (q qeyKryWEwfhit) clone(db *gorm.DB) qeyKryWEwfhit {
	q.qeyKryWEwfhitDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfhit) replaceDB(db *gorm.DB) qeyKryWEwfhit {
	q.qeyKryWEwfhitDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfhitDo struct{ gen.DO }

type IQeyKryWEwfhitDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfhitDo
	WithContext(ctx context.Context) IQeyKryWEwfhitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfhitDo
	WriteDB() IQeyKryWEwfhitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfhitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfhitDo
	Not(conds ...gen.Condition) IQeyKryWEwfhitDo
	Or(conds ...gen.Condition) IQeyKryWEwfhitDo
	Select(conds ...field.Expr) IQeyKryWEwfhitDo
	Where(conds ...gen.Condition) IQeyKryWEwfhitDo
	Order(conds ...field.Expr) IQeyKryWEwfhitDo
	Distinct(cols ...field.Expr) IQeyKryWEwfhitDo
	Omit(cols ...field.Expr) IQeyKryWEwfhitDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhitDo
	Group(cols ...field.Expr) IQeyKryWEwfhitDo
	Having(conds ...gen.Condition) IQeyKryWEwfhitDo
	Limit(limit int) IQeyKryWEwfhitDo
	Offset(offset int) IQeyKryWEwfhitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfhitDo
	Unscoped() IQeyKryWEwfhitDo
	Create(values ...*model.QeyKryWEwfhit) error
	CreateInBatches(values []*model.QeyKryWEwfhit, batchSize int) error
	Save(values ...*model.QeyKryWEwfhit) error
	First() (*model.QeyKryWEwfhit, error)
	Take() (*model.QeyKryWEwfhit, error)
	Last() (*model.QeyKryWEwfhit, error)
	Find() ([]*model.QeyKryWEwfhit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfhit, err error)
	FindInBatches(result *[]*model.QeyKryWEwfhit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfhit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfhitDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfhitDo
	Joins(fields ...field.RelationField) IQeyKryWEwfhitDo
	Preload(fields ...field.RelationField) IQeyKryWEwfhitDo
	FirstOrInit() (*model.QeyKryWEwfhit, error)
	FirstOrCreate() (*model.QeyKryWEwfhit, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfhit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfhitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfhitDo) Debug() IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfhitDo) WithContext(ctx context.Context) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfhitDo) ReadDB() IQeyKryWEwfhitDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfhitDo) WriteDB() IQeyKryWEwfhitDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfhitDo) Session(config *gorm.Session) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfhitDo) Clauses(conds ...clause.Expression) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfhitDo) Returning(value interface{}, columns ...string) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfhitDo) Not(conds ...gen.Condition) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfhitDo) Or(conds ...gen.Condition) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfhitDo) Select(conds ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfhitDo) Where(conds ...gen.Condition) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfhitDo) Order(conds ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfhitDo) Distinct(cols ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfhitDo) Omit(cols ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfhitDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfhitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfhitDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfhitDo) Group(cols ...field.Expr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfhitDo) Having(conds ...gen.Condition) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfhitDo) Limit(limit int) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfhitDo) Offset(offset int) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfhitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfhitDo) Unscoped() IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfhitDo) Create(values ...*model.QeyKryWEwfhit) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfhitDo) CreateInBatches(values []*model.QeyKryWEwfhit, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfhitDo) Save(values ...*model.QeyKryWEwfhit) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfhitDo) First() (*model.QeyKryWEwfhit, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhit), nil
	}
}

func (q qeyKryWEwfhitDo) Take() (*model.QeyKryWEwfhit, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhit), nil
	}
}

func (q qeyKryWEwfhitDo) Last() (*model.QeyKryWEwfhit, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhit), nil
	}
}

func (q qeyKryWEwfhitDo) Find() ([]*model.QeyKryWEwfhit, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfhit), err
}

func (q qeyKryWEwfhitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfhit, err error) {
	buf := make([]*model.QeyKryWEwfhit, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfhitDo) FindInBatches(result *[]*model.QeyKryWEwfhit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfhitDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfhitDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfhitDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfhitDo) Joins(fields ...field.RelationField) IQeyKryWEwfhitDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfhitDo) Preload(fields ...field.RelationField) IQeyKryWEwfhitDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfhitDo) FirstOrInit() (*model.QeyKryWEwfhit, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhit), nil
	}
}

func (q qeyKryWEwfhitDo) FirstOrCreate() (*model.QeyKryWEwfhit, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhit), nil
	}
}

func (q qeyKryWEwfhitDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfhit, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfhitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfhitDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfhitDo) Delete(models ...*model.QeyKryWEwfhit) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfhitDo) withDO(do gen.Dao) *qeyKryWEwfhitDo {
	q.DO = *do.(*gen.DO)
	return q
}
