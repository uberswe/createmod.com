// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWElikeDislikeBtnDetail(db *gorm.DB, opts ...gen.DOOption) qeyKryWElikeDislikeBtnDetail {
	_qeyKryWElikeDislikeBtnDetail := qeyKryWElikeDislikeBtnDetail{}

	_qeyKryWElikeDislikeBtnDetail.qeyKryWElikeDislikeBtnDetailDo.UseDB(db, opts...)
	_qeyKryWElikeDislikeBtnDetail.qeyKryWElikeDislikeBtnDetailDo.UseModel(&model.QeyKryWElikeDislikeBtnDetail{})

	tableName := _qeyKryWElikeDislikeBtnDetail.qeyKryWElikeDislikeBtnDetailDo.TableName()
	_qeyKryWElikeDislikeBtnDetail.ALL = field.NewAsterisk(tableName)
	_qeyKryWElikeDislikeBtnDetail.ID = field.NewInt32(tableName, "id")
	_qeyKryWElikeDislikeBtnDetail.BtnContainer = field.NewString(tableName, "btn_container")
	_qeyKryWElikeDislikeBtnDetail.LikeDislikeType = field.NewString(tableName, "likeDislikeType")
	_qeyKryWElikeDislikeBtnDetail.ShowOneHome = field.NewString(tableName, "show_one_home")
	_qeyKryWElikeDislikeBtnDetail.OnPages = field.NewString(tableName, "on_pages")
	_qeyKryWElikeDislikeBtnDetail.OnProductPage = field.NewString(tableName, "on_product_page")
	_qeyKryWElikeDislikeBtnDetail.OnshowShare = field.NewString(tableName, "onshowShare")

	_qeyKryWElikeDislikeBtnDetail.fillFieldMap()

	return _qeyKryWElikeDislikeBtnDetail
}

type qeyKryWElikeDislikeBtnDetail struct {
	qeyKryWElikeDislikeBtnDetailDo

	ALL             field.Asterisk
	ID              field.Int32
	BtnContainer    field.String
	LikeDislikeType field.String
	ShowOneHome     field.String
	OnPages         field.String
	OnProductPage   field.String
	OnshowShare     field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWElikeDislikeBtnDetail) Table(newTableName string) *qeyKryWElikeDislikeBtnDetail {
	q.qeyKryWElikeDislikeBtnDetailDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWElikeDislikeBtnDetail) As(alias string) *qeyKryWElikeDislikeBtnDetail {
	q.qeyKryWElikeDislikeBtnDetailDo.DO = *(q.qeyKryWElikeDislikeBtnDetailDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWElikeDislikeBtnDetail) updateTableName(table string) *qeyKryWElikeDislikeBtnDetail {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.BtnContainer = field.NewString(table, "btn_container")
	q.LikeDislikeType = field.NewString(table, "likeDislikeType")
	q.ShowOneHome = field.NewString(table, "show_one_home")
	q.OnPages = field.NewString(table, "on_pages")
	q.OnProductPage = field.NewString(table, "on_product_page")
	q.OnshowShare = field.NewString(table, "onshowShare")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWElikeDislikeBtnDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWElikeDislikeBtnDetail) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["btn_container"] = q.BtnContainer
	q.fieldMap["likeDislikeType"] = q.LikeDislikeType
	q.fieldMap["show_one_home"] = q.ShowOneHome
	q.fieldMap["on_pages"] = q.OnPages
	q.fieldMap["on_product_page"] = q.OnProductPage
	q.fieldMap["onshowShare"] = q.OnshowShare
}

func (q qeyKryWElikeDislikeBtnDetail) clone(db *gorm.DB) qeyKryWElikeDislikeBtnDetail {
	q.qeyKryWElikeDislikeBtnDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWElikeDislikeBtnDetail) replaceDB(db *gorm.DB) qeyKryWElikeDislikeBtnDetail {
	q.qeyKryWElikeDislikeBtnDetailDo.ReplaceDB(db)
	return q
}

type qeyKryWElikeDislikeBtnDetailDo struct{ gen.DO }

type IQeyKryWElikeDislikeBtnDetailDo interface {
	gen.SubQuery
	Debug() IQeyKryWElikeDislikeBtnDetailDo
	WithContext(ctx context.Context) IQeyKryWElikeDislikeBtnDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWElikeDislikeBtnDetailDo
	WriteDB() IQeyKryWElikeDislikeBtnDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWElikeDislikeBtnDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWElikeDislikeBtnDetailDo
	Not(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo
	Or(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo
	Select(conds ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	Where(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo
	Order(conds ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	Distinct(cols ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	Omit(cols ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	Group(cols ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo
	Having(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo
	Limit(limit int) IQeyKryWElikeDislikeBtnDetailDo
	Offset(offset int) IQeyKryWElikeDislikeBtnDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWElikeDislikeBtnDetailDo
	Unscoped() IQeyKryWElikeDislikeBtnDetailDo
	Create(values ...*model.QeyKryWElikeDislikeBtnDetail) error
	CreateInBatches(values []*model.QeyKryWElikeDislikeBtnDetail, batchSize int) error
	Save(values ...*model.QeyKryWElikeDislikeBtnDetail) error
	First() (*model.QeyKryWElikeDislikeBtnDetail, error)
	Take() (*model.QeyKryWElikeDislikeBtnDetail, error)
	Last() (*model.QeyKryWElikeDislikeBtnDetail, error)
	Find() ([]*model.QeyKryWElikeDislikeBtnDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWElikeDislikeBtnDetail, err error)
	FindInBatches(result *[]*model.QeyKryWElikeDislikeBtnDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWElikeDislikeBtnDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWElikeDislikeBtnDetailDo
	Assign(attrs ...field.AssignExpr) IQeyKryWElikeDislikeBtnDetailDo
	Joins(fields ...field.RelationField) IQeyKryWElikeDislikeBtnDetailDo
	Preload(fields ...field.RelationField) IQeyKryWElikeDislikeBtnDetailDo
	FirstOrInit() (*model.QeyKryWElikeDislikeBtnDetail, error)
	FirstOrCreate() (*model.QeyKryWElikeDislikeBtnDetail, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWElikeDislikeBtnDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWElikeDislikeBtnDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWElikeDislikeBtnDetailDo) Debug() IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWElikeDislikeBtnDetailDo) WithContext(ctx context.Context) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWElikeDislikeBtnDetailDo) ReadDB() IQeyKryWElikeDislikeBtnDetailDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWElikeDislikeBtnDetailDo) WriteDB() IQeyKryWElikeDislikeBtnDetailDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWElikeDislikeBtnDetailDo) Session(config *gorm.Session) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Clauses(conds ...clause.Expression) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Returning(value interface{}, columns ...string) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Not(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Or(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Select(conds ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Where(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Order(conds ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Distinct(cols ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Omit(cols ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Group(cols ...field.Expr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Having(conds ...gen.Condition) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Limit(limit int) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Offset(offset int) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Unscoped() IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWElikeDislikeBtnDetailDo) Create(values ...*model.QeyKryWElikeDislikeBtnDetail) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWElikeDislikeBtnDetailDo) CreateInBatches(values []*model.QeyKryWElikeDislikeBtnDetail, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWElikeDislikeBtnDetailDo) Save(values ...*model.QeyKryWElikeDislikeBtnDetail) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWElikeDislikeBtnDetailDo) First() (*model.QeyKryWElikeDislikeBtnDetail, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElikeDislikeBtnDetail), nil
	}
}

func (q qeyKryWElikeDislikeBtnDetailDo) Take() (*model.QeyKryWElikeDislikeBtnDetail, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElikeDislikeBtnDetail), nil
	}
}

func (q qeyKryWElikeDislikeBtnDetailDo) Last() (*model.QeyKryWElikeDislikeBtnDetail, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElikeDislikeBtnDetail), nil
	}
}

func (q qeyKryWElikeDislikeBtnDetailDo) Find() ([]*model.QeyKryWElikeDislikeBtnDetail, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWElikeDislikeBtnDetail), err
}

func (q qeyKryWElikeDislikeBtnDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWElikeDislikeBtnDetail, err error) {
	buf := make([]*model.QeyKryWElikeDislikeBtnDetail, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWElikeDislikeBtnDetailDo) FindInBatches(result *[]*model.QeyKryWElikeDislikeBtnDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWElikeDislikeBtnDetailDo) Attrs(attrs ...field.AssignExpr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Assign(attrs ...field.AssignExpr) IQeyKryWElikeDislikeBtnDetailDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWElikeDislikeBtnDetailDo) Joins(fields ...field.RelationField) IQeyKryWElikeDislikeBtnDetailDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWElikeDislikeBtnDetailDo) Preload(fields ...field.RelationField) IQeyKryWElikeDislikeBtnDetailDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWElikeDislikeBtnDetailDo) FirstOrInit() (*model.QeyKryWElikeDislikeBtnDetail, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElikeDislikeBtnDetail), nil
	}
}

func (q qeyKryWElikeDislikeBtnDetailDo) FirstOrCreate() (*model.QeyKryWElikeDislikeBtnDetail, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElikeDislikeBtnDetail), nil
	}
}

func (q qeyKryWElikeDislikeBtnDetailDo) FindByPage(offset int, limit int) (result []*model.QeyKryWElikeDislikeBtnDetail, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWElikeDislikeBtnDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWElikeDislikeBtnDetailDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWElikeDislikeBtnDetailDo) Delete(models ...*model.QeyKryWElikeDislikeBtnDetail) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWElikeDislikeBtnDetailDo) withDO(do gen.Dao) *qeyKryWElikeDislikeBtnDetailDo {
	q.DO = *do.(*gen.DO)
	return q
}
