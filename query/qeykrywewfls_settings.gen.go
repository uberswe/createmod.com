// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwflsSetting(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwflsSetting {
	_qeyKryWEwflsSetting := qeyKryWEwflsSetting{}

	_qeyKryWEwflsSetting.qeyKryWEwflsSettingDo.UseDB(db, opts...)
	_qeyKryWEwflsSetting.qeyKryWEwflsSettingDo.UseModel(&model.QeyKryWEwflsSetting{})

	tableName := _qeyKryWEwflsSetting.qeyKryWEwflsSettingDo.TableName()
	_qeyKryWEwflsSetting.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwflsSetting.Name = field.NewString(tableName, "name")
	_qeyKryWEwflsSetting.Value = field.NewBytes(tableName, "value")
	_qeyKryWEwflsSetting.Autoload = field.NewString(tableName, "autoload")

	_qeyKryWEwflsSetting.fillFieldMap()

	return _qeyKryWEwflsSetting
}

type qeyKryWEwflsSetting struct {
	qeyKryWEwflsSettingDo

	ALL      field.Asterisk
	Name     field.String
	Value    field.Bytes
	Autoload field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwflsSetting) Table(newTableName string) *qeyKryWEwflsSetting {
	q.qeyKryWEwflsSettingDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwflsSetting) As(alias string) *qeyKryWEwflsSetting {
	q.qeyKryWEwflsSettingDo.DO = *(q.qeyKryWEwflsSettingDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwflsSetting) updateTableName(table string) *qeyKryWEwflsSetting {
	q.ALL = field.NewAsterisk(table)
	q.Name = field.NewString(table, "name")
	q.Value = field.NewBytes(table, "value")
	q.Autoload = field.NewString(table, "autoload")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwflsSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwflsSetting) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["name"] = q.Name
	q.fieldMap["value"] = q.Value
	q.fieldMap["autoload"] = q.Autoload
}

func (q qeyKryWEwflsSetting) clone(db *gorm.DB) qeyKryWEwflsSetting {
	q.qeyKryWEwflsSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwflsSetting) replaceDB(db *gorm.DB) qeyKryWEwflsSetting {
	q.qeyKryWEwflsSettingDo.ReplaceDB(db)
	return q
}

type qeyKryWEwflsSettingDo struct{ gen.DO }

type IQeyKryWEwflsSettingDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwflsSettingDo
	WithContext(ctx context.Context) IQeyKryWEwflsSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwflsSettingDo
	WriteDB() IQeyKryWEwflsSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwflsSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwflsSettingDo
	Not(conds ...gen.Condition) IQeyKryWEwflsSettingDo
	Or(conds ...gen.Condition) IQeyKryWEwflsSettingDo
	Select(conds ...field.Expr) IQeyKryWEwflsSettingDo
	Where(conds ...gen.Condition) IQeyKryWEwflsSettingDo
	Order(conds ...field.Expr) IQeyKryWEwflsSettingDo
	Distinct(cols ...field.Expr) IQeyKryWEwflsSettingDo
	Omit(cols ...field.Expr) IQeyKryWEwflsSettingDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsSettingDo
	Group(cols ...field.Expr) IQeyKryWEwflsSettingDo
	Having(conds ...gen.Condition) IQeyKryWEwflsSettingDo
	Limit(limit int) IQeyKryWEwflsSettingDo
	Offset(offset int) IQeyKryWEwflsSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflsSettingDo
	Unscoped() IQeyKryWEwflsSettingDo
	Create(values ...*model.QeyKryWEwflsSetting) error
	CreateInBatches(values []*model.QeyKryWEwflsSetting, batchSize int) error
	Save(values ...*model.QeyKryWEwflsSetting) error
	First() (*model.QeyKryWEwflsSetting, error)
	Take() (*model.QeyKryWEwflsSetting, error)
	Last() (*model.QeyKryWEwflsSetting, error)
	Find() ([]*model.QeyKryWEwflsSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwflsSetting, err error)
	FindInBatches(result *[]*model.QeyKryWEwflsSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwflsSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwflsSettingDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwflsSettingDo
	Joins(fields ...field.RelationField) IQeyKryWEwflsSettingDo
	Preload(fields ...field.RelationField) IQeyKryWEwflsSettingDo
	FirstOrInit() (*model.QeyKryWEwflsSetting, error)
	FirstOrCreate() (*model.QeyKryWEwflsSetting, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwflsSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwflsSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwflsSettingDo) Debug() IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwflsSettingDo) WithContext(ctx context.Context) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwflsSettingDo) ReadDB() IQeyKryWEwflsSettingDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwflsSettingDo) WriteDB() IQeyKryWEwflsSettingDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwflsSettingDo) Session(config *gorm.Session) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwflsSettingDo) Clauses(conds ...clause.Expression) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwflsSettingDo) Returning(value interface{}, columns ...string) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwflsSettingDo) Not(conds ...gen.Condition) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwflsSettingDo) Or(conds ...gen.Condition) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwflsSettingDo) Select(conds ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwflsSettingDo) Where(conds ...gen.Condition) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwflsSettingDo) Order(conds ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwflsSettingDo) Distinct(cols ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwflsSettingDo) Omit(cols ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwflsSettingDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwflsSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwflsSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwflsSettingDo) Group(cols ...field.Expr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwflsSettingDo) Having(conds ...gen.Condition) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwflsSettingDo) Limit(limit int) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwflsSettingDo) Offset(offset int) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwflsSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwflsSettingDo) Unscoped() IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwflsSettingDo) Create(values ...*model.QeyKryWEwflsSetting) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwflsSettingDo) CreateInBatches(values []*model.QeyKryWEwflsSetting, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwflsSettingDo) Save(values ...*model.QeyKryWEwflsSetting) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwflsSettingDo) First() (*model.QeyKryWEwflsSetting, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsSetting), nil
	}
}

func (q qeyKryWEwflsSettingDo) Take() (*model.QeyKryWEwflsSetting, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsSetting), nil
	}
}

func (q qeyKryWEwflsSettingDo) Last() (*model.QeyKryWEwflsSetting, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsSetting), nil
	}
}

func (q qeyKryWEwflsSettingDo) Find() ([]*model.QeyKryWEwflsSetting, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwflsSetting), err
}

func (q qeyKryWEwflsSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwflsSetting, err error) {
	buf := make([]*model.QeyKryWEwflsSetting, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwflsSettingDo) FindInBatches(result *[]*model.QeyKryWEwflsSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwflsSettingDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwflsSettingDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwflsSettingDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwflsSettingDo) Joins(fields ...field.RelationField) IQeyKryWEwflsSettingDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwflsSettingDo) Preload(fields ...field.RelationField) IQeyKryWEwflsSettingDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwflsSettingDo) FirstOrInit() (*model.QeyKryWEwflsSetting, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsSetting), nil
	}
}

func (q qeyKryWEwflsSettingDo) FirstOrCreate() (*model.QeyKryWEwflsSetting, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflsSetting), nil
	}
}

func (q qeyKryWEwflsSettingDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwflsSetting, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwflsSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwflsSettingDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwflsSettingDo) Delete(models ...*model.QeyKryWEwflsSetting) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwflsSettingDo) withDO(do gen.Dao) *qeyKryWEwflsSettingDo {
	q.DO = *do.(*gen.DO)
	return q
}
