// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfblockediplog(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfblockediplog {
	_qeyKryWEwfblockediplog := qeyKryWEwfblockediplog{}

	_qeyKryWEwfblockediplog.qeyKryWEwfblockediplogDo.UseDB(db, opts...)
	_qeyKryWEwfblockediplog.qeyKryWEwfblockediplogDo.UseModel(&model.QeyKryWEwfblockediplog{})

	tableName := _qeyKryWEwfblockediplog.qeyKryWEwfblockediplogDo.TableName()
	_qeyKryWEwfblockediplog.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfblockediplog.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwfblockediplog.CountryCode = field.NewString(tableName, "countryCode")
	_qeyKryWEwfblockediplog.BlockCount = field.NewInt32(tableName, "blockCount")
	_qeyKryWEwfblockediplog.Unixday = field.NewInt32(tableName, "unixday")
	_qeyKryWEwfblockediplog.BlockType = field.NewString(tableName, "blockType")

	_qeyKryWEwfblockediplog.fillFieldMap()

	return _qeyKryWEwfblockediplog
}

type qeyKryWEwfblockediplog struct {
	qeyKryWEwfblockediplogDo

	ALL         field.Asterisk
	IP          field.Bytes
	CountryCode field.String
	BlockCount  field.Int32
	Unixday     field.Int32
	BlockType   field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfblockediplog) Table(newTableName string) *qeyKryWEwfblockediplog {
	q.qeyKryWEwfblockediplogDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfblockediplog) As(alias string) *qeyKryWEwfblockediplog {
	q.qeyKryWEwfblockediplogDo.DO = *(q.qeyKryWEwfblockediplogDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfblockediplog) updateTableName(table string) *qeyKryWEwfblockediplog {
	q.ALL = field.NewAsterisk(table)
	q.IP = field.NewBytes(table, "IP")
	q.CountryCode = field.NewString(table, "countryCode")
	q.BlockCount = field.NewInt32(table, "blockCount")
	q.Unixday = field.NewInt32(table, "unixday")
	q.BlockType = field.NewString(table, "blockType")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfblockediplog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfblockediplog) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["IP"] = q.IP
	q.fieldMap["countryCode"] = q.CountryCode
	q.fieldMap["blockCount"] = q.BlockCount
	q.fieldMap["unixday"] = q.Unixday
	q.fieldMap["blockType"] = q.BlockType
}

func (q qeyKryWEwfblockediplog) clone(db *gorm.DB) qeyKryWEwfblockediplog {
	q.qeyKryWEwfblockediplogDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfblockediplog) replaceDB(db *gorm.DB) qeyKryWEwfblockediplog {
	q.qeyKryWEwfblockediplogDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfblockediplogDo struct{ gen.DO }

type IQeyKryWEwfblockediplogDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfblockediplogDo
	WithContext(ctx context.Context) IQeyKryWEwfblockediplogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfblockediplogDo
	WriteDB() IQeyKryWEwfblockediplogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfblockediplogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfblockediplogDo
	Not(conds ...gen.Condition) IQeyKryWEwfblockediplogDo
	Or(conds ...gen.Condition) IQeyKryWEwfblockediplogDo
	Select(conds ...field.Expr) IQeyKryWEwfblockediplogDo
	Where(conds ...gen.Condition) IQeyKryWEwfblockediplogDo
	Order(conds ...field.Expr) IQeyKryWEwfblockediplogDo
	Distinct(cols ...field.Expr) IQeyKryWEwfblockediplogDo
	Omit(cols ...field.Expr) IQeyKryWEwfblockediplogDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblockediplogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblockediplogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblockediplogDo
	Group(cols ...field.Expr) IQeyKryWEwfblockediplogDo
	Having(conds ...gen.Condition) IQeyKryWEwfblockediplogDo
	Limit(limit int) IQeyKryWEwfblockediplogDo
	Offset(offset int) IQeyKryWEwfblockediplogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfblockediplogDo
	Unscoped() IQeyKryWEwfblockediplogDo
	Create(values ...*model.QeyKryWEwfblockediplog) error
	CreateInBatches(values []*model.QeyKryWEwfblockediplog, batchSize int) error
	Save(values ...*model.QeyKryWEwfblockediplog) error
	First() (*model.QeyKryWEwfblockediplog, error)
	Take() (*model.QeyKryWEwfblockediplog, error)
	Last() (*model.QeyKryWEwfblockediplog, error)
	Find() ([]*model.QeyKryWEwfblockediplog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfblockediplog, err error)
	FindInBatches(result *[]*model.QeyKryWEwfblockediplog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfblockediplog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfblockediplogDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfblockediplogDo
	Joins(fields ...field.RelationField) IQeyKryWEwfblockediplogDo
	Preload(fields ...field.RelationField) IQeyKryWEwfblockediplogDo
	FirstOrInit() (*model.QeyKryWEwfblockediplog, error)
	FirstOrCreate() (*model.QeyKryWEwfblockediplog, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfblockediplog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfblockediplogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfblockediplogDo) Debug() IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfblockediplogDo) WithContext(ctx context.Context) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfblockediplogDo) ReadDB() IQeyKryWEwfblockediplogDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfblockediplogDo) WriteDB() IQeyKryWEwfblockediplogDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfblockediplogDo) Session(config *gorm.Session) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfblockediplogDo) Clauses(conds ...clause.Expression) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfblockediplogDo) Returning(value interface{}, columns ...string) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfblockediplogDo) Not(conds ...gen.Condition) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfblockediplogDo) Or(conds ...gen.Condition) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfblockediplogDo) Select(conds ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfblockediplogDo) Where(conds ...gen.Condition) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfblockediplogDo) Order(conds ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfblockediplogDo) Distinct(cols ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfblockediplogDo) Omit(cols ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfblockediplogDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfblockediplogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfblockediplogDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfblockediplogDo) Group(cols ...field.Expr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfblockediplogDo) Having(conds ...gen.Condition) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfblockediplogDo) Limit(limit int) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfblockediplogDo) Offset(offset int) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfblockediplogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfblockediplogDo) Unscoped() IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfblockediplogDo) Create(values ...*model.QeyKryWEwfblockediplog) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfblockediplogDo) CreateInBatches(values []*model.QeyKryWEwfblockediplog, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfblockediplogDo) Save(values ...*model.QeyKryWEwfblockediplog) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfblockediplogDo) First() (*model.QeyKryWEwfblockediplog, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblockediplog), nil
	}
}

func (q qeyKryWEwfblockediplogDo) Take() (*model.QeyKryWEwfblockediplog, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblockediplog), nil
	}
}

func (q qeyKryWEwfblockediplogDo) Last() (*model.QeyKryWEwfblockediplog, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblockediplog), nil
	}
}

func (q qeyKryWEwfblockediplogDo) Find() ([]*model.QeyKryWEwfblockediplog, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfblockediplog), err
}

func (q qeyKryWEwfblockediplogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfblockediplog, err error) {
	buf := make([]*model.QeyKryWEwfblockediplog, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfblockediplogDo) FindInBatches(result *[]*model.QeyKryWEwfblockediplog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfblockediplogDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfblockediplogDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfblockediplogDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfblockediplogDo) Joins(fields ...field.RelationField) IQeyKryWEwfblockediplogDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfblockediplogDo) Preload(fields ...field.RelationField) IQeyKryWEwfblockediplogDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfblockediplogDo) FirstOrInit() (*model.QeyKryWEwfblockediplog, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblockediplog), nil
	}
}

func (q qeyKryWEwfblockediplogDo) FirstOrCreate() (*model.QeyKryWEwfblockediplog, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfblockediplog), nil
	}
}

func (q qeyKryWEwfblockediplogDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfblockediplog, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfblockediplogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfblockediplogDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfblockediplogDo) Delete(models ...*model.QeyKryWEwfblockediplog) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfblockediplogDo) withDO(do gen.Dao) *qeyKryWEwfblockediplogDo {
	q.DO = *do.(*gen.DO)
	return q
}
