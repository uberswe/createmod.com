// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEtermTaxonomy(db *gorm.DB, opts ...gen.DOOption) qeyKryWEtermTaxonomy {
	_qeyKryWEtermTaxonomy := qeyKryWEtermTaxonomy{}

	_qeyKryWEtermTaxonomy.qeyKryWEtermTaxonomyDo.UseDB(db, opts...)
	_qeyKryWEtermTaxonomy.qeyKryWEtermTaxonomyDo.UseModel(&model.QeyKryWEtermTaxonomy{})

	tableName := _qeyKryWEtermTaxonomy.qeyKryWEtermTaxonomyDo.TableName()
	_qeyKryWEtermTaxonomy.ALL = field.NewAsterisk(tableName)
	_qeyKryWEtermTaxonomy.TermTaxonomyID = field.NewInt64(tableName, "term_taxonomy_id")
	_qeyKryWEtermTaxonomy.TermID = field.NewInt64(tableName, "term_id")
	_qeyKryWEtermTaxonomy.Taxonomy = field.NewString(tableName, "taxonomy")
	_qeyKryWEtermTaxonomy.Description = field.NewString(tableName, "description")
	_qeyKryWEtermTaxonomy.Parent = field.NewInt64(tableName, "parent")
	_qeyKryWEtermTaxonomy.Count_ = field.NewInt64(tableName, "count")

	_qeyKryWEtermTaxonomy.fillFieldMap()

	return _qeyKryWEtermTaxonomy
}

type qeyKryWEtermTaxonomy struct {
	qeyKryWEtermTaxonomyDo

	ALL            field.Asterisk
	TermTaxonomyID field.Int64
	TermID         field.Int64
	Taxonomy       field.String
	Description    field.String
	Parent         field.Int64
	Count_         field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEtermTaxonomy) Table(newTableName string) *qeyKryWEtermTaxonomy {
	q.qeyKryWEtermTaxonomyDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEtermTaxonomy) As(alias string) *qeyKryWEtermTaxonomy {
	q.qeyKryWEtermTaxonomyDo.DO = *(q.qeyKryWEtermTaxonomyDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEtermTaxonomy) updateTableName(table string) *qeyKryWEtermTaxonomy {
	q.ALL = field.NewAsterisk(table)
	q.TermTaxonomyID = field.NewInt64(table, "term_taxonomy_id")
	q.TermID = field.NewInt64(table, "term_id")
	q.Taxonomy = field.NewString(table, "taxonomy")
	q.Description = field.NewString(table, "description")
	q.Parent = field.NewInt64(table, "parent")
	q.Count_ = field.NewInt64(table, "count")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEtermTaxonomy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEtermTaxonomy) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["term_taxonomy_id"] = q.TermTaxonomyID
	q.fieldMap["term_id"] = q.TermID
	q.fieldMap["taxonomy"] = q.Taxonomy
	q.fieldMap["description"] = q.Description
	q.fieldMap["parent"] = q.Parent
	q.fieldMap["count"] = q.Count_
}

func (q qeyKryWEtermTaxonomy) clone(db *gorm.DB) qeyKryWEtermTaxonomy {
	q.qeyKryWEtermTaxonomyDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEtermTaxonomy) replaceDB(db *gorm.DB) qeyKryWEtermTaxonomy {
	q.qeyKryWEtermTaxonomyDo.ReplaceDB(db)
	return q
}

type qeyKryWEtermTaxonomyDo struct{ gen.DO }

type IQeyKryWEtermTaxonomyDo interface {
	gen.SubQuery
	Debug() IQeyKryWEtermTaxonomyDo
	WithContext(ctx context.Context) IQeyKryWEtermTaxonomyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEtermTaxonomyDo
	WriteDB() IQeyKryWEtermTaxonomyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEtermTaxonomyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEtermTaxonomyDo
	Not(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo
	Or(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo
	Select(conds ...field.Expr) IQeyKryWEtermTaxonomyDo
	Where(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo
	Order(conds ...field.Expr) IQeyKryWEtermTaxonomyDo
	Distinct(cols ...field.Expr) IQeyKryWEtermTaxonomyDo
	Omit(cols ...field.Expr) IQeyKryWEtermTaxonomyDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermTaxonomyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermTaxonomyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermTaxonomyDo
	Group(cols ...field.Expr) IQeyKryWEtermTaxonomyDo
	Having(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo
	Limit(limit int) IQeyKryWEtermTaxonomyDo
	Offset(offset int) IQeyKryWEtermTaxonomyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermTaxonomyDo
	Unscoped() IQeyKryWEtermTaxonomyDo
	Create(values ...*model.QeyKryWEtermTaxonomy) error
	CreateInBatches(values []*model.QeyKryWEtermTaxonomy, batchSize int) error
	Save(values ...*model.QeyKryWEtermTaxonomy) error
	First() (*model.QeyKryWEtermTaxonomy, error)
	Take() (*model.QeyKryWEtermTaxonomy, error)
	Last() (*model.QeyKryWEtermTaxonomy, error)
	Find() ([]*model.QeyKryWEtermTaxonomy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEtermTaxonomy, err error)
	FindInBatches(result *[]*model.QeyKryWEtermTaxonomy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEtermTaxonomy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEtermTaxonomyDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEtermTaxonomyDo
	Joins(fields ...field.RelationField) IQeyKryWEtermTaxonomyDo
	Preload(fields ...field.RelationField) IQeyKryWEtermTaxonomyDo
	FirstOrInit() (*model.QeyKryWEtermTaxonomy, error)
	FirstOrCreate() (*model.QeyKryWEtermTaxonomy, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEtermTaxonomy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEtermTaxonomyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEtermTaxonomyDo) Debug() IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEtermTaxonomyDo) WithContext(ctx context.Context) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEtermTaxonomyDo) ReadDB() IQeyKryWEtermTaxonomyDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEtermTaxonomyDo) WriteDB() IQeyKryWEtermTaxonomyDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEtermTaxonomyDo) Session(config *gorm.Session) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEtermTaxonomyDo) Clauses(conds ...clause.Expression) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Returning(value interface{}, columns ...string) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEtermTaxonomyDo) Not(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Or(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Select(conds ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Where(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Order(conds ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Distinct(cols ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEtermTaxonomyDo) Omit(cols ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEtermTaxonomyDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEtermTaxonomyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEtermTaxonomyDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEtermTaxonomyDo) Group(cols ...field.Expr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEtermTaxonomyDo) Having(conds ...gen.Condition) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEtermTaxonomyDo) Limit(limit int) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEtermTaxonomyDo) Offset(offset int) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEtermTaxonomyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEtermTaxonomyDo) Unscoped() IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEtermTaxonomyDo) Create(values ...*model.QeyKryWEtermTaxonomy) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEtermTaxonomyDo) CreateInBatches(values []*model.QeyKryWEtermTaxonomy, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEtermTaxonomyDo) Save(values ...*model.QeyKryWEtermTaxonomy) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEtermTaxonomyDo) First() (*model.QeyKryWEtermTaxonomy, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermTaxonomy), nil
	}
}

func (q qeyKryWEtermTaxonomyDo) Take() (*model.QeyKryWEtermTaxonomy, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermTaxonomy), nil
	}
}

func (q qeyKryWEtermTaxonomyDo) Last() (*model.QeyKryWEtermTaxonomy, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermTaxonomy), nil
	}
}

func (q qeyKryWEtermTaxonomyDo) Find() ([]*model.QeyKryWEtermTaxonomy, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEtermTaxonomy), err
}

func (q qeyKryWEtermTaxonomyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEtermTaxonomy, err error) {
	buf := make([]*model.QeyKryWEtermTaxonomy, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEtermTaxonomyDo) FindInBatches(result *[]*model.QeyKryWEtermTaxonomy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEtermTaxonomyDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEtermTaxonomyDo) Assign(attrs ...field.AssignExpr) IQeyKryWEtermTaxonomyDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEtermTaxonomyDo) Joins(fields ...field.RelationField) IQeyKryWEtermTaxonomyDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEtermTaxonomyDo) Preload(fields ...field.RelationField) IQeyKryWEtermTaxonomyDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEtermTaxonomyDo) FirstOrInit() (*model.QeyKryWEtermTaxonomy, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermTaxonomy), nil
	}
}

func (q qeyKryWEtermTaxonomyDo) FirstOrCreate() (*model.QeyKryWEtermTaxonomy, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermTaxonomy), nil
	}
}

func (q qeyKryWEtermTaxonomyDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEtermTaxonomy, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEtermTaxonomyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEtermTaxonomyDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEtermTaxonomyDo) Delete(models ...*model.QeyKryWEtermTaxonomy) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEtermTaxonomyDo) withDO(do gen.Dao) *qeyKryWEtermTaxonomyDo {
	q.DO = *do.(*gen.DO)
	return q
}
