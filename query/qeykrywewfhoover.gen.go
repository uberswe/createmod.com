// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwfhoover(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwfhoover {
	_qeyKryWEwfhoover := qeyKryWEwfhoover{}

	_qeyKryWEwfhoover.qeyKryWEwfhooverDo.UseDB(db, opts...)
	_qeyKryWEwfhoover.qeyKryWEwfhooverDo.UseModel(&model.QeyKryWEwfhoover{})

	tableName := _qeyKryWEwfhoover.qeyKryWEwfhooverDo.TableName()
	_qeyKryWEwfhoover.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwfhoover.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwfhoover.Owner = field.NewString(tableName, "owner")
	_qeyKryWEwfhoover.Host = field.NewString(tableName, "host")
	_qeyKryWEwfhoover.Path = field.NewString(tableName, "path")
	_qeyKryWEwfhoover.HostKey = field.NewBytes(tableName, "hostKey")

	_qeyKryWEwfhoover.fillFieldMap()

	return _qeyKryWEwfhoover
}

type qeyKryWEwfhoover struct {
	qeyKryWEwfhooverDo

	ALL     field.Asterisk
	ID      field.Int32
	Owner   field.String
	Host    field.String
	Path    field.String
	HostKey field.Bytes

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwfhoover) Table(newTableName string) *qeyKryWEwfhoover {
	q.qeyKryWEwfhooverDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwfhoover) As(alias string) *qeyKryWEwfhoover {
	q.qeyKryWEwfhooverDo.DO = *(q.qeyKryWEwfhooverDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwfhoover) updateTableName(table string) *qeyKryWEwfhoover {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Owner = field.NewString(table, "owner")
	q.Host = field.NewString(table, "host")
	q.Path = field.NewString(table, "path")
	q.HostKey = field.NewBytes(table, "hostKey")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwfhoover) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwfhoover) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["id"] = q.ID
	q.fieldMap["owner"] = q.Owner
	q.fieldMap["host"] = q.Host
	q.fieldMap["path"] = q.Path
	q.fieldMap["hostKey"] = q.HostKey
}

func (q qeyKryWEwfhoover) clone(db *gorm.DB) qeyKryWEwfhoover {
	q.qeyKryWEwfhooverDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwfhoover) replaceDB(db *gorm.DB) qeyKryWEwfhoover {
	q.qeyKryWEwfhooverDo.ReplaceDB(db)
	return q
}

type qeyKryWEwfhooverDo struct{ gen.DO }

type IQeyKryWEwfhooverDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwfhooverDo
	WithContext(ctx context.Context) IQeyKryWEwfhooverDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwfhooverDo
	WriteDB() IQeyKryWEwfhooverDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwfhooverDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwfhooverDo
	Not(conds ...gen.Condition) IQeyKryWEwfhooverDo
	Or(conds ...gen.Condition) IQeyKryWEwfhooverDo
	Select(conds ...field.Expr) IQeyKryWEwfhooverDo
	Where(conds ...gen.Condition) IQeyKryWEwfhooverDo
	Order(conds ...field.Expr) IQeyKryWEwfhooverDo
	Distinct(cols ...field.Expr) IQeyKryWEwfhooverDo
	Omit(cols ...field.Expr) IQeyKryWEwfhooverDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhooverDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhooverDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhooverDo
	Group(cols ...field.Expr) IQeyKryWEwfhooverDo
	Having(conds ...gen.Condition) IQeyKryWEwfhooverDo
	Limit(limit int) IQeyKryWEwfhooverDo
	Offset(offset int) IQeyKryWEwfhooverDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfhooverDo
	Unscoped() IQeyKryWEwfhooverDo
	Create(values ...*model.QeyKryWEwfhoover) error
	CreateInBatches(values []*model.QeyKryWEwfhoover, batchSize int) error
	Save(values ...*model.QeyKryWEwfhoover) error
	First() (*model.QeyKryWEwfhoover, error)
	Take() (*model.QeyKryWEwfhoover, error)
	Last() (*model.QeyKryWEwfhoover, error)
	Find() ([]*model.QeyKryWEwfhoover, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfhoover, err error)
	FindInBatches(result *[]*model.QeyKryWEwfhoover, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwfhoover) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwfhooverDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwfhooverDo
	Joins(fields ...field.RelationField) IQeyKryWEwfhooverDo
	Preload(fields ...field.RelationField) IQeyKryWEwfhooverDo
	FirstOrInit() (*model.QeyKryWEwfhoover, error)
	FirstOrCreate() (*model.QeyKryWEwfhoover, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwfhoover, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwfhooverDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwfhooverDo) Debug() IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwfhooverDo) WithContext(ctx context.Context) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwfhooverDo) ReadDB() IQeyKryWEwfhooverDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwfhooverDo) WriteDB() IQeyKryWEwfhooverDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwfhooverDo) Session(config *gorm.Session) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwfhooverDo) Clauses(conds ...clause.Expression) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwfhooverDo) Returning(value interface{}, columns ...string) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwfhooverDo) Not(conds ...gen.Condition) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwfhooverDo) Or(conds ...gen.Condition) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwfhooverDo) Select(conds ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwfhooverDo) Where(conds ...gen.Condition) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwfhooverDo) Order(conds ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwfhooverDo) Distinct(cols ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwfhooverDo) Omit(cols ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwfhooverDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwfhooverDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwfhooverDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwfhooverDo) Group(cols ...field.Expr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwfhooverDo) Having(conds ...gen.Condition) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwfhooverDo) Limit(limit int) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwfhooverDo) Offset(offset int) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwfhooverDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwfhooverDo) Unscoped() IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwfhooverDo) Create(values ...*model.QeyKryWEwfhoover) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwfhooverDo) CreateInBatches(values []*model.QeyKryWEwfhoover, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwfhooverDo) Save(values ...*model.QeyKryWEwfhoover) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwfhooverDo) First() (*model.QeyKryWEwfhoover, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhoover), nil
	}
}

func (q qeyKryWEwfhooverDo) Take() (*model.QeyKryWEwfhoover, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhoover), nil
	}
}

func (q qeyKryWEwfhooverDo) Last() (*model.QeyKryWEwfhoover, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhoover), nil
	}
}

func (q qeyKryWEwfhooverDo) Find() ([]*model.QeyKryWEwfhoover, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwfhoover), err
}

func (q qeyKryWEwfhooverDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwfhoover, err error) {
	buf := make([]*model.QeyKryWEwfhoover, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwfhooverDo) FindInBatches(result *[]*model.QeyKryWEwfhoover, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwfhooverDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwfhooverDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwfhooverDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwfhooverDo) Joins(fields ...field.RelationField) IQeyKryWEwfhooverDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwfhooverDo) Preload(fields ...field.RelationField) IQeyKryWEwfhooverDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwfhooverDo) FirstOrInit() (*model.QeyKryWEwfhoover, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhoover), nil
	}
}

func (q qeyKryWEwfhooverDo) FirstOrCreate() (*model.QeyKryWEwfhoover, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwfhoover), nil
	}
}

func (q qeyKryWEwfhooverDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwfhoover, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwfhooverDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwfhooverDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwfhooverDo) Delete(models ...*model.QeyKryWEwfhoover) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwfhooverDo) withDO(do gen.Dao) *qeyKryWEwfhooverDo {
	q.DO = *do.(*gen.DO)
	return q
}
