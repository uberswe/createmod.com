// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEtermmetum(db *gorm.DB, opts ...gen.DOOption) qeyKryWEtermmetum {
	_qeyKryWEtermmetum := qeyKryWEtermmetum{}

	_qeyKryWEtermmetum.qeyKryWEtermmetumDo.UseDB(db, opts...)
	_qeyKryWEtermmetum.qeyKryWEtermmetumDo.UseModel(&model.QeyKryWEtermmetum{})

	tableName := _qeyKryWEtermmetum.qeyKryWEtermmetumDo.TableName()
	_qeyKryWEtermmetum.ALL = field.NewAsterisk(tableName)
	_qeyKryWEtermmetum.MetaID = field.NewInt64(tableName, "meta_id")
	_qeyKryWEtermmetum.TermID = field.NewInt64(tableName, "term_id")
	_qeyKryWEtermmetum.MetaKey = field.NewString(tableName, "meta_key")
	_qeyKryWEtermmetum.MetaValue = field.NewString(tableName, "meta_value")

	_qeyKryWEtermmetum.fillFieldMap()

	return _qeyKryWEtermmetum
}

type qeyKryWEtermmetum struct {
	qeyKryWEtermmetumDo

	ALL       field.Asterisk
	MetaID    field.Int64
	TermID    field.Int64
	MetaKey   field.String
	MetaValue field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEtermmetum) Table(newTableName string) *qeyKryWEtermmetum {
	q.qeyKryWEtermmetumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEtermmetum) As(alias string) *qeyKryWEtermmetum {
	q.qeyKryWEtermmetumDo.DO = *(q.qeyKryWEtermmetumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEtermmetum) updateTableName(table string) *qeyKryWEtermmetum {
	q.ALL = field.NewAsterisk(table)
	q.MetaID = field.NewInt64(table, "meta_id")
	q.TermID = field.NewInt64(table, "term_id")
	q.MetaKey = field.NewString(table, "meta_key")
	q.MetaValue = field.NewString(table, "meta_value")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEtermmetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEtermmetum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 4)
	q.fieldMap["meta_id"] = q.MetaID
	q.fieldMap["term_id"] = q.TermID
	q.fieldMap["meta_key"] = q.MetaKey
	q.fieldMap["meta_value"] = q.MetaValue
}

func (q qeyKryWEtermmetum) clone(db *gorm.DB) qeyKryWEtermmetum {
	q.qeyKryWEtermmetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEtermmetum) replaceDB(db *gorm.DB) qeyKryWEtermmetum {
	q.qeyKryWEtermmetumDo.ReplaceDB(db)
	return q
}

type qeyKryWEtermmetumDo struct{ gen.DO }

type IQeyKryWEtermmetumDo interface {
	gen.SubQuery
	Debug() IQeyKryWEtermmetumDo
	WithContext(ctx context.Context) IQeyKryWEtermmetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEtermmetumDo
	WriteDB() IQeyKryWEtermmetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEtermmetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEtermmetumDo
	Not(conds ...gen.Condition) IQeyKryWEtermmetumDo
	Or(conds ...gen.Condition) IQeyKryWEtermmetumDo
	Select(conds ...field.Expr) IQeyKryWEtermmetumDo
	Where(conds ...gen.Condition) IQeyKryWEtermmetumDo
	Order(conds ...field.Expr) IQeyKryWEtermmetumDo
	Distinct(cols ...field.Expr) IQeyKryWEtermmetumDo
	Omit(cols ...field.Expr) IQeyKryWEtermmetumDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermmetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermmetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermmetumDo
	Group(cols ...field.Expr) IQeyKryWEtermmetumDo
	Having(conds ...gen.Condition) IQeyKryWEtermmetumDo
	Limit(limit int) IQeyKryWEtermmetumDo
	Offset(offset int) IQeyKryWEtermmetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermmetumDo
	Unscoped() IQeyKryWEtermmetumDo
	Create(values ...*model.QeyKryWEtermmetum) error
	CreateInBatches(values []*model.QeyKryWEtermmetum, batchSize int) error
	Save(values ...*model.QeyKryWEtermmetum) error
	First() (*model.QeyKryWEtermmetum, error)
	Take() (*model.QeyKryWEtermmetum, error)
	Last() (*model.QeyKryWEtermmetum, error)
	Find() ([]*model.QeyKryWEtermmetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEtermmetum, err error)
	FindInBatches(result *[]*model.QeyKryWEtermmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEtermmetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEtermmetumDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEtermmetumDo
	Joins(fields ...field.RelationField) IQeyKryWEtermmetumDo
	Preload(fields ...field.RelationField) IQeyKryWEtermmetumDo
	FirstOrInit() (*model.QeyKryWEtermmetum, error)
	FirstOrCreate() (*model.QeyKryWEtermmetum, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEtermmetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEtermmetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEtermmetumDo) Debug() IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEtermmetumDo) WithContext(ctx context.Context) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEtermmetumDo) ReadDB() IQeyKryWEtermmetumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEtermmetumDo) WriteDB() IQeyKryWEtermmetumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEtermmetumDo) Session(config *gorm.Session) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEtermmetumDo) Clauses(conds ...clause.Expression) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEtermmetumDo) Returning(value interface{}, columns ...string) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEtermmetumDo) Not(conds ...gen.Condition) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEtermmetumDo) Or(conds ...gen.Condition) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEtermmetumDo) Select(conds ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEtermmetumDo) Where(conds ...gen.Condition) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEtermmetumDo) Order(conds ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEtermmetumDo) Distinct(cols ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEtermmetumDo) Omit(cols ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEtermmetumDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEtermmetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEtermmetumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEtermmetumDo) Group(cols ...field.Expr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEtermmetumDo) Having(conds ...gen.Condition) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEtermmetumDo) Limit(limit int) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEtermmetumDo) Offset(offset int) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEtermmetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEtermmetumDo) Unscoped() IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEtermmetumDo) Create(values ...*model.QeyKryWEtermmetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEtermmetumDo) CreateInBatches(values []*model.QeyKryWEtermmetum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEtermmetumDo) Save(values ...*model.QeyKryWEtermmetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEtermmetumDo) First() (*model.QeyKryWEtermmetum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermmetum), nil
	}
}

func (q qeyKryWEtermmetumDo) Take() (*model.QeyKryWEtermmetum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermmetum), nil
	}
}

func (q qeyKryWEtermmetumDo) Last() (*model.QeyKryWEtermmetum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermmetum), nil
	}
}

func (q qeyKryWEtermmetumDo) Find() ([]*model.QeyKryWEtermmetum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEtermmetum), err
}

func (q qeyKryWEtermmetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEtermmetum, err error) {
	buf := make([]*model.QeyKryWEtermmetum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEtermmetumDo) FindInBatches(result *[]*model.QeyKryWEtermmetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEtermmetumDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEtermmetumDo) Assign(attrs ...field.AssignExpr) IQeyKryWEtermmetumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEtermmetumDo) Joins(fields ...field.RelationField) IQeyKryWEtermmetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEtermmetumDo) Preload(fields ...field.RelationField) IQeyKryWEtermmetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEtermmetumDo) FirstOrInit() (*model.QeyKryWEtermmetum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermmetum), nil
	}
}

func (q qeyKryWEtermmetumDo) FirstOrCreate() (*model.QeyKryWEtermmetum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEtermmetum), nil
	}
}

func (q qeyKryWEtermmetumDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEtermmetum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEtermmetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEtermmetumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEtermmetumDo) Delete(models ...*model.QeyKryWEtermmetum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEtermmetumDo) withDO(do gen.Dao) *qeyKryWEtermmetumDo {
	q.DO = *do.(*gen.DO)
	return q
}
