// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEisInvertedIndex(db *gorm.DB, opts ...gen.DOOption) qeyKryWEisInvertedIndex {
	_qeyKryWEisInvertedIndex := qeyKryWEisInvertedIndex{}

	_qeyKryWEisInvertedIndex.qeyKryWEisInvertedIndexDo.UseDB(db, opts...)
	_qeyKryWEisInvertedIndex.qeyKryWEisInvertedIndexDo.UseModel(&model.QeyKryWEisInvertedIndex{})

	tableName := _qeyKryWEisInvertedIndex.qeyKryWEisInvertedIndexDo.TableName()
	_qeyKryWEisInvertedIndex.ALL = field.NewAsterisk(tableName)
	_qeyKryWEisInvertedIndex.PostID = field.NewInt64(tableName, "post_id")
	_qeyKryWEisInvertedIndex.Term = field.NewString(tableName, "term")
	_qeyKryWEisInvertedIndex.TermReverse = field.NewString(tableName, "term_reverse")
	_qeyKryWEisInvertedIndex.Score = field.NewInt32(tableName, "score")
	_qeyKryWEisInvertedIndex.Title = field.NewInt32(tableName, "title")
	_qeyKryWEisInvertedIndex.Content = field.NewInt32(tableName, "content")
	_qeyKryWEisInvertedIndex.Excerpt = field.NewInt32(tableName, "excerpt")
	_qeyKryWEisInvertedIndex.Comment = field.NewInt32(tableName, "comment")
	_qeyKryWEisInvertedIndex.Author = field.NewInt32(tableName, "author")
	_qeyKryWEisInvertedIndex.Category = field.NewInt32(tableName, "category")
	_qeyKryWEisInvertedIndex.Tag = field.NewInt32(tableName, "tag")
	_qeyKryWEisInvertedIndex.Taxonomy = field.NewInt32(tableName, "taxonomy")
	_qeyKryWEisInvertedIndex.Customfield = field.NewInt32(tableName, "customfield")
	_qeyKryWEisInvertedIndex.TaxonomyDetail = field.NewString(tableName, "taxonomy_detail")
	_qeyKryWEisInvertedIndex.CustomfieldDetail = field.NewString(tableName, "customfield_detail")
	_qeyKryWEisInvertedIndex.Type = field.NewString(tableName, "type")
	_qeyKryWEisInvertedIndex.Lang = field.NewString(tableName, "lang")

	_qeyKryWEisInvertedIndex.fillFieldMap()

	return _qeyKryWEisInvertedIndex
}

type qeyKryWEisInvertedIndex struct {
	qeyKryWEisInvertedIndexDo

	ALL               field.Asterisk
	PostID            field.Int64
	Term              field.String
	TermReverse       field.String
	Score             field.Int32
	Title             field.Int32
	Content           field.Int32
	Excerpt           field.Int32
	Comment           field.Int32
	Author            field.Int32
	Category          field.Int32
	Tag               field.Int32
	Taxonomy          field.Int32
	Customfield       field.Int32
	TaxonomyDetail    field.String
	CustomfieldDetail field.String
	Type              field.String
	Lang              field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEisInvertedIndex) Table(newTableName string) *qeyKryWEisInvertedIndex {
	q.qeyKryWEisInvertedIndexDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEisInvertedIndex) As(alias string) *qeyKryWEisInvertedIndex {
	q.qeyKryWEisInvertedIndexDo.DO = *(q.qeyKryWEisInvertedIndexDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEisInvertedIndex) updateTableName(table string) *qeyKryWEisInvertedIndex {
	q.ALL = field.NewAsterisk(table)
	q.PostID = field.NewInt64(table, "post_id")
	q.Term = field.NewString(table, "term")
	q.TermReverse = field.NewString(table, "term_reverse")
	q.Score = field.NewInt32(table, "score")
	q.Title = field.NewInt32(table, "title")
	q.Content = field.NewInt32(table, "content")
	q.Excerpt = field.NewInt32(table, "excerpt")
	q.Comment = field.NewInt32(table, "comment")
	q.Author = field.NewInt32(table, "author")
	q.Category = field.NewInt32(table, "category")
	q.Tag = field.NewInt32(table, "tag")
	q.Taxonomy = field.NewInt32(table, "taxonomy")
	q.Customfield = field.NewInt32(table, "customfield")
	q.TaxonomyDetail = field.NewString(table, "taxonomy_detail")
	q.CustomfieldDetail = field.NewString(table, "customfield_detail")
	q.Type = field.NewString(table, "type")
	q.Lang = field.NewString(table, "lang")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEisInvertedIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEisInvertedIndex) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 17)
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["term"] = q.Term
	q.fieldMap["term_reverse"] = q.TermReverse
	q.fieldMap["score"] = q.Score
	q.fieldMap["title"] = q.Title
	q.fieldMap["content"] = q.Content
	q.fieldMap["excerpt"] = q.Excerpt
	q.fieldMap["comment"] = q.Comment
	q.fieldMap["author"] = q.Author
	q.fieldMap["category"] = q.Category
	q.fieldMap["tag"] = q.Tag
	q.fieldMap["taxonomy"] = q.Taxonomy
	q.fieldMap["customfield"] = q.Customfield
	q.fieldMap["taxonomy_detail"] = q.TaxonomyDetail
	q.fieldMap["customfield_detail"] = q.CustomfieldDetail
	q.fieldMap["type"] = q.Type
	q.fieldMap["lang"] = q.Lang
}

func (q qeyKryWEisInvertedIndex) clone(db *gorm.DB) qeyKryWEisInvertedIndex {
	q.qeyKryWEisInvertedIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEisInvertedIndex) replaceDB(db *gorm.DB) qeyKryWEisInvertedIndex {
	q.qeyKryWEisInvertedIndexDo.ReplaceDB(db)
	return q
}

type qeyKryWEisInvertedIndexDo struct{ gen.DO }

type IQeyKryWEisInvertedIndexDo interface {
	gen.SubQuery
	Debug() IQeyKryWEisInvertedIndexDo
	WithContext(ctx context.Context) IQeyKryWEisInvertedIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEisInvertedIndexDo
	WriteDB() IQeyKryWEisInvertedIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEisInvertedIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEisInvertedIndexDo
	Not(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo
	Or(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo
	Select(conds ...field.Expr) IQeyKryWEisInvertedIndexDo
	Where(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo
	Order(conds ...field.Expr) IQeyKryWEisInvertedIndexDo
	Distinct(cols ...field.Expr) IQeyKryWEisInvertedIndexDo
	Omit(cols ...field.Expr) IQeyKryWEisInvertedIndexDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEisInvertedIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEisInvertedIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEisInvertedIndexDo
	Group(cols ...field.Expr) IQeyKryWEisInvertedIndexDo
	Having(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo
	Limit(limit int) IQeyKryWEisInvertedIndexDo
	Offset(offset int) IQeyKryWEisInvertedIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEisInvertedIndexDo
	Unscoped() IQeyKryWEisInvertedIndexDo
	Create(values ...*model.QeyKryWEisInvertedIndex) error
	CreateInBatches(values []*model.QeyKryWEisInvertedIndex, batchSize int) error
	Save(values ...*model.QeyKryWEisInvertedIndex) error
	First() (*model.QeyKryWEisInvertedIndex, error)
	Take() (*model.QeyKryWEisInvertedIndex, error)
	Last() (*model.QeyKryWEisInvertedIndex, error)
	Find() ([]*model.QeyKryWEisInvertedIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEisInvertedIndex, err error)
	FindInBatches(result *[]*model.QeyKryWEisInvertedIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEisInvertedIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEisInvertedIndexDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEisInvertedIndexDo
	Joins(fields ...field.RelationField) IQeyKryWEisInvertedIndexDo
	Preload(fields ...field.RelationField) IQeyKryWEisInvertedIndexDo
	FirstOrInit() (*model.QeyKryWEisInvertedIndex, error)
	FirstOrCreate() (*model.QeyKryWEisInvertedIndex, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEisInvertedIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEisInvertedIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEisInvertedIndexDo) Debug() IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEisInvertedIndexDo) WithContext(ctx context.Context) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEisInvertedIndexDo) ReadDB() IQeyKryWEisInvertedIndexDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEisInvertedIndexDo) WriteDB() IQeyKryWEisInvertedIndexDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEisInvertedIndexDo) Session(config *gorm.Session) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEisInvertedIndexDo) Clauses(conds ...clause.Expression) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Returning(value interface{}, columns ...string) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEisInvertedIndexDo) Not(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Or(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Select(conds ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Where(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Order(conds ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Distinct(cols ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEisInvertedIndexDo) Omit(cols ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEisInvertedIndexDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEisInvertedIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEisInvertedIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEisInvertedIndexDo) Group(cols ...field.Expr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEisInvertedIndexDo) Having(conds ...gen.Condition) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEisInvertedIndexDo) Limit(limit int) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEisInvertedIndexDo) Offset(offset int) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEisInvertedIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEisInvertedIndexDo) Unscoped() IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEisInvertedIndexDo) Create(values ...*model.QeyKryWEisInvertedIndex) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEisInvertedIndexDo) CreateInBatches(values []*model.QeyKryWEisInvertedIndex, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEisInvertedIndexDo) Save(values ...*model.QeyKryWEisInvertedIndex) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEisInvertedIndexDo) First() (*model.QeyKryWEisInvertedIndex, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEisInvertedIndex), nil
	}
}

func (q qeyKryWEisInvertedIndexDo) Take() (*model.QeyKryWEisInvertedIndex, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEisInvertedIndex), nil
	}
}

func (q qeyKryWEisInvertedIndexDo) Last() (*model.QeyKryWEisInvertedIndex, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEisInvertedIndex), nil
	}
}

func (q qeyKryWEisInvertedIndexDo) Find() ([]*model.QeyKryWEisInvertedIndex, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEisInvertedIndex), err
}

func (q qeyKryWEisInvertedIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEisInvertedIndex, err error) {
	buf := make([]*model.QeyKryWEisInvertedIndex, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEisInvertedIndexDo) FindInBatches(result *[]*model.QeyKryWEisInvertedIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEisInvertedIndexDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEisInvertedIndexDo) Assign(attrs ...field.AssignExpr) IQeyKryWEisInvertedIndexDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEisInvertedIndexDo) Joins(fields ...field.RelationField) IQeyKryWEisInvertedIndexDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEisInvertedIndexDo) Preload(fields ...field.RelationField) IQeyKryWEisInvertedIndexDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEisInvertedIndexDo) FirstOrInit() (*model.QeyKryWEisInvertedIndex, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEisInvertedIndex), nil
	}
}

func (q qeyKryWEisInvertedIndexDo) FirstOrCreate() (*model.QeyKryWEisInvertedIndex, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEisInvertedIndex), nil
	}
}

func (q qeyKryWEisInvertedIndexDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEisInvertedIndex, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEisInvertedIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEisInvertedIndexDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEisInvertedIndexDo) Delete(models ...*model.QeyKryWEisInvertedIndex) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEisInvertedIndexDo) withDO(do gen.Dao) *qeyKryWEisInvertedIndexDo {
	q.DO = *do.(*gen.DO)
	return q
}
