// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWElink(db *gorm.DB, opts ...gen.DOOption) qeyKryWElink {
	_qeyKryWElink := qeyKryWElink{}

	_qeyKryWElink.qeyKryWElinkDo.UseDB(db, opts...)
	_qeyKryWElink.qeyKryWElinkDo.UseModel(&model.QeyKryWElink{})

	tableName := _qeyKryWElink.qeyKryWElinkDo.TableName()
	_qeyKryWElink.ALL = field.NewAsterisk(tableName)
	_qeyKryWElink.LinkID = field.NewInt64(tableName, "link_id")
	_qeyKryWElink.LinkURL = field.NewString(tableName, "link_url")
	_qeyKryWElink.LinkName = field.NewString(tableName, "link_name")
	_qeyKryWElink.LinkImage = field.NewString(tableName, "link_image")
	_qeyKryWElink.LinkTarget = field.NewString(tableName, "link_target")
	_qeyKryWElink.LinkDescription = field.NewString(tableName, "link_description")
	_qeyKryWElink.LinkVisible = field.NewString(tableName, "link_visible")
	_qeyKryWElink.LinkOwner = field.NewInt64(tableName, "link_owner")
	_qeyKryWElink.LinkRating = field.NewInt32(tableName, "link_rating")
	_qeyKryWElink.LinkUpdated = field.NewTime(tableName, "link_updated")
	_qeyKryWElink.LinkRel = field.NewString(tableName, "link_rel")
	_qeyKryWElink.LinkNotes = field.NewString(tableName, "link_notes")
	_qeyKryWElink.LinkRss = field.NewString(tableName, "link_rss")

	_qeyKryWElink.fillFieldMap()

	return _qeyKryWElink
}

type qeyKryWElink struct {
	qeyKryWElinkDo

	ALL             field.Asterisk
	LinkID          field.Int64
	LinkURL         field.String
	LinkName        field.String
	LinkImage       field.String
	LinkTarget      field.String
	LinkDescription field.String
	LinkVisible     field.String
	LinkOwner       field.Int64
	LinkRating      field.Int32
	LinkUpdated     field.Time
	LinkRel         field.String
	LinkNotes       field.String
	LinkRss         field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWElink) Table(newTableName string) *qeyKryWElink {
	q.qeyKryWElinkDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWElink) As(alias string) *qeyKryWElink {
	q.qeyKryWElinkDo.DO = *(q.qeyKryWElinkDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWElink) updateTableName(table string) *qeyKryWElink {
	q.ALL = field.NewAsterisk(table)
	q.LinkID = field.NewInt64(table, "link_id")
	q.LinkURL = field.NewString(table, "link_url")
	q.LinkName = field.NewString(table, "link_name")
	q.LinkImage = field.NewString(table, "link_image")
	q.LinkTarget = field.NewString(table, "link_target")
	q.LinkDescription = field.NewString(table, "link_description")
	q.LinkVisible = field.NewString(table, "link_visible")
	q.LinkOwner = field.NewInt64(table, "link_owner")
	q.LinkRating = field.NewInt32(table, "link_rating")
	q.LinkUpdated = field.NewTime(table, "link_updated")
	q.LinkRel = field.NewString(table, "link_rel")
	q.LinkNotes = field.NewString(table, "link_notes")
	q.LinkRss = field.NewString(table, "link_rss")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWElink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWElink) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 13)
	q.fieldMap["link_id"] = q.LinkID
	q.fieldMap["link_url"] = q.LinkURL
	q.fieldMap["link_name"] = q.LinkName
	q.fieldMap["link_image"] = q.LinkImage
	q.fieldMap["link_target"] = q.LinkTarget
	q.fieldMap["link_description"] = q.LinkDescription
	q.fieldMap["link_visible"] = q.LinkVisible
	q.fieldMap["link_owner"] = q.LinkOwner
	q.fieldMap["link_rating"] = q.LinkRating
	q.fieldMap["link_updated"] = q.LinkUpdated
	q.fieldMap["link_rel"] = q.LinkRel
	q.fieldMap["link_notes"] = q.LinkNotes
	q.fieldMap["link_rss"] = q.LinkRss
}

func (q qeyKryWElink) clone(db *gorm.DB) qeyKryWElink {
	q.qeyKryWElinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWElink) replaceDB(db *gorm.DB) qeyKryWElink {
	q.qeyKryWElinkDo.ReplaceDB(db)
	return q
}

type qeyKryWElinkDo struct{ gen.DO }

type IQeyKryWElinkDo interface {
	gen.SubQuery
	Debug() IQeyKryWElinkDo
	WithContext(ctx context.Context) IQeyKryWElinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWElinkDo
	WriteDB() IQeyKryWElinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWElinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWElinkDo
	Not(conds ...gen.Condition) IQeyKryWElinkDo
	Or(conds ...gen.Condition) IQeyKryWElinkDo
	Select(conds ...field.Expr) IQeyKryWElinkDo
	Where(conds ...gen.Condition) IQeyKryWElinkDo
	Order(conds ...field.Expr) IQeyKryWElinkDo
	Distinct(cols ...field.Expr) IQeyKryWElinkDo
	Omit(cols ...field.Expr) IQeyKryWElinkDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWElinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElinkDo
	Group(cols ...field.Expr) IQeyKryWElinkDo
	Having(conds ...gen.Condition) IQeyKryWElinkDo
	Limit(limit int) IQeyKryWElinkDo
	Offset(offset int) IQeyKryWElinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWElinkDo
	Unscoped() IQeyKryWElinkDo
	Create(values ...*model.QeyKryWElink) error
	CreateInBatches(values []*model.QeyKryWElink, batchSize int) error
	Save(values ...*model.QeyKryWElink) error
	First() (*model.QeyKryWElink, error)
	Take() (*model.QeyKryWElink, error)
	Last() (*model.QeyKryWElink, error)
	Find() ([]*model.QeyKryWElink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWElink, err error)
	FindInBatches(result *[]*model.QeyKryWElink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWElink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWElinkDo
	Assign(attrs ...field.AssignExpr) IQeyKryWElinkDo
	Joins(fields ...field.RelationField) IQeyKryWElinkDo
	Preload(fields ...field.RelationField) IQeyKryWElinkDo
	FirstOrInit() (*model.QeyKryWElink, error)
	FirstOrCreate() (*model.QeyKryWElink, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWElink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWElinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWElinkDo) Debug() IQeyKryWElinkDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWElinkDo) WithContext(ctx context.Context) IQeyKryWElinkDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWElinkDo) ReadDB() IQeyKryWElinkDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWElinkDo) WriteDB() IQeyKryWElinkDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWElinkDo) Session(config *gorm.Session) IQeyKryWElinkDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWElinkDo) Clauses(conds ...clause.Expression) IQeyKryWElinkDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWElinkDo) Returning(value interface{}, columns ...string) IQeyKryWElinkDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWElinkDo) Not(conds ...gen.Condition) IQeyKryWElinkDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWElinkDo) Or(conds ...gen.Condition) IQeyKryWElinkDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWElinkDo) Select(conds ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWElinkDo) Where(conds ...gen.Condition) IQeyKryWElinkDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWElinkDo) Order(conds ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWElinkDo) Distinct(cols ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWElinkDo) Omit(cols ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWElinkDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWElinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWElinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWElinkDo) Group(cols ...field.Expr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWElinkDo) Having(conds ...gen.Condition) IQeyKryWElinkDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWElinkDo) Limit(limit int) IQeyKryWElinkDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWElinkDo) Offset(offset int) IQeyKryWElinkDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWElinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWElinkDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWElinkDo) Unscoped() IQeyKryWElinkDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWElinkDo) Create(values ...*model.QeyKryWElink) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWElinkDo) CreateInBatches(values []*model.QeyKryWElink, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWElinkDo) Save(values ...*model.QeyKryWElink) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWElinkDo) First() (*model.QeyKryWElink, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElink), nil
	}
}

func (q qeyKryWElinkDo) Take() (*model.QeyKryWElink, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElink), nil
	}
}

func (q qeyKryWElinkDo) Last() (*model.QeyKryWElink, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElink), nil
	}
}

func (q qeyKryWElinkDo) Find() ([]*model.QeyKryWElink, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWElink), err
}

func (q qeyKryWElinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWElink, err error) {
	buf := make([]*model.QeyKryWElink, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWElinkDo) FindInBatches(result *[]*model.QeyKryWElink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWElinkDo) Attrs(attrs ...field.AssignExpr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWElinkDo) Assign(attrs ...field.AssignExpr) IQeyKryWElinkDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWElinkDo) Joins(fields ...field.RelationField) IQeyKryWElinkDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWElinkDo) Preload(fields ...field.RelationField) IQeyKryWElinkDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWElinkDo) FirstOrInit() (*model.QeyKryWElink, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElink), nil
	}
}

func (q qeyKryWElinkDo) FirstOrCreate() (*model.QeyKryWElink, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWElink), nil
	}
}

func (q qeyKryWElinkDo) FindByPage(offset int, limit int) (result []*model.QeyKryWElink, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWElinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWElinkDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWElinkDo) Delete(models ...*model.QeyKryWElink) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWElinkDo) withDO(do gen.Dao) *qeyKryWElinkDo {
	q.DO = *do.(*gen.DO)
	return q
}
