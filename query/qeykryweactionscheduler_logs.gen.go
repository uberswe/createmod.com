// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEactionschedulerLog(db *gorm.DB, opts ...gen.DOOption) qeyKryWEactionschedulerLog {
	_qeyKryWEactionschedulerLog := qeyKryWEactionschedulerLog{}

	_qeyKryWEactionschedulerLog.qeyKryWEactionschedulerLogDo.UseDB(db, opts...)
	_qeyKryWEactionschedulerLog.qeyKryWEactionschedulerLogDo.UseModel(&model.QeyKryWEactionschedulerLog{})

	tableName := _qeyKryWEactionschedulerLog.qeyKryWEactionschedulerLogDo.TableName()
	_qeyKryWEactionschedulerLog.ALL = field.NewAsterisk(tableName)
	_qeyKryWEactionschedulerLog.LogID = field.NewInt64(tableName, "log_id")
	_qeyKryWEactionschedulerLog.ActionID = field.NewInt64(tableName, "action_id")
	_qeyKryWEactionschedulerLog.Message = field.NewString(tableName, "message")
	_qeyKryWEactionschedulerLog.LogDateGmt = field.NewTime(tableName, "log_date_gmt")
	_qeyKryWEactionschedulerLog.LogDateLocal = field.NewTime(tableName, "log_date_local")

	_qeyKryWEactionschedulerLog.fillFieldMap()

	return _qeyKryWEactionschedulerLog
}

type qeyKryWEactionschedulerLog struct {
	qeyKryWEactionschedulerLogDo

	ALL          field.Asterisk
	LogID        field.Int64
	ActionID     field.Int64
	Message      field.String
	LogDateGmt   field.Time
	LogDateLocal field.Time

	fieldMap map[string]field.Expr
}

func (q qeyKryWEactionschedulerLog) Table(newTableName string) *qeyKryWEactionschedulerLog {
	q.qeyKryWEactionschedulerLogDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEactionschedulerLog) As(alias string) *qeyKryWEactionschedulerLog {
	q.qeyKryWEactionschedulerLogDo.DO = *(q.qeyKryWEactionschedulerLogDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEactionschedulerLog) updateTableName(table string) *qeyKryWEactionschedulerLog {
	q.ALL = field.NewAsterisk(table)
	q.LogID = field.NewInt64(table, "log_id")
	q.ActionID = field.NewInt64(table, "action_id")
	q.Message = field.NewString(table, "message")
	q.LogDateGmt = field.NewTime(table, "log_date_gmt")
	q.LogDateLocal = field.NewTime(table, "log_date_local")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEactionschedulerLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEactionschedulerLog) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["log_id"] = q.LogID
	q.fieldMap["action_id"] = q.ActionID
	q.fieldMap["message"] = q.Message
	q.fieldMap["log_date_gmt"] = q.LogDateGmt
	q.fieldMap["log_date_local"] = q.LogDateLocal
}

func (q qeyKryWEactionschedulerLog) clone(db *gorm.DB) qeyKryWEactionschedulerLog {
	q.qeyKryWEactionschedulerLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEactionschedulerLog) replaceDB(db *gorm.DB) qeyKryWEactionschedulerLog {
	q.qeyKryWEactionschedulerLogDo.ReplaceDB(db)
	return q
}

type qeyKryWEactionschedulerLogDo struct{ gen.DO }

type IQeyKryWEactionschedulerLogDo interface {
	gen.SubQuery
	Debug() IQeyKryWEactionschedulerLogDo
	WithContext(ctx context.Context) IQeyKryWEactionschedulerLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEactionschedulerLogDo
	WriteDB() IQeyKryWEactionschedulerLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEactionschedulerLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerLogDo
	Not(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo
	Or(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo
	Select(conds ...field.Expr) IQeyKryWEactionschedulerLogDo
	Where(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo
	Order(conds ...field.Expr) IQeyKryWEactionschedulerLogDo
	Distinct(cols ...field.Expr) IQeyKryWEactionschedulerLogDo
	Omit(cols ...field.Expr) IQeyKryWEactionschedulerLogDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerLogDo
	Group(cols ...field.Expr) IQeyKryWEactionschedulerLogDo
	Having(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo
	Limit(limit int) IQeyKryWEactionschedulerLogDo
	Offset(offset int) IQeyKryWEactionschedulerLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerLogDo
	Unscoped() IQeyKryWEactionschedulerLogDo
	Create(values ...*model.QeyKryWEactionschedulerLog) error
	CreateInBatches(values []*model.QeyKryWEactionschedulerLog, batchSize int) error
	Save(values ...*model.QeyKryWEactionschedulerLog) error
	First() (*model.QeyKryWEactionschedulerLog, error)
	Take() (*model.QeyKryWEactionschedulerLog, error)
	Last() (*model.QeyKryWEactionschedulerLog, error)
	Find() ([]*model.QeyKryWEactionschedulerLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerLog, err error)
	FindInBatches(result *[]*model.QeyKryWEactionschedulerLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEactionschedulerLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerLogDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerLogDo
	Joins(fields ...field.RelationField) IQeyKryWEactionschedulerLogDo
	Preload(fields ...field.RelationField) IQeyKryWEactionschedulerLogDo
	FirstOrInit() (*model.QeyKryWEactionschedulerLog, error)
	FirstOrCreate() (*model.QeyKryWEactionschedulerLog, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEactionschedulerLogDo) Debug() IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEactionschedulerLogDo) WithContext(ctx context.Context) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEactionschedulerLogDo) ReadDB() IQeyKryWEactionschedulerLogDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEactionschedulerLogDo) WriteDB() IQeyKryWEactionschedulerLogDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEactionschedulerLogDo) Session(config *gorm.Session) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEactionschedulerLogDo) Clauses(conds ...clause.Expression) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Returning(value interface{}, columns ...string) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEactionschedulerLogDo) Not(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Or(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Select(conds ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Where(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Order(conds ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Distinct(cols ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEactionschedulerLogDo) Omit(cols ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEactionschedulerLogDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEactionschedulerLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEactionschedulerLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEactionschedulerLogDo) Group(cols ...field.Expr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEactionschedulerLogDo) Having(conds ...gen.Condition) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEactionschedulerLogDo) Limit(limit int) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEactionschedulerLogDo) Offset(offset int) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEactionschedulerLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEactionschedulerLogDo) Unscoped() IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEactionschedulerLogDo) Create(values ...*model.QeyKryWEactionschedulerLog) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEactionschedulerLogDo) CreateInBatches(values []*model.QeyKryWEactionschedulerLog, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEactionschedulerLogDo) Save(values ...*model.QeyKryWEactionschedulerLog) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEactionschedulerLogDo) First() (*model.QeyKryWEactionschedulerLog, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerLog), nil
	}
}

func (q qeyKryWEactionschedulerLogDo) Take() (*model.QeyKryWEactionschedulerLog, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerLog), nil
	}
}

func (q qeyKryWEactionschedulerLogDo) Last() (*model.QeyKryWEactionschedulerLog, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerLog), nil
	}
}

func (q qeyKryWEactionschedulerLogDo) Find() ([]*model.QeyKryWEactionschedulerLog, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEactionschedulerLog), err
}

func (q qeyKryWEactionschedulerLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEactionschedulerLog, err error) {
	buf := make([]*model.QeyKryWEactionschedulerLog, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEactionschedulerLogDo) FindInBatches(result *[]*model.QeyKryWEactionschedulerLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEactionschedulerLogDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEactionschedulerLogDo) Assign(attrs ...field.AssignExpr) IQeyKryWEactionschedulerLogDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEactionschedulerLogDo) Joins(fields ...field.RelationField) IQeyKryWEactionschedulerLogDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerLogDo) Preload(fields ...field.RelationField) IQeyKryWEactionschedulerLogDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEactionschedulerLogDo) FirstOrInit() (*model.QeyKryWEactionschedulerLog, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerLog), nil
	}
}

func (q qeyKryWEactionschedulerLogDo) FirstOrCreate() (*model.QeyKryWEactionschedulerLog, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEactionschedulerLog), nil
	}
}

func (q qeyKryWEactionschedulerLogDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEactionschedulerLog, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEactionschedulerLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEactionschedulerLogDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEactionschedulerLogDo) Delete(models ...*model.QeyKryWEactionschedulerLog) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEactionschedulerLogDo) withDO(do gen.Dao) *qeyKryWEactionschedulerLogDo {
	q.DO = *do.(*gen.DO)
	return q
}
