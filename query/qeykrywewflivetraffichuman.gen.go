// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwflivetraffichuman(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwflivetraffichuman {
	_qeyKryWEwflivetraffichuman := qeyKryWEwflivetraffichuman{}

	_qeyKryWEwflivetraffichuman.qeyKryWEwflivetraffichumanDo.UseDB(db, opts...)
	_qeyKryWEwflivetraffichuman.qeyKryWEwflivetraffichumanDo.UseModel(&model.QeyKryWEwflivetraffichuman{})

	tableName := _qeyKryWEwflivetraffichuman.qeyKryWEwflivetraffichumanDo.TableName()
	_qeyKryWEwflivetraffichuman.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwflivetraffichuman.IP = field.NewBytes(tableName, "IP")
	_qeyKryWEwflivetraffichuman.Identifier = field.NewBytes(tableName, "identifier")
	_qeyKryWEwflivetraffichuman.Expiration = field.NewInt32(tableName, "expiration")

	_qeyKryWEwflivetraffichuman.fillFieldMap()

	return _qeyKryWEwflivetraffichuman
}

type qeyKryWEwflivetraffichuman struct {
	qeyKryWEwflivetraffichumanDo

	ALL        field.Asterisk
	IP         field.Bytes
	Identifier field.Bytes
	Expiration field.Int32

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwflivetraffichuman) Table(newTableName string) *qeyKryWEwflivetraffichuman {
	q.qeyKryWEwflivetraffichumanDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwflivetraffichuman) As(alias string) *qeyKryWEwflivetraffichuman {
	q.qeyKryWEwflivetraffichumanDo.DO = *(q.qeyKryWEwflivetraffichumanDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwflivetraffichuman) updateTableName(table string) *qeyKryWEwflivetraffichuman {
	q.ALL = field.NewAsterisk(table)
	q.IP = field.NewBytes(table, "IP")
	q.Identifier = field.NewBytes(table, "identifier")
	q.Expiration = field.NewInt32(table, "expiration")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwflivetraffichuman) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwflivetraffichuman) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["IP"] = q.IP
	q.fieldMap["identifier"] = q.Identifier
	q.fieldMap["expiration"] = q.Expiration
}

func (q qeyKryWEwflivetraffichuman) clone(db *gorm.DB) qeyKryWEwflivetraffichuman {
	q.qeyKryWEwflivetraffichumanDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwflivetraffichuman) replaceDB(db *gorm.DB) qeyKryWEwflivetraffichuman {
	q.qeyKryWEwflivetraffichumanDo.ReplaceDB(db)
	return q
}

type qeyKryWEwflivetraffichumanDo struct{ gen.DO }

type IQeyKryWEwflivetraffichumanDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwflivetraffichumanDo
	WithContext(ctx context.Context) IQeyKryWEwflivetraffichumanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwflivetraffichumanDo
	WriteDB() IQeyKryWEwflivetraffichumanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwflivetraffichumanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwflivetraffichumanDo
	Not(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo
	Or(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo
	Select(conds ...field.Expr) IQeyKryWEwflivetraffichumanDo
	Where(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo
	Order(conds ...field.Expr) IQeyKryWEwflivetraffichumanDo
	Distinct(cols ...field.Expr) IQeyKryWEwflivetraffichumanDo
	Omit(cols ...field.Expr) IQeyKryWEwflivetraffichumanDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflivetraffichumanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflivetraffichumanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflivetraffichumanDo
	Group(cols ...field.Expr) IQeyKryWEwflivetraffichumanDo
	Having(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo
	Limit(limit int) IQeyKryWEwflivetraffichumanDo
	Offset(offset int) IQeyKryWEwflivetraffichumanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflivetraffichumanDo
	Unscoped() IQeyKryWEwflivetraffichumanDo
	Create(values ...*model.QeyKryWEwflivetraffichuman) error
	CreateInBatches(values []*model.QeyKryWEwflivetraffichuman, batchSize int) error
	Save(values ...*model.QeyKryWEwflivetraffichuman) error
	First() (*model.QeyKryWEwflivetraffichuman, error)
	Take() (*model.QeyKryWEwflivetraffichuman, error)
	Last() (*model.QeyKryWEwflivetraffichuman, error)
	Find() ([]*model.QeyKryWEwflivetraffichuman, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwflivetraffichuman, err error)
	FindInBatches(result *[]*model.QeyKryWEwflivetraffichuman, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwflivetraffichuman) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwflivetraffichumanDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwflivetraffichumanDo
	Joins(fields ...field.RelationField) IQeyKryWEwflivetraffichumanDo
	Preload(fields ...field.RelationField) IQeyKryWEwflivetraffichumanDo
	FirstOrInit() (*model.QeyKryWEwflivetraffichuman, error)
	FirstOrCreate() (*model.QeyKryWEwflivetraffichuman, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwflivetraffichuman, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwflivetraffichumanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwflivetraffichumanDo) Debug() IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwflivetraffichumanDo) WithContext(ctx context.Context) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwflivetraffichumanDo) ReadDB() IQeyKryWEwflivetraffichumanDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwflivetraffichumanDo) WriteDB() IQeyKryWEwflivetraffichumanDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwflivetraffichumanDo) Session(config *gorm.Session) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwflivetraffichumanDo) Clauses(conds ...clause.Expression) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Returning(value interface{}, columns ...string) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwflivetraffichumanDo) Not(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Or(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Select(conds ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Where(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Order(conds ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Distinct(cols ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwflivetraffichumanDo) Omit(cols ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwflivetraffichumanDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwflivetraffichumanDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwflivetraffichumanDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwflivetraffichumanDo) Group(cols ...field.Expr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwflivetraffichumanDo) Having(conds ...gen.Condition) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwflivetraffichumanDo) Limit(limit int) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwflivetraffichumanDo) Offset(offset int) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwflivetraffichumanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwflivetraffichumanDo) Unscoped() IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwflivetraffichumanDo) Create(values ...*model.QeyKryWEwflivetraffichuman) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwflivetraffichumanDo) CreateInBatches(values []*model.QeyKryWEwflivetraffichuman, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwflivetraffichumanDo) Save(values ...*model.QeyKryWEwflivetraffichuman) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwflivetraffichumanDo) First() (*model.QeyKryWEwflivetraffichuman, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflivetraffichuman), nil
	}
}

func (q qeyKryWEwflivetraffichumanDo) Take() (*model.QeyKryWEwflivetraffichuman, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflivetraffichuman), nil
	}
}

func (q qeyKryWEwflivetraffichumanDo) Last() (*model.QeyKryWEwflivetraffichuman, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflivetraffichuman), nil
	}
}

func (q qeyKryWEwflivetraffichumanDo) Find() ([]*model.QeyKryWEwflivetraffichuman, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwflivetraffichuman), err
}

func (q qeyKryWEwflivetraffichumanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwflivetraffichuman, err error) {
	buf := make([]*model.QeyKryWEwflivetraffichuman, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwflivetraffichumanDo) FindInBatches(result *[]*model.QeyKryWEwflivetraffichuman, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwflivetraffichumanDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwflivetraffichumanDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwflivetraffichumanDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwflivetraffichumanDo) Joins(fields ...field.RelationField) IQeyKryWEwflivetraffichumanDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwflivetraffichumanDo) Preload(fields ...field.RelationField) IQeyKryWEwflivetraffichumanDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwflivetraffichumanDo) FirstOrInit() (*model.QeyKryWEwflivetraffichuman, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflivetraffichuman), nil
	}
}

func (q qeyKryWEwflivetraffichumanDo) FirstOrCreate() (*model.QeyKryWEwflivetraffichuman, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwflivetraffichuman), nil
	}
}

func (q qeyKryWEwflivetraffichumanDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwflivetraffichuman, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwflivetraffichumanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwflivetraffichumanDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwflivetraffichumanDo) Delete(models ...*model.QeyKryWEwflivetraffichuman) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwflivetraffichumanDo) withDO(do gen.Dao) *qeyKryWEwflivetraffichumanDo {
	q.DO = *do.(*gen.DO)
	return q
}
