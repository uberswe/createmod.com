// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwcFeedbackForm(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwcFeedbackForm {
	_qeyKryWEwcFeedbackForm := qeyKryWEwcFeedbackForm{}

	_qeyKryWEwcFeedbackForm.qeyKryWEwcFeedbackFormDo.UseDB(db, opts...)
	_qeyKryWEwcFeedbackForm.qeyKryWEwcFeedbackFormDo.UseModel(&model.QeyKryWEwcFeedbackForm{})

	tableName := _qeyKryWEwcFeedbackForm.qeyKryWEwcFeedbackFormDo.TableName()
	_qeyKryWEwcFeedbackForm.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwcFeedbackForm.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwcFeedbackForm.PostID = field.NewInt32(tableName, "post_id")
	_qeyKryWEwcFeedbackForm.UniqueID = field.NewString(tableName, "unique_id")
	_qeyKryWEwcFeedbackForm.Question = field.NewString(tableName, "question")
	_qeyKryWEwcFeedbackForm.Opened = field.NewInt32(tableName, "opened")
	_qeyKryWEwcFeedbackForm.Content = field.NewString(tableName, "content")

	_qeyKryWEwcFeedbackForm.fillFieldMap()

	return _qeyKryWEwcFeedbackForm
}

type qeyKryWEwcFeedbackForm struct {
	qeyKryWEwcFeedbackFormDo

	ALL      field.Asterisk
	ID       field.Int32
	PostID   field.Int32
	UniqueID field.String
	Question field.String
	Opened   field.Int32
	Content  field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwcFeedbackForm) Table(newTableName string) *qeyKryWEwcFeedbackForm {
	q.qeyKryWEwcFeedbackFormDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwcFeedbackForm) As(alias string) *qeyKryWEwcFeedbackForm {
	q.qeyKryWEwcFeedbackFormDo.DO = *(q.qeyKryWEwcFeedbackFormDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwcFeedbackForm) updateTableName(table string) *qeyKryWEwcFeedbackForm {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.PostID = field.NewInt32(table, "post_id")
	q.UniqueID = field.NewString(table, "unique_id")
	q.Question = field.NewString(table, "question")
	q.Opened = field.NewInt32(table, "opened")
	q.Content = field.NewString(table, "content")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwcFeedbackForm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwcFeedbackForm) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["post_id"] = q.PostID
	q.fieldMap["unique_id"] = q.UniqueID
	q.fieldMap["question"] = q.Question
	q.fieldMap["opened"] = q.Opened
	q.fieldMap["content"] = q.Content
}

func (q qeyKryWEwcFeedbackForm) clone(db *gorm.DB) qeyKryWEwcFeedbackForm {
	q.qeyKryWEwcFeedbackFormDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwcFeedbackForm) replaceDB(db *gorm.DB) qeyKryWEwcFeedbackForm {
	q.qeyKryWEwcFeedbackFormDo.ReplaceDB(db)
	return q
}

type qeyKryWEwcFeedbackFormDo struct{ gen.DO }

type IQeyKryWEwcFeedbackFormDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwcFeedbackFormDo
	WithContext(ctx context.Context) IQeyKryWEwcFeedbackFormDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwcFeedbackFormDo
	WriteDB() IQeyKryWEwcFeedbackFormDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwcFeedbackFormDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwcFeedbackFormDo
	Not(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo
	Or(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo
	Select(conds ...field.Expr) IQeyKryWEwcFeedbackFormDo
	Where(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo
	Order(conds ...field.Expr) IQeyKryWEwcFeedbackFormDo
	Distinct(cols ...field.Expr) IQeyKryWEwcFeedbackFormDo
	Omit(cols ...field.Expr) IQeyKryWEwcFeedbackFormDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFeedbackFormDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFeedbackFormDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFeedbackFormDo
	Group(cols ...field.Expr) IQeyKryWEwcFeedbackFormDo
	Having(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo
	Limit(limit int) IQeyKryWEwcFeedbackFormDo
	Offset(offset int) IQeyKryWEwcFeedbackFormDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcFeedbackFormDo
	Unscoped() IQeyKryWEwcFeedbackFormDo
	Create(values ...*model.QeyKryWEwcFeedbackForm) error
	CreateInBatches(values []*model.QeyKryWEwcFeedbackForm, batchSize int) error
	Save(values ...*model.QeyKryWEwcFeedbackForm) error
	First() (*model.QeyKryWEwcFeedbackForm, error)
	Take() (*model.QeyKryWEwcFeedbackForm, error)
	Last() (*model.QeyKryWEwcFeedbackForm, error)
	Find() ([]*model.QeyKryWEwcFeedbackForm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcFeedbackForm, err error)
	FindInBatches(result *[]*model.QeyKryWEwcFeedbackForm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwcFeedbackForm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwcFeedbackFormDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwcFeedbackFormDo
	Joins(fields ...field.RelationField) IQeyKryWEwcFeedbackFormDo
	Preload(fields ...field.RelationField) IQeyKryWEwcFeedbackFormDo
	FirstOrInit() (*model.QeyKryWEwcFeedbackForm, error)
	FirstOrCreate() (*model.QeyKryWEwcFeedbackForm, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwcFeedbackForm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwcFeedbackFormDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwcFeedbackFormDo) Debug() IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwcFeedbackFormDo) WithContext(ctx context.Context) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwcFeedbackFormDo) ReadDB() IQeyKryWEwcFeedbackFormDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwcFeedbackFormDo) WriteDB() IQeyKryWEwcFeedbackFormDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwcFeedbackFormDo) Session(config *gorm.Session) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwcFeedbackFormDo) Clauses(conds ...clause.Expression) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Returning(value interface{}, columns ...string) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwcFeedbackFormDo) Not(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Or(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Select(conds ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Where(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Order(conds ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Distinct(cols ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwcFeedbackFormDo) Omit(cols ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwcFeedbackFormDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwcFeedbackFormDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwcFeedbackFormDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwcFeedbackFormDo) Group(cols ...field.Expr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwcFeedbackFormDo) Having(conds ...gen.Condition) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwcFeedbackFormDo) Limit(limit int) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwcFeedbackFormDo) Offset(offset int) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwcFeedbackFormDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwcFeedbackFormDo) Unscoped() IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwcFeedbackFormDo) Create(values ...*model.QeyKryWEwcFeedbackForm) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwcFeedbackFormDo) CreateInBatches(values []*model.QeyKryWEwcFeedbackForm, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwcFeedbackFormDo) Save(values ...*model.QeyKryWEwcFeedbackForm) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwcFeedbackFormDo) First() (*model.QeyKryWEwcFeedbackForm, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFeedbackForm), nil
	}
}

func (q qeyKryWEwcFeedbackFormDo) Take() (*model.QeyKryWEwcFeedbackForm, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFeedbackForm), nil
	}
}

func (q qeyKryWEwcFeedbackFormDo) Last() (*model.QeyKryWEwcFeedbackForm, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFeedbackForm), nil
	}
}

func (q qeyKryWEwcFeedbackFormDo) Find() ([]*model.QeyKryWEwcFeedbackForm, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwcFeedbackForm), err
}

func (q qeyKryWEwcFeedbackFormDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcFeedbackForm, err error) {
	buf := make([]*model.QeyKryWEwcFeedbackForm, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwcFeedbackFormDo) FindInBatches(result *[]*model.QeyKryWEwcFeedbackForm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwcFeedbackFormDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwcFeedbackFormDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwcFeedbackFormDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwcFeedbackFormDo) Joins(fields ...field.RelationField) IQeyKryWEwcFeedbackFormDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwcFeedbackFormDo) Preload(fields ...field.RelationField) IQeyKryWEwcFeedbackFormDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwcFeedbackFormDo) FirstOrInit() (*model.QeyKryWEwcFeedbackForm, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFeedbackForm), nil
	}
}

func (q qeyKryWEwcFeedbackFormDo) FirstOrCreate() (*model.QeyKryWEwcFeedbackForm, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcFeedbackForm), nil
	}
}

func (q qeyKryWEwcFeedbackFormDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwcFeedbackForm, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwcFeedbackFormDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwcFeedbackFormDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwcFeedbackFormDo) Delete(models ...*model.QeyKryWEwcFeedbackForm) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwcFeedbackFormDo) withDO(do gen.Dao) *qeyKryWEwcFeedbackFormDo {
	q.DO = *do.(*gen.DO)
	return q
}
