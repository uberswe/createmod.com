// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEfeaSubmission(db *gorm.DB, opts ...gen.DOOption) qeyKryWEfeaSubmission {
	_qeyKryWEfeaSubmission := qeyKryWEfeaSubmission{}

	_qeyKryWEfeaSubmission.qeyKryWEfeaSubmissionDo.UseDB(db, opts...)
	_qeyKryWEfeaSubmission.qeyKryWEfeaSubmissionDo.UseModel(&model.QeyKryWEfeaSubmission{})

	tableName := _qeyKryWEfeaSubmission.qeyKryWEfeaSubmissionDo.TableName()
	_qeyKryWEfeaSubmission.ALL = field.NewAsterisk(tableName)
	_qeyKryWEfeaSubmission.ID = field.NewInt32(tableName, "id")
	_qeyKryWEfeaSubmission.Title = field.NewString(tableName, "title")
	_qeyKryWEfeaSubmission.CreatedAt = field.NewTime(tableName, "created_at")
	_qeyKryWEfeaSubmission.User = field.NewInt32(tableName, "user")
	_qeyKryWEfeaSubmission.Fields = field.NewString(tableName, "fields")
	_qeyKryWEfeaSubmission.Form = field.NewString(tableName, "form")
	_qeyKryWEfeaSubmission.Status = field.NewString(tableName, "status")

	_qeyKryWEfeaSubmission.fillFieldMap()

	return _qeyKryWEfeaSubmission
}

type qeyKryWEfeaSubmission struct {
	qeyKryWEfeaSubmissionDo

	ALL       field.Asterisk
	ID        field.Int32
	Title     field.String
	CreatedAt field.Time
	User      field.Int32
	Fields    field.String
	Form      field.String
	Status    field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEfeaSubmission) Table(newTableName string) *qeyKryWEfeaSubmission {
	q.qeyKryWEfeaSubmissionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEfeaSubmission) As(alias string) *qeyKryWEfeaSubmission {
	q.qeyKryWEfeaSubmissionDo.DO = *(q.qeyKryWEfeaSubmissionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEfeaSubmission) updateTableName(table string) *qeyKryWEfeaSubmission {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Title = field.NewString(table, "title")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.User = field.NewInt32(table, "user")
	q.Fields = field.NewString(table, "fields")
	q.Form = field.NewString(table, "form")
	q.Status = field.NewString(table, "status")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEfeaSubmission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEfeaSubmission) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id"] = q.ID
	q.fieldMap["title"] = q.Title
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["user"] = q.User
	q.fieldMap["fields"] = q.Fields
	q.fieldMap["form"] = q.Form
	q.fieldMap["status"] = q.Status
}

func (q qeyKryWEfeaSubmission) clone(db *gorm.DB) qeyKryWEfeaSubmission {
	q.qeyKryWEfeaSubmissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEfeaSubmission) replaceDB(db *gorm.DB) qeyKryWEfeaSubmission {
	q.qeyKryWEfeaSubmissionDo.ReplaceDB(db)
	return q
}

type qeyKryWEfeaSubmissionDo struct{ gen.DO }

type IQeyKryWEfeaSubmissionDo interface {
	gen.SubQuery
	Debug() IQeyKryWEfeaSubmissionDo
	WithContext(ctx context.Context) IQeyKryWEfeaSubmissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEfeaSubmissionDo
	WriteDB() IQeyKryWEfeaSubmissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEfeaSubmissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEfeaSubmissionDo
	Not(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo
	Or(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo
	Select(conds ...field.Expr) IQeyKryWEfeaSubmissionDo
	Where(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo
	Order(conds ...field.Expr) IQeyKryWEfeaSubmissionDo
	Distinct(cols ...field.Expr) IQeyKryWEfeaSubmissionDo
	Omit(cols ...field.Expr) IQeyKryWEfeaSubmissionDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEfeaSubmissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEfeaSubmissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEfeaSubmissionDo
	Group(cols ...field.Expr) IQeyKryWEfeaSubmissionDo
	Having(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo
	Limit(limit int) IQeyKryWEfeaSubmissionDo
	Offset(offset int) IQeyKryWEfeaSubmissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEfeaSubmissionDo
	Unscoped() IQeyKryWEfeaSubmissionDo
	Create(values ...*model.QeyKryWEfeaSubmission) error
	CreateInBatches(values []*model.QeyKryWEfeaSubmission, batchSize int) error
	Save(values ...*model.QeyKryWEfeaSubmission) error
	First() (*model.QeyKryWEfeaSubmission, error)
	Take() (*model.QeyKryWEfeaSubmission, error)
	Last() (*model.QeyKryWEfeaSubmission, error)
	Find() ([]*model.QeyKryWEfeaSubmission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEfeaSubmission, err error)
	FindInBatches(result *[]*model.QeyKryWEfeaSubmission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEfeaSubmission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEfeaSubmissionDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEfeaSubmissionDo
	Joins(fields ...field.RelationField) IQeyKryWEfeaSubmissionDo
	Preload(fields ...field.RelationField) IQeyKryWEfeaSubmissionDo
	FirstOrInit() (*model.QeyKryWEfeaSubmission, error)
	FirstOrCreate() (*model.QeyKryWEfeaSubmission, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEfeaSubmission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEfeaSubmissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEfeaSubmissionDo) Debug() IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEfeaSubmissionDo) WithContext(ctx context.Context) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEfeaSubmissionDo) ReadDB() IQeyKryWEfeaSubmissionDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEfeaSubmissionDo) WriteDB() IQeyKryWEfeaSubmissionDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEfeaSubmissionDo) Session(config *gorm.Session) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEfeaSubmissionDo) Clauses(conds ...clause.Expression) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Returning(value interface{}, columns ...string) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEfeaSubmissionDo) Not(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Or(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Select(conds ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Where(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Order(conds ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Distinct(cols ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEfeaSubmissionDo) Omit(cols ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEfeaSubmissionDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEfeaSubmissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEfeaSubmissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEfeaSubmissionDo) Group(cols ...field.Expr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEfeaSubmissionDo) Having(conds ...gen.Condition) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEfeaSubmissionDo) Limit(limit int) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEfeaSubmissionDo) Offset(offset int) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEfeaSubmissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEfeaSubmissionDo) Unscoped() IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEfeaSubmissionDo) Create(values ...*model.QeyKryWEfeaSubmission) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEfeaSubmissionDo) CreateInBatches(values []*model.QeyKryWEfeaSubmission, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEfeaSubmissionDo) Save(values ...*model.QeyKryWEfeaSubmission) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEfeaSubmissionDo) First() (*model.QeyKryWEfeaSubmission, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEfeaSubmission), nil
	}
}

func (q qeyKryWEfeaSubmissionDo) Take() (*model.QeyKryWEfeaSubmission, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEfeaSubmission), nil
	}
}

func (q qeyKryWEfeaSubmissionDo) Last() (*model.QeyKryWEfeaSubmission, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEfeaSubmission), nil
	}
}

func (q qeyKryWEfeaSubmissionDo) Find() ([]*model.QeyKryWEfeaSubmission, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEfeaSubmission), err
}

func (q qeyKryWEfeaSubmissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEfeaSubmission, err error) {
	buf := make([]*model.QeyKryWEfeaSubmission, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEfeaSubmissionDo) FindInBatches(result *[]*model.QeyKryWEfeaSubmission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEfeaSubmissionDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEfeaSubmissionDo) Assign(attrs ...field.AssignExpr) IQeyKryWEfeaSubmissionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEfeaSubmissionDo) Joins(fields ...field.RelationField) IQeyKryWEfeaSubmissionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEfeaSubmissionDo) Preload(fields ...field.RelationField) IQeyKryWEfeaSubmissionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEfeaSubmissionDo) FirstOrInit() (*model.QeyKryWEfeaSubmission, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEfeaSubmission), nil
	}
}

func (q qeyKryWEfeaSubmissionDo) FirstOrCreate() (*model.QeyKryWEfeaSubmission, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEfeaSubmission), nil
	}
}

func (q qeyKryWEfeaSubmissionDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEfeaSubmission, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEfeaSubmissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEfeaSubmissionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEfeaSubmissionDo) Delete(models ...*model.QeyKryWEfeaSubmission) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEfeaSubmissionDo) withDO(do gen.Dao) *qeyKryWEfeaSubmissionDo {
	q.DO = *do.(*gen.DO)
	return q
}
