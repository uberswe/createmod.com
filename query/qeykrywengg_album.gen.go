// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEnggAlbum(db *gorm.DB, opts ...gen.DOOption) qeyKryWEnggAlbum {
	_qeyKryWEnggAlbum := qeyKryWEnggAlbum{}

	_qeyKryWEnggAlbum.qeyKryWEnggAlbumDo.UseDB(db, opts...)
	_qeyKryWEnggAlbum.qeyKryWEnggAlbumDo.UseModel(&model.QeyKryWEnggAlbum{})

	tableName := _qeyKryWEnggAlbum.qeyKryWEnggAlbumDo.TableName()
	_qeyKryWEnggAlbum.ALL = field.NewAsterisk(tableName)
	_qeyKryWEnggAlbum.ID = field.NewInt64(tableName, "id")
	_qeyKryWEnggAlbum.Name = field.NewString(tableName, "name")
	_qeyKryWEnggAlbum.Slug = field.NewString(tableName, "slug")
	_qeyKryWEnggAlbum.Previewpic = field.NewInt64(tableName, "previewpic")
	_qeyKryWEnggAlbum.Albumdesc = field.NewString(tableName, "albumdesc")
	_qeyKryWEnggAlbum.Sortorder = field.NewString(tableName, "sortorder")
	_qeyKryWEnggAlbum.Pageid = field.NewInt64(tableName, "pageid")
	_qeyKryWEnggAlbum.ExtrasPostID = field.NewInt64(tableName, "extras_post_id")

	_qeyKryWEnggAlbum.fillFieldMap()

	return _qeyKryWEnggAlbum
}

type qeyKryWEnggAlbum struct {
	qeyKryWEnggAlbumDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String
	Slug         field.String
	Previewpic   field.Int64
	Albumdesc    field.String
	Sortorder    field.String
	Pageid       field.Int64
	ExtrasPostID field.Int64

	fieldMap map[string]field.Expr
}

func (q qeyKryWEnggAlbum) Table(newTableName string) *qeyKryWEnggAlbum {
	q.qeyKryWEnggAlbumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEnggAlbum) As(alias string) *qeyKryWEnggAlbum {
	q.qeyKryWEnggAlbumDo.DO = *(q.qeyKryWEnggAlbumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEnggAlbum) updateTableName(table string) *qeyKryWEnggAlbum {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Name = field.NewString(table, "name")
	q.Slug = field.NewString(table, "slug")
	q.Previewpic = field.NewInt64(table, "previewpic")
	q.Albumdesc = field.NewString(table, "albumdesc")
	q.Sortorder = field.NewString(table, "sortorder")
	q.Pageid = field.NewInt64(table, "pageid")
	q.ExtrasPostID = field.NewInt64(table, "extras_post_id")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEnggAlbum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEnggAlbum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 8)
	q.fieldMap["id"] = q.ID
	q.fieldMap["name"] = q.Name
	q.fieldMap["slug"] = q.Slug
	q.fieldMap["previewpic"] = q.Previewpic
	q.fieldMap["albumdesc"] = q.Albumdesc
	q.fieldMap["sortorder"] = q.Sortorder
	q.fieldMap["pageid"] = q.Pageid
	q.fieldMap["extras_post_id"] = q.ExtrasPostID
}

func (q qeyKryWEnggAlbum) clone(db *gorm.DB) qeyKryWEnggAlbum {
	q.qeyKryWEnggAlbumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEnggAlbum) replaceDB(db *gorm.DB) qeyKryWEnggAlbum {
	q.qeyKryWEnggAlbumDo.ReplaceDB(db)
	return q
}

type qeyKryWEnggAlbumDo struct{ gen.DO }

type IQeyKryWEnggAlbumDo interface {
	gen.SubQuery
	Debug() IQeyKryWEnggAlbumDo
	WithContext(ctx context.Context) IQeyKryWEnggAlbumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEnggAlbumDo
	WriteDB() IQeyKryWEnggAlbumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEnggAlbumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEnggAlbumDo
	Not(conds ...gen.Condition) IQeyKryWEnggAlbumDo
	Or(conds ...gen.Condition) IQeyKryWEnggAlbumDo
	Select(conds ...field.Expr) IQeyKryWEnggAlbumDo
	Where(conds ...gen.Condition) IQeyKryWEnggAlbumDo
	Order(conds ...field.Expr) IQeyKryWEnggAlbumDo
	Distinct(cols ...field.Expr) IQeyKryWEnggAlbumDo
	Omit(cols ...field.Expr) IQeyKryWEnggAlbumDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEnggAlbumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggAlbumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggAlbumDo
	Group(cols ...field.Expr) IQeyKryWEnggAlbumDo
	Having(conds ...gen.Condition) IQeyKryWEnggAlbumDo
	Limit(limit int) IQeyKryWEnggAlbumDo
	Offset(offset int) IQeyKryWEnggAlbumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEnggAlbumDo
	Unscoped() IQeyKryWEnggAlbumDo
	Create(values ...*model.QeyKryWEnggAlbum) error
	CreateInBatches(values []*model.QeyKryWEnggAlbum, batchSize int) error
	Save(values ...*model.QeyKryWEnggAlbum) error
	First() (*model.QeyKryWEnggAlbum, error)
	Take() (*model.QeyKryWEnggAlbum, error)
	Last() (*model.QeyKryWEnggAlbum, error)
	Find() ([]*model.QeyKryWEnggAlbum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEnggAlbum, err error)
	FindInBatches(result *[]*model.QeyKryWEnggAlbum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEnggAlbum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEnggAlbumDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEnggAlbumDo
	Joins(fields ...field.RelationField) IQeyKryWEnggAlbumDo
	Preload(fields ...field.RelationField) IQeyKryWEnggAlbumDo
	FirstOrInit() (*model.QeyKryWEnggAlbum, error)
	FirstOrCreate() (*model.QeyKryWEnggAlbum, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEnggAlbum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEnggAlbumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEnggAlbumDo) Debug() IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEnggAlbumDo) WithContext(ctx context.Context) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEnggAlbumDo) ReadDB() IQeyKryWEnggAlbumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEnggAlbumDo) WriteDB() IQeyKryWEnggAlbumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEnggAlbumDo) Session(config *gorm.Session) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEnggAlbumDo) Clauses(conds ...clause.Expression) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEnggAlbumDo) Returning(value interface{}, columns ...string) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEnggAlbumDo) Not(conds ...gen.Condition) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEnggAlbumDo) Or(conds ...gen.Condition) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEnggAlbumDo) Select(conds ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEnggAlbumDo) Where(conds ...gen.Condition) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEnggAlbumDo) Order(conds ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEnggAlbumDo) Distinct(cols ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEnggAlbumDo) Omit(cols ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEnggAlbumDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEnggAlbumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEnggAlbumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEnggAlbumDo) Group(cols ...field.Expr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEnggAlbumDo) Having(conds ...gen.Condition) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEnggAlbumDo) Limit(limit int) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEnggAlbumDo) Offset(offset int) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEnggAlbumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEnggAlbumDo) Unscoped() IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEnggAlbumDo) Create(values ...*model.QeyKryWEnggAlbum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEnggAlbumDo) CreateInBatches(values []*model.QeyKryWEnggAlbum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEnggAlbumDo) Save(values ...*model.QeyKryWEnggAlbum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEnggAlbumDo) First() (*model.QeyKryWEnggAlbum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggAlbum), nil
	}
}

func (q qeyKryWEnggAlbumDo) Take() (*model.QeyKryWEnggAlbum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggAlbum), nil
	}
}

func (q qeyKryWEnggAlbumDo) Last() (*model.QeyKryWEnggAlbum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggAlbum), nil
	}
}

func (q qeyKryWEnggAlbumDo) Find() ([]*model.QeyKryWEnggAlbum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEnggAlbum), err
}

func (q qeyKryWEnggAlbumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEnggAlbum, err error) {
	buf := make([]*model.QeyKryWEnggAlbum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEnggAlbumDo) FindInBatches(result *[]*model.QeyKryWEnggAlbum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEnggAlbumDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEnggAlbumDo) Assign(attrs ...field.AssignExpr) IQeyKryWEnggAlbumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEnggAlbumDo) Joins(fields ...field.RelationField) IQeyKryWEnggAlbumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEnggAlbumDo) Preload(fields ...field.RelationField) IQeyKryWEnggAlbumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEnggAlbumDo) FirstOrInit() (*model.QeyKryWEnggAlbum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggAlbum), nil
	}
}

func (q qeyKryWEnggAlbumDo) FirstOrCreate() (*model.QeyKryWEnggAlbum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEnggAlbum), nil
	}
}

func (q qeyKryWEnggAlbumDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEnggAlbum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEnggAlbumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEnggAlbumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEnggAlbumDo) Delete(models ...*model.QeyKryWEnggAlbum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEnggAlbumDo) withDO(do gen.Dao) *qeyKryWEnggAlbumDo {
	q.DO = *do.(*gen.DO)
	return q
}
