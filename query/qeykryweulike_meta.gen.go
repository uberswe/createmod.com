// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEulikeMetum(db *gorm.DB, opts ...gen.DOOption) qeyKryWEulikeMetum {
	_qeyKryWEulikeMetum := qeyKryWEulikeMetum{}

	_qeyKryWEulikeMetum.qeyKryWEulikeMetumDo.UseDB(db, opts...)
	_qeyKryWEulikeMetum.qeyKryWEulikeMetumDo.UseModel(&model.QeyKryWEulikeMetum{})

	tableName := _qeyKryWEulikeMetum.qeyKryWEulikeMetumDo.TableName()
	_qeyKryWEulikeMetum.ALL = field.NewAsterisk(tableName)
	_qeyKryWEulikeMetum.MetaID = field.NewInt64(tableName, "meta_id")
	_qeyKryWEulikeMetum.ItemID = field.NewInt64(tableName, "item_id")
	_qeyKryWEulikeMetum.MetaGroup = field.NewString(tableName, "meta_group")
	_qeyKryWEulikeMetum.MetaKey = field.NewString(tableName, "meta_key")
	_qeyKryWEulikeMetum.MetaValue = field.NewString(tableName, "meta_value")

	_qeyKryWEulikeMetum.fillFieldMap()

	return _qeyKryWEulikeMetum
}

type qeyKryWEulikeMetum struct {
	qeyKryWEulikeMetumDo

	ALL       field.Asterisk
	MetaID    field.Int64
	ItemID    field.Int64
	MetaGroup field.String
	MetaKey   field.String
	MetaValue field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEulikeMetum) Table(newTableName string) *qeyKryWEulikeMetum {
	q.qeyKryWEulikeMetumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEulikeMetum) As(alias string) *qeyKryWEulikeMetum {
	q.qeyKryWEulikeMetumDo.DO = *(q.qeyKryWEulikeMetumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEulikeMetum) updateTableName(table string) *qeyKryWEulikeMetum {
	q.ALL = field.NewAsterisk(table)
	q.MetaID = field.NewInt64(table, "meta_id")
	q.ItemID = field.NewInt64(table, "item_id")
	q.MetaGroup = field.NewString(table, "meta_group")
	q.MetaKey = field.NewString(table, "meta_key")
	q.MetaValue = field.NewString(table, "meta_value")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEulikeMetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEulikeMetum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["meta_id"] = q.MetaID
	q.fieldMap["item_id"] = q.ItemID
	q.fieldMap["meta_group"] = q.MetaGroup
	q.fieldMap["meta_key"] = q.MetaKey
	q.fieldMap["meta_value"] = q.MetaValue
}

func (q qeyKryWEulikeMetum) clone(db *gorm.DB) qeyKryWEulikeMetum {
	q.qeyKryWEulikeMetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEulikeMetum) replaceDB(db *gorm.DB) qeyKryWEulikeMetum {
	q.qeyKryWEulikeMetumDo.ReplaceDB(db)
	return q
}

type qeyKryWEulikeMetumDo struct{ gen.DO }

type IQeyKryWEulikeMetumDo interface {
	gen.SubQuery
	Debug() IQeyKryWEulikeMetumDo
	WithContext(ctx context.Context) IQeyKryWEulikeMetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEulikeMetumDo
	WriteDB() IQeyKryWEulikeMetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEulikeMetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEulikeMetumDo
	Not(conds ...gen.Condition) IQeyKryWEulikeMetumDo
	Or(conds ...gen.Condition) IQeyKryWEulikeMetumDo
	Select(conds ...field.Expr) IQeyKryWEulikeMetumDo
	Where(conds ...gen.Condition) IQeyKryWEulikeMetumDo
	Order(conds ...field.Expr) IQeyKryWEulikeMetumDo
	Distinct(cols ...field.Expr) IQeyKryWEulikeMetumDo
	Omit(cols ...field.Expr) IQeyKryWEulikeMetumDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeMetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeMetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeMetumDo
	Group(cols ...field.Expr) IQeyKryWEulikeMetumDo
	Having(conds ...gen.Condition) IQeyKryWEulikeMetumDo
	Limit(limit int) IQeyKryWEulikeMetumDo
	Offset(offset int) IQeyKryWEulikeMetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeMetumDo
	Unscoped() IQeyKryWEulikeMetumDo
	Create(values ...*model.QeyKryWEulikeMetum) error
	CreateInBatches(values []*model.QeyKryWEulikeMetum, batchSize int) error
	Save(values ...*model.QeyKryWEulikeMetum) error
	First() (*model.QeyKryWEulikeMetum, error)
	Take() (*model.QeyKryWEulikeMetum, error)
	Last() (*model.QeyKryWEulikeMetum, error)
	Find() ([]*model.QeyKryWEulikeMetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeMetum, err error)
	FindInBatches(result *[]*model.QeyKryWEulikeMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEulikeMetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeMetumDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEulikeMetumDo
	Joins(fields ...field.RelationField) IQeyKryWEulikeMetumDo
	Preload(fields ...field.RelationField) IQeyKryWEulikeMetumDo
	FirstOrInit() (*model.QeyKryWEulikeMetum, error)
	FirstOrCreate() (*model.QeyKryWEulikeMetum, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeMetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEulikeMetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEulikeMetumDo) Debug() IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEulikeMetumDo) WithContext(ctx context.Context) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEulikeMetumDo) ReadDB() IQeyKryWEulikeMetumDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEulikeMetumDo) WriteDB() IQeyKryWEulikeMetumDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEulikeMetumDo) Session(config *gorm.Session) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEulikeMetumDo) Clauses(conds ...clause.Expression) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEulikeMetumDo) Returning(value interface{}, columns ...string) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEulikeMetumDo) Not(conds ...gen.Condition) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEulikeMetumDo) Or(conds ...gen.Condition) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEulikeMetumDo) Select(conds ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEulikeMetumDo) Where(conds ...gen.Condition) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEulikeMetumDo) Order(conds ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEulikeMetumDo) Distinct(cols ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEulikeMetumDo) Omit(cols ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEulikeMetumDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEulikeMetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEulikeMetumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEulikeMetumDo) Group(cols ...field.Expr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEulikeMetumDo) Having(conds ...gen.Condition) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEulikeMetumDo) Limit(limit int) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEulikeMetumDo) Offset(offset int) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEulikeMetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEulikeMetumDo) Unscoped() IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEulikeMetumDo) Create(values ...*model.QeyKryWEulikeMetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEulikeMetumDo) CreateInBatches(values []*model.QeyKryWEulikeMetum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEulikeMetumDo) Save(values ...*model.QeyKryWEulikeMetum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEulikeMetumDo) First() (*model.QeyKryWEulikeMetum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeMetum), nil
	}
}

func (q qeyKryWEulikeMetumDo) Take() (*model.QeyKryWEulikeMetum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeMetum), nil
	}
}

func (q qeyKryWEulikeMetumDo) Last() (*model.QeyKryWEulikeMetum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeMetum), nil
	}
}

func (q qeyKryWEulikeMetumDo) Find() ([]*model.QeyKryWEulikeMetum, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEulikeMetum), err
}

func (q qeyKryWEulikeMetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEulikeMetum, err error) {
	buf := make([]*model.QeyKryWEulikeMetum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEulikeMetumDo) FindInBatches(result *[]*model.QeyKryWEulikeMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEulikeMetumDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEulikeMetumDo) Assign(attrs ...field.AssignExpr) IQeyKryWEulikeMetumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEulikeMetumDo) Joins(fields ...field.RelationField) IQeyKryWEulikeMetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEulikeMetumDo) Preload(fields ...field.RelationField) IQeyKryWEulikeMetumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEulikeMetumDo) FirstOrInit() (*model.QeyKryWEulikeMetum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeMetum), nil
	}
}

func (q qeyKryWEulikeMetumDo) FirstOrCreate() (*model.QeyKryWEulikeMetum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEulikeMetum), nil
	}
}

func (q qeyKryWEulikeMetumDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEulikeMetum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEulikeMetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEulikeMetumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEulikeMetumDo) Delete(models ...*model.QeyKryWEulikeMetum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEulikeMetumDo) withDO(do gen.Dao) *qeyKryWEulikeMetumDo {
	q.DO = *do.(*gen.DO)
	return q
}
