// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"createmod/model"
)

func newQeyKryWEwcPhrase(db *gorm.DB, opts ...gen.DOOption) qeyKryWEwcPhrase {
	_qeyKryWEwcPhrase := qeyKryWEwcPhrase{}

	_qeyKryWEwcPhrase.qeyKryWEwcPhraseDo.UseDB(db, opts...)
	_qeyKryWEwcPhrase.qeyKryWEwcPhraseDo.UseModel(&model.QeyKryWEwcPhrase{})

	tableName := _qeyKryWEwcPhrase.qeyKryWEwcPhraseDo.TableName()
	_qeyKryWEwcPhrase.ALL = field.NewAsterisk(tableName)
	_qeyKryWEwcPhrase.ID = field.NewInt32(tableName, "id")
	_qeyKryWEwcPhrase.PhraseKey = field.NewString(tableName, "phrase_key")
	_qeyKryWEwcPhrase.PhraseValue = field.NewString(tableName, "phrase_value")

	_qeyKryWEwcPhrase.fillFieldMap()

	return _qeyKryWEwcPhrase
}

type qeyKryWEwcPhrase struct {
	qeyKryWEwcPhraseDo

	ALL         field.Asterisk
	ID          field.Int32
	PhraseKey   field.String
	PhraseValue field.String

	fieldMap map[string]field.Expr
}

func (q qeyKryWEwcPhrase) Table(newTableName string) *qeyKryWEwcPhrase {
	q.qeyKryWEwcPhraseDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qeyKryWEwcPhrase) As(alias string) *qeyKryWEwcPhrase {
	q.qeyKryWEwcPhraseDo.DO = *(q.qeyKryWEwcPhraseDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qeyKryWEwcPhrase) updateTableName(table string) *qeyKryWEwcPhrase {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.PhraseKey = field.NewString(table, "phrase_key")
	q.PhraseValue = field.NewString(table, "phrase_value")

	q.fillFieldMap()

	return q
}

func (q *qeyKryWEwcPhrase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qeyKryWEwcPhrase) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["id"] = q.ID
	q.fieldMap["phrase_key"] = q.PhraseKey
	q.fieldMap["phrase_value"] = q.PhraseValue
}

func (q qeyKryWEwcPhrase) clone(db *gorm.DB) qeyKryWEwcPhrase {
	q.qeyKryWEwcPhraseDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qeyKryWEwcPhrase) replaceDB(db *gorm.DB) qeyKryWEwcPhrase {
	q.qeyKryWEwcPhraseDo.ReplaceDB(db)
	return q
}

type qeyKryWEwcPhraseDo struct{ gen.DO }

type IQeyKryWEwcPhraseDo interface {
	gen.SubQuery
	Debug() IQeyKryWEwcPhraseDo
	WithContext(ctx context.Context) IQeyKryWEwcPhraseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQeyKryWEwcPhraseDo
	WriteDB() IQeyKryWEwcPhraseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQeyKryWEwcPhraseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQeyKryWEwcPhraseDo
	Not(conds ...gen.Condition) IQeyKryWEwcPhraseDo
	Or(conds ...gen.Condition) IQeyKryWEwcPhraseDo
	Select(conds ...field.Expr) IQeyKryWEwcPhraseDo
	Where(conds ...gen.Condition) IQeyKryWEwcPhraseDo
	Order(conds ...field.Expr) IQeyKryWEwcPhraseDo
	Distinct(cols ...field.Expr) IQeyKryWEwcPhraseDo
	Omit(cols ...field.Expr) IQeyKryWEwcPhraseDo
	Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcPhraseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcPhraseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcPhraseDo
	Group(cols ...field.Expr) IQeyKryWEwcPhraseDo
	Having(conds ...gen.Condition) IQeyKryWEwcPhraseDo
	Limit(limit int) IQeyKryWEwcPhraseDo
	Offset(offset int) IQeyKryWEwcPhraseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcPhraseDo
	Unscoped() IQeyKryWEwcPhraseDo
	Create(values ...*model.QeyKryWEwcPhrase) error
	CreateInBatches(values []*model.QeyKryWEwcPhrase, batchSize int) error
	Save(values ...*model.QeyKryWEwcPhrase) error
	First() (*model.QeyKryWEwcPhrase, error)
	Take() (*model.QeyKryWEwcPhrase, error)
	Last() (*model.QeyKryWEwcPhrase, error)
	Find() ([]*model.QeyKryWEwcPhrase, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcPhrase, err error)
	FindInBatches(result *[]*model.QeyKryWEwcPhrase, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QeyKryWEwcPhrase) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQeyKryWEwcPhraseDo
	Assign(attrs ...field.AssignExpr) IQeyKryWEwcPhraseDo
	Joins(fields ...field.RelationField) IQeyKryWEwcPhraseDo
	Preload(fields ...field.RelationField) IQeyKryWEwcPhraseDo
	FirstOrInit() (*model.QeyKryWEwcPhrase, error)
	FirstOrCreate() (*model.QeyKryWEwcPhrase, error)
	FindByPage(offset int, limit int) (result []*model.QeyKryWEwcPhrase, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQeyKryWEwcPhraseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qeyKryWEwcPhraseDo) Debug() IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Debug())
}

func (q qeyKryWEwcPhraseDo) WithContext(ctx context.Context) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qeyKryWEwcPhraseDo) ReadDB() IQeyKryWEwcPhraseDo {
	return q.Clauses(dbresolver.Read)
}

func (q qeyKryWEwcPhraseDo) WriteDB() IQeyKryWEwcPhraseDo {
	return q.Clauses(dbresolver.Write)
}

func (q qeyKryWEwcPhraseDo) Session(config *gorm.Session) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Session(config))
}

func (q qeyKryWEwcPhraseDo) Clauses(conds ...clause.Expression) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qeyKryWEwcPhraseDo) Returning(value interface{}, columns ...string) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qeyKryWEwcPhraseDo) Not(conds ...gen.Condition) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qeyKryWEwcPhraseDo) Or(conds ...gen.Condition) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qeyKryWEwcPhraseDo) Select(conds ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qeyKryWEwcPhraseDo) Where(conds ...gen.Condition) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qeyKryWEwcPhraseDo) Order(conds ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qeyKryWEwcPhraseDo) Distinct(cols ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qeyKryWEwcPhraseDo) Omit(cols ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qeyKryWEwcPhraseDo) Join(table schema.Tabler, on ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qeyKryWEwcPhraseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qeyKryWEwcPhraseDo) RightJoin(table schema.Tabler, on ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qeyKryWEwcPhraseDo) Group(cols ...field.Expr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qeyKryWEwcPhraseDo) Having(conds ...gen.Condition) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qeyKryWEwcPhraseDo) Limit(limit int) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qeyKryWEwcPhraseDo) Offset(offset int) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qeyKryWEwcPhraseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qeyKryWEwcPhraseDo) Unscoped() IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qeyKryWEwcPhraseDo) Create(values ...*model.QeyKryWEwcPhrase) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qeyKryWEwcPhraseDo) CreateInBatches(values []*model.QeyKryWEwcPhrase, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qeyKryWEwcPhraseDo) Save(values ...*model.QeyKryWEwcPhrase) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qeyKryWEwcPhraseDo) First() (*model.QeyKryWEwcPhrase, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcPhrase), nil
	}
}

func (q qeyKryWEwcPhraseDo) Take() (*model.QeyKryWEwcPhrase, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcPhrase), nil
	}
}

func (q qeyKryWEwcPhraseDo) Last() (*model.QeyKryWEwcPhrase, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcPhrase), nil
	}
}

func (q qeyKryWEwcPhraseDo) Find() ([]*model.QeyKryWEwcPhrase, error) {
	result, err := q.DO.Find()
	return result.([]*model.QeyKryWEwcPhrase), err
}

func (q qeyKryWEwcPhraseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QeyKryWEwcPhrase, err error) {
	buf := make([]*model.QeyKryWEwcPhrase, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qeyKryWEwcPhraseDo) FindInBatches(result *[]*model.QeyKryWEwcPhrase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qeyKryWEwcPhraseDo) Attrs(attrs ...field.AssignExpr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qeyKryWEwcPhraseDo) Assign(attrs ...field.AssignExpr) IQeyKryWEwcPhraseDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qeyKryWEwcPhraseDo) Joins(fields ...field.RelationField) IQeyKryWEwcPhraseDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qeyKryWEwcPhraseDo) Preload(fields ...field.RelationField) IQeyKryWEwcPhraseDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qeyKryWEwcPhraseDo) FirstOrInit() (*model.QeyKryWEwcPhrase, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcPhrase), nil
	}
}

func (q qeyKryWEwcPhraseDo) FirstOrCreate() (*model.QeyKryWEwcPhrase, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QeyKryWEwcPhrase), nil
	}
}

func (q qeyKryWEwcPhraseDo) FindByPage(offset int, limit int) (result []*model.QeyKryWEwcPhrase, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qeyKryWEwcPhraseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qeyKryWEwcPhraseDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qeyKryWEwcPhraseDo) Delete(models ...*model.QeyKryWEwcPhrase) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qeyKryWEwcPhraseDo) withDO(do gen.Dao) *qeyKryWEwcPhraseDo {
	q.DO = *do.(*gen.DO)
	return q
}
